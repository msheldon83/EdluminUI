pool:
  vmImage: "Ubuntu 16.04"

# Build Number format
name: $(date:yy).$(DayOfYear)$(Rev:.rr)

trigger:
  batch: true
  branches:
    include:
      - master
      - pull/*

variables:
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

steps:
  - task: NodeTool@0
    inputs:
      versionSpec: "12.x"

  - task: Cache@2
    inputs:
      key: 'yarn | "$(Agent.OS)" | yarn.lock'
      restoreKeys: |
        yarn | "$(Agent.OS)"
      path: $(YARN_CACHE_FOLDER)
    displayName: Cache Yarn packages

  - script: |
      yarn --frozen-lockfile
    displayName: "install dependencies"

  - script: |
      yarn build
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: "build"

  - script: |
      yarn threaded-lint &&
      yarn run jest --reporters=jest-junit
    condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))
    displayName: "lint and unit tests"

  - task: PublishTestResults@2
    inputs:
      testRunner: JUnit
      testResultsFiles: "junit.xml"
    condition: and(succeededOrFailed(), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: |
      yarn production-build
    displayName: "dev production build"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: OctopusPack@4
    displayName: "Package for Octopus"
    inputs:
      PackageId: "Edlumin.UI"
      PackageVersion: $(Build.BuildNumber)
      SourcePath: "./dist"
      OutputPath: $(Build.ArtifactStagingDirectory)
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: OctopusPush@4
    displayName: "Push packages to Octopus"
    inputs:
      OctoConnectedServiceName: "Octopus Deploy"
      Space: "Default"
      Replace: true
      Package: |
        $(Build.ArtifactStagingDirectory)/Edlumin.UI.$(Build.BuildNumber).nupkg
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: OctopusCreateRelease@4
    displayName: "Create Release"
    inputs:
      OctoConnectedServiceName: "Octopus Deploy"
      Space: "Default"
      ProjectName: "Edlumin Frontend"
      ReleaseNumber: $(Build.BuildNumber)
      Channel: "Default"
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
