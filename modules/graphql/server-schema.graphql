type Absence implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  employeeId: ID!
  notesToApprover: String
  adminOnlyNotes: String
  isClosed: Boolean!
  startDate: Date
  startTimeLocal: DateTime
  endDate: Date
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  numDays: Int
  totalDuration: Int!
  totalDayPortion: Decimal!
  details: [AbsenceDetail]
  closedDetails: [AbsenceDetail]
  employee: Employee
  vacancies: [Vacancy]
  locationIds: [ID!]!
  locations: [Location]
  positionTypeIds: [ID!]!
  positionTypes: [PositionType]
}

input AbsenceCreateInput {
  orgId: ID!
  employeeId: ID!
  notesToApprover: String
  adminOnlyNotes: String
  details: [AbsenceDetailCreateInput]
  vacancies: [AbsenceVacancyInput]
  ignoreWarnings: Boolean
}

type AbsenceDetail implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  absenceId: ID!
  startDate: Date
  startTimeLocal: DateTime
  endDate: Date
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  actualDuration: Int
  dayPartId: DayPart
  dayPortion: Decimal!
  description: String
  isClosed: Boolean!
  reasonUsages: [AbsenceReasonUsage]
}

input AbsenceDetailCreateInput {
  id: ID
  date: DateTime
  dayPartId: DayPart
  startTime: Seconds
  endTime: Seconds
  description: String
  reasons: [AbsenceReasonUsageInput]
}

type AbsenceDetailDr {
  _info: [ReturnMessage]
  id: ID!
  absenceId: ID!
  startDate: Date
  endDate: Date
  startTimeLocal: DateTime
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  originalStartTime: DateTime
  originalEndTime: DateTime
  dayPartId: DayPart
  isClosed: Boolean!
  reasonUsages: [AbsenceReasonUsageDr]!
}

enum AbsenceDocumentType {
  INVALID
}

type AbsenceDr {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime
  createdLocal: DateTime
  changedUtc: DateTime
  changedLocal: DateTime
  rowVersion: String!
  startDate: Date
  endDate: Date
  numDays: Int!
  isMultiDay: Boolean!
  isClosed: Boolean!
  calendarDayTypeId: CalendarDayType
  teacher: EmployeeDr!
  details: [AbsenceDetailDr]!
  vacancies: [VacancyDr]!
  locationIds: [ID]
  positionTypeIds: [ID]
  positionTypes: [PositionTypeDr]!
  locations: [LocationDr]!
}

type AbsenceMutations {
  create(absence: AbsenceCreateInput!): Absence
  update(absence: AbsenceUpdateInput!): Absence
  delete(absenceId: ID!): Boolean
}

type AbsenceQueries {
  byId(id: ID!): Absence
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [Absence]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedAbsence
  projectedVacancies(absence: AbsenceCreateInput!, ignoreAbsenceId: ID): [Vacancy]
  replacementEmployeesForVacancy(orgId: ID!, limit: Int, offset: Int, sortBy: [SortDetailsInput], vacancyId: ID, vacancyDetailIds: [ID], vacancy: AbsenceVacancyInput, absentEmployeeId: ID, name: String, qualified: [VacancyQualification], available: [VacancyAvailability], favoritesOnly: Boolean, replacementEmployeeId: ID): PagedVacancySubSearchQueryResult
  projectedAbsence(absence: AbsenceCreateInput!, ignoreAbsenceId: ID): Absence
  dailyReport(orgId: ID!, date: Date!, locationIds: [ID], positionTypeIds: [ID]): DailyReport
  dailyReportV2(orgId: ID!, date: Date!, locationIds: [ID], positionTypeIds: [ID]): DailyReportV2
  subSignInReport(orgId: ID!, date: Date!, locationIds: [ID]): [VacancyDetail]
  byConfirmationId(orgIds: [ID], confirmationId: String!): [ConfirmationNumberQueryResultTypeDef]
  activityLog(id: ID!): ActivityLog
}

type AbsenceReason implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  absenceReasonTrackingTypeId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
  isRestricted: Boolean!
  appliesToAssignmentTypes: AssignmentType
  limitPerDay: Int
  absenceReasonCategoryId: ID
  category: AbsenceReasonCategory
  prioritySequence: Int
  requireNotesToAdmin: Boolean
}

type AbsenceReasonBalance implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  rowVersion: String
  employeeId: ID!
  schoolYearId: ID!
  schoolYear: SchoolYear
  absenceReasonId: ID!
  absenceReason: AbsenceReason
  balanceAsOf: Date!
  initialBalance: Decimal!
  usedBalance: Decimal!
  unusedBalance: Decimal!
  plannedBalance: Decimal
}

input AbsenceReasonBalanceCreateInput {
  orgId: ID
  employeeId: ID
  schoolYearId: ID
  absenceReasonId: ID
  initialBalance: Decimal
  balanceAsOf: Date
  ignoreWarnings: Boolean
}

type AbsenceReasonBalanceMutations {
  create(absenceReasonBalance: AbsenceReasonBalanceCreateInput!): AbsenceReasonBalance
  update(absenceReasonBalance: AbsenceReasonBalanceUpdateInput!): AbsenceReasonBalance
  delete(absenceReasonBalanceId: ID!): Boolean
}

type AbsenceReasonBalanceQueries {
  byEmployeeId(employeeId: ID!, schoolYearId: ID): [AbsenceReasonBalance]
}

input AbsenceReasonBalanceUpdateInput {
  id: ID!
  rowVersion: String!
  schoolYearId: ID
  absenceReasonId: ID
  initialBalance: Decimal
  balanceAsOf: Date
  ignoreWarnings: Boolean
}

type AbsenceReasonCategory implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  absenceReasonTrackingTypeId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
}

input AbsenceReasonCategoryCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
  absenceReasonTrackingId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
}

input AbsenceReasonCategoryUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  absenceReasonTrackingId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
}

input AbsenceReasonCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
  appliesToAssignmentTypes: AssignmentType
  absenceReasonTrackingId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
  isRestricted: Boolean!
  limitPerDay: Int
  absenceReasonCategoryId: Int
  prioritySequence: Int
  requireNotesToAdmin: Boolean
}

enum AbsenceReasonTrackingTypeId {
  INVALID
  HOURLY
  DAILY
}

input AbsenceReasonUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  appliesToAssignmentTypes: AssignmentType
  absenceReasonTrackingId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
  isRestricted: Boolean!
  limitPerDay: Int
  absenceReasonCategoryId: ID
  prioritySequence: Int
  requireNotesToAdmin: Boolean
}

type AbsenceReasonUsage implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  absenceId: ID!
  absenceDetailId: ID!
  sequence: Byte!
  amount: Decimal!
  absenceReasonTrackingTypeId: AbsenceReasonTrackingTypeId
  absenceReasonId: ID!
  absenceReason: AbsenceReason
}

type AbsenceReasonUsageDr {
  _info: [ReturnMessage]
  id: ID!
  absenceDetailId: ID!
  absenceReasonId: ID!
  absenceReason: String!
  absenceReasonAmount: Decimal!
}

input AbsenceReasonUsageInput {
  id: ID
  absenceReasonId: ID
  amount: Decimal
}

enum AbsenceStatus {
  INVALID
  SAVED
  NEEDS_APPROVAL
  REJECTED
  APPROVED
  CANCELLED
}

input AbsenceUpdateInput {
  id: ID!
  rowVersion: String!
  notesToApprover: String
  adminOnlyNotes: String
  details: [AbsenceDetailCreateInput]
  vacancies: [AbsenceVacancyInput]
  ignoreWarnings: Boolean
}

input AbsenceVacancyInput {
  positionId: ID
  needsReplacement: Boolean
  useSuppliedDetails: Boolean
  notesToReplacement: String
  externalId: String
  requestedReplacementEmployeeIds: [ID]
  prearrangedReplacementEmployeeId: ID
  details: [VacancyDetailInput]
  dayPortionOverrides: [DayPortionOverride]
  accountingCodeAllocations: [VacancyDetailAccountingCodeInput]
  payCodeId: ID
}

input AccessControInput {
  locations: [LocatorInput]
  locationGroups: [LocatorInput]
  positionTypes: [LocatorInput]
  allLocationIdsInScope: Boolean
  allPositionTypeIdsInScope: Boolean
}

type AccessControl {
  _info: [ReturnMessage]
  locationIds: [ID]
  locations: [Location]
  locationGroupIds: [ID]
  locationGroups: [LocationGroup]
  positionTypeIds: [ID]
  positionTypes: [PositionType]
  derivedAdminLocations: [Location]
  derivedAdminPositionTypes: [PositionType]
  allLocationIdsInScope: Boolean!
  allPositionTypeIdsInScope: Boolean!
}

type AccountingCode implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  locationId: ID
  location: Location
}

input AccountingCodeCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
  locationId: ID
}

input AccountingCodeUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  locationId: ID
}

type ActivityLog {
  _info: [ReturnMessage]
  orgId: ID
  objectKey: ID!
  objectTypeId: ObjectType
  firstActivityUtc: DateTime
  lastActivityUtc: DateTime
  count: Int!
  activityLogDetails: [ActivityLogDetailTypeDef]
}

type ActivityLogDetailTypeDef {
  _info: [ReturnMessage]
  objectKey: ID!
  objectTypeId: ObjectType
  eventLogId: ID!
  eventTypeId: EventType
  createdUtc: DateTime!
  actingUserId: ID!
  actualUserId: ID!
  actingUser: String!
  actualUser: String!
  actingOrgUserId: ID
  actualOrgUserId: ID
  transactionId: String!
  title: String
  subTitle: String
  moreDetail: Boolean!
}

type Address {
  _info: [ReturnMessage]
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  lat: Float
  long: Float
  isMappable: Boolean
}

input AddressInput {
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  lat: Float
  long: Float
  isMappable: Boolean
}

enum AddressType {
  INVALID
  HOME_ADDRESS
  WORK_ADDRESS
}

type Administrator implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  active: Boolean!
  email: String!
  phoneNumber: String
  formattedPhone: String
  firstName: String!
  middleName: String
  lastName: String!
  isSuperUser: Boolean!
  permissionSet: PermissionSet
  permissions: [PermissionEnum]
  accessControl: AccessControl
}

input AdministratorInput {
  id: ID
  orgId: ID
  email: String
  active: Boolean
  externalId: String
  permissionSet: LocatorInput
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  postalCode: String
  state: StateCode
  country: CountryCode
  phoneNumber: String
  inviteImmediately: Boolean
  isSuperUser: Boolean
  accessControl: AccessControInput
  relatedOrgIds: [ID]
}

input AdminScopeLocationRulesInput {
  locationIds: [ID]
  locationGroupIds: [ID]
}

input AdminScopePositionTypeRulesInput {
  positionTypeIds: [ID]
}

type Application {
  _info: [ReturnMessage]
  id: Int!
  name: String
  description: String
  url: String
  contactEmail: String
  contactPhone: String
}

type ApplicationGrant implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  application: Application
  active: Boolean!
  apiKey: String!
}

input ApplicationGrantCreateInput {
  orgId: Int!
  applicationId: Int!
  active: Boolean!
}

type ApplicationGrantMutations {
  create(applicationGrant: ApplicationGrantCreateInput!): ApplicationGrant
  update(applicationGrant: ApplicationGrantUpdateInput!): ApplicationGrant
  delete(applicationGrantId: Int!): Boolean
}

type ApplicationGrantQueries {
  byId(id: ID!): ApplicationGrant
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ApplicationGrant]
}

input ApplicationGrantUpdateInput {
  orgId: Int!
  applicationId: Int!
  active: Boolean!
}

type Assignment implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  assignmentTypeId: AssignmentType!
  employeeId: ID!
  positionId: ID!
  position: Position
  contractId: ID!
  contract: Contract
  vacancyId: ID
  cancellationReasonId: ID
  startTimeLocal: DateTime!
  endTimeLocal: DateTime
  startTimeUtc: DateTime!
  endTimeUtc: DateTime
  cancelledAtUtc: DateTime
  employee: BasicEmployee
}

type AssignmentDr {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime
  createdLocal: DateTime
  changedUtc: DateTime
  changedLocal: DateTime
  rowVersion: String!
  substitute: EmployeeDr!
}

type AssignmentMutations {
  cancelAssignment(cancelRequest: CancelVacancyAssignmentInput!): Assignment
}

type AssignmentQueries {
  byId(id: ID!): Assignment
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [Assignment]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedAssignment
}

enum AssignmentType {
  NONE
  CONTRACT_ASSIGNMENT
  LONG_TERM_ASSIGNMENT
  DAILY_ASSIGNMENT
}

type BasicEmployee implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  firstName: String!
  middleName: String
  lastName: String!
  phoneNumber: String
  formattedPhone: String
  email: String
}

type BasicOrganization implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  name: String!
}

type BasicVacancy implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  positionId: ID!
  contractId: ID!
  absenceId: ID
  notesToReplacement: String
  position: Position
  absence: Absence
  payInfoSummary: PayInfoSummary
}

type Branding implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  name: String
  description: String
  majorLogoUrl: String
  minorLogoUrl: String
  navigationColor: String
  navigationHoverColor: String
  navigationActiveColor: String
  frontendPrimaryColor: String
  frontendPrimaryLightColor: String
  frontendPrimaryDarkerColor: String
  frontendSecondaryColor: String
  frontendSecondaryLightColor: String
  frontendSecondaryDarkerColor: String
  supportEmailAddress: String
  supportPhoneNumber: String
  domainName: String
  productName: String
  poweredByUrl: String
  emailIconUrl: String
}

type BrandingCsPage implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  name: String
  description: String
  majorLogoUrl: String
  minorLogoUrl: String
  navigationColor: String
  navigationHoverColor: String
  navigationActiveColor: String
  frontendPrimaryColor: String
  frontendPrimaryLightColor: String
  frontendPrimaryDarkerColor: String
  frontendSecondaryColor: String
  frontendSecondaryLightColor: String
  frontendSecondaryDarkerColor: String
  supportEmailAddress: String
  supportPhoneNumber: String
  domainName: String
  productName: String
  certificateExpirationDate: Date
  poweredByUrl: String
  emailIconUrl: String
}

input BrandingInput {
  id: ID
  name: String
  description: String
  majorLogoUrl: String
  minorLogoUrl: String
  navigationColor: String
  navigationHoverColor: String
  navigationActiveColor: String
  frontendPrimaryColor: String
  frontendPrimaryLightColor: String
  frontendPrimaryDarkerColor: String
  frontendSecondaryColor: String
  frontendSecondaryLightColor: String
  frontendSecondaryDarkerColor: String
  supportEmailAddress: String
  supportPhoneNumber: String
  domainName: String
  productName: String
  certificateExpirationDate: Date
  poweredByUrl: String
  emailIconUrl: String
}

type BrandingMutations {
  save(branding: BrandingInput!): Branding
  delete(brandingId: ID!): Boolean
}

type BrandingQueries {
  defaultBranding: Branding
  byId(id: ID!): BrandingCsPage
  all: [BrandingCsPage]
}

scalar Byte

type CalendarChange implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  startDate: Date!
  endDate: Date!
  description: String
  calendarChangeReasonId: ID!
  calendarChangeReason: CalendarChangeReason
  countTowardContractDays: Boolean!
  changedContracts: [Contract]
  schoolYearId: ID!
  schoolYear: SchoolYear
  affectsAllContracts: Boolean!
}

input CalendarChangeCreateInput {
  orgId: ID
  description: String
  startDate: Date
  endDate: Date
  calendarChangeReasonId: ID
  contractIds: [ID]
  countTowardContractDays: Boolean
  affectsAllContracts: Boolean!
}

type CalendarChangeMutations {
  create(calendarChange: CalendarChangeCreateInput!): CalendarChange
  update(calendarChange: CalendarChangeUpdateInput!): CalendarChange
  delete(calendarChangeId: ID!): Boolean
}

type CalendarChangeQueries {
  byId(id: ID!): CalendarChange
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput], contractId: ID, schoolYearId: ID): [CalendarChange]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], contractId: ID, schoolYearId: ID): PagedCalendarChange
}

type CalendarChangeReason implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  calendarDayTypeId: CalendarDayType
  workDayScheduleVariantTypeId: ID
  workDayScheduleVariantType: WorkDayScheduleVariant
}

input CalendarChangeReasonCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
  calendarDayTypeId: CalendarDayType
  workDayScheduleVariantTypeId: ID
}

input CalendarChangeReasonUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  calendarDayTypeId: CalendarDayType
  workDayScheduleVariantTypeId: ID
}

input CalendarChangeUpdateInput {
  id: ID!
  rowVersion: String!
  description: String
  startDate: Date
  endDate: Date
  calendarChangeReasonId: [ID]
  contractIds: [ID]
  countTowardContractDays: Boolean
  affectsAllContracts: Boolean!
}

enum CalendarDayType {
  INVALID
  INSTRUCTIONAL_DAY
  NON_WORK_DAY
  TEACHER_WORK_DAY
  CANCELLED_DAY
}

input CancelVacancyAssignmentInput {
  assignmentId: ID!
  rowVersion: String!
  cancellationReasonId: ID
  vacancyDetailIds: [ID!]
}

type ChangeLogQueries {
  byId(id: ID!): ChangeLogTypeDef
  byObjectId(id: ID!, objectType: ObjectType!): [ChangeLogTypeDef]
  byEventLogId(id: ID!): [ChangeLogTypeDef]
}

type ChangeLogTypeDef {
  _info: [ReturnMessage]
  messages: String!
  changes: String!
}

type ConfirmationNumberQueryResultTypeDef {
  _info: [ReturnMessage]
  absenceId: ID!
  ownerId: ID!
  objectTypeId: ObjectType!
  objectTypeName: String!
  orgId: ID!
  createdUtc: DateTime
  employeeId: ID
  employeeFirstName: String
  employeeMiddleName: String
  employeeLastName: String!
  absenceStartTimeLocal: DateTime
  absenceEndTimeLocal: DateTime
  absenceStartTimeUtc: DateTime
  absenceEndTimeUtc: DateTime
  absNumDays: Short
  assignmentId: ID
  assignmentCreatedUtc: DateTime
  subId: ID
  subFirstName: String
  subMiddleName: String
  subLastName: String
  isNormalVacancy: Boolean!
}

type Contract implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  numberOfDays: Int
  workDayPatternId: ID!
  validUntil: DateTime
  expired: Boolean!
}

input ContractCreateInput {
  orgId: ID
  name: String!
  externalId: String
  numberOfDays: Int
  workDayPatternId: ID
}

type ContractDate implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  contractScheduleId: ID!
  contractId: ID!
  contract: Contract
  workDayPatternId: ID!
  workDayPattern: WorkDayPattern
  schoolYearId: ID!
  schoolYear: SchoolYear
  date: Date!
  calendarDayTypeId: CalendarDayType!
  daysFromStart: Int
  daysToEnd: Int
  workDayId: ID
  workDay: WorkDay
  workDayScheduleVariantTypeId: ID
  workDayScheduleVariantType: WorkDayScheduleVariantType
  calendarChangeId: ID
  calendarChange: CalendarChange
}

input ContractedAssignmentCreateInput {
  orgId: ID
  employeeId: ID
  positionId: ID
  startDate: DateTime
  endDate: DateTime
}

type ContractedAssignmentMutations {
  create(assignment: ContractedAssignmentCreateInput!): Assignment
  update(assignment: ContractedAssignmentUpdateInput!): Assignment
  delete(assignmentId: ID!): Boolean
}

input ContractedAssignmentUpdateInput {
  id: ID!
  rowVersion: String!
  startDate: DateTime
  endDate: DateTime
}

type ContractMutations {
  create(contract: ContractCreateInput!): Contract
  update(contract: ContractUpdateInput!): Contract
  delete(contractId: ID!): Boolean
}

type ContractQueries {
  byId(id: ID!): Contract
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [Contract]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedContract
  contractsWithoutSchedules(schoolYearId: ID!, orgId: ID!): [Contract]
}

type ContractSchedule implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  contractId: ID!
  contract: Contract
  schoolYearId: ID!
  schoolYear: SchoolYear
  startDate: Date!
  daysToWork: [DayOfWeek]
  firstWorkDayId: ID!
  firstWorkDay: WorkDay
  projectedEndDate: Date!
  contractDates: [ContractDate]
}

input ContractScheduleCreateInput {
  orgId: ID
  startDate: Date
  firstWorkDayId: ID
  daysToWork: [DayOfWeek]
  contractId: ID
  schoolYearId: ID
}

type ContractScheduleMutations {
  create(contractSchedule: ContractScheduleCreateInput!): ContractSchedule
  update(contractSchedule: ContractScheduleUpdateInput!): ContractSchedule
  delete(contractScheduleId: ID!): Boolean
  seedContractSchedule(contractScheduleId: ID!): ContractSchedule
}

type ContractScheduleQueries {
  byId(id: ID!): ContractSchedule
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ContractSchedule]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedContractSchedule
  contractScheduleDates(contractId: ID!, fromDate: Date!, toDate: Date!): [ContractDate!]!
}

input ContractScheduleUpdateInput {
  id: ID!
  rowVersion: String!
  startDate: Date
  firstWorkDayId: ID
  daysToWork: [DayOfWeek]
}

input ContractUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  externalId: String
  numberOfDays: Int
  workDayPatternId: ID
  expired: Boolean
}

enum CountryCode {
  INVALID
  US
  CA
}

input CreateVacancyAssignmentInput {
  orgId: ID
  vacancyId: ID
  employeeId: ID
  isLongTerm: Boolean
  appliesToAllVacancyDetails: Boolean
  vacancyDetailIds: [ID]
  ignoreWarnings: Boolean
}

enum Culture {
  INVALID
  US_ENGLISH
}

enum Currency {
  INVALID
  USD
  CAD
}

type CustomField implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  stringId: String!
  description: String
  customFieldTypeId: CustomFieldType
  maxResponses: Int!
  customFieldVisibilityId: CustomFieldVisibility
  customFieldRequirementLevelId: CustomFieldRequirementLevel
  format: String
  searchable: Boolean
  listItems: [String]
  label: String!
  displayOrder: Int!
  customFieldSetType: String!
  validUntil: Date
  expired: Boolean
}

input CustomFieldCreateInput {
  orgId: ID
  customFieldSetTypeId: CustomFieldSetType
  label: String!
  description: String
  displayOrder: Int!
  customFieldTypeId: CustomFieldType
  maxResponses: Int!
  customFieldVisibilityId: CustomFieldVisibility
  customFieldRequirementLevelId: CustomFieldRequirementLevel
  format: String
  listItems: [String]
}

type CustomFieldMutations {
  create(customField: CustomFieldCreateInput!): CustomField
  update(customField: CustomFieldUpdateInput!): CustomField
  delete(customFieldId: ID!): Boolean
}

type CustomFieldQueries {
  byId(id: ID!): CustomField
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [CustomField]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedCustomField
}

enum CustomFieldRequirementLevel {
  INVALID
  ERROR
  WARN
  NONE
}

enum CustomFieldSetType {
  INVALID
  JUST_FOR_TESTING
}

enum CustomFieldType {
  INVALID
  TEXT
  DROP_DOWN
  COMBO
}

input CustomFieldUpdateInput {
  id: ID!
  rowVersion: String!
  label: String
  description: String
  displayOrder: Int
  customFieldTypeId: CustomFieldType
  maxResponses: Int
  customFieldVisibilityId: CustomFieldVisibility
  customFieldRequirementLevelId: CustomFieldRequirementLevel
  format: String
  listItems: [String]
}

enum CustomFieldVisibility {
  INVALID
  SHOW
  SELECT
  HIDE
}

type DailyReport {
  _info: [ReturnMessage]
  unfilledAbsences: [Absence]!
  unfilledVacancies: [Vacancy]!
  filledAbsences: [Absence]!
  filledVacancies: [Vacancy]!
  noSubRequiredAbsences: [Absence]!
  totalCount: Int!
  loadTime: Float!
  parseTime: Float!
}

type DailyReportV2 {
  _info: [ReturnMessage]
  unfilledAbsences: [AbsenceDr]
  filledAbsences: [AbsenceDr]
  noSubRequiredAbsences: [AbsenceDr]
  unfilledVacancies: [VacancyDr]!
  filledVacancies: [VacancyDr]!
  totalCount: Int!
  loadTime: Float!
  parseTime: Float!
}

type DataImport implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  totalRowCount: Int!
  columnNames: [String]
  dataImportStatusId: DataImportStatus!
  rows: [DataImportRow]
  numAttempts: Int!
  lastAttemptUtc: DateTime!
  nextAttemptUtc: DateTime!
  callStack: String!
  messages: [String]
  fileUploadId: ID
  fileUpload: FileUpload
  dataImportTypeId: DataImportType!
  parseOnly: Boolean!
  validateOnly: Boolean!
  ignoreWarnings: Boolean!
  maxParseErrors: Int!
  maxValidationErrors: Int!
  maxImportErrors: Int!
  earliestStartUtc: DateTime!
  notificationEmailAddresses: [String]
}

type DataImportMutations {
  update(dataImport: DataImportUpdateInput!): DataImport
}

type DataImportQueries {
  byId(id: ID!): DataImport
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput], status: DataImportStatus, type: DataImportType, fromDate: Date, toDate: Date): [DataImport]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], status: DataImportStatus, type: DataImportType, fromDate: Date, toDate: Date): PagedDataImport
  pagedDataImportRows(dataImportId: ID!, orgId: ID!, rowStatusId: DataImportRowStatus, limit: Int, offset: Int): PagedDataImportRow
}

type DataImportRow implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  dataImportId: ID!
  rowNumber: Int!
  columnValues: [String]
  rowStatusId: DataImportRowStatus!
  numAttempts: Int!
  lastAttemptUtc: DateTime!
  callStack: String!
  messages: [String]
}

enum DataImportRowStatus {
  INVALID
  CREATED
  NOTHING_TO_IMPORT
  MISSING_REQUIRED_COLUMNS
  PARSE_ERROR
  PARSED
  VALIDATION_FAILURE
  VALIDATED
  IMPORT_FAILURE
  IMPORTED
}

enum DataImportStatus {
  INVALID
  CREATED
  FILE_UPLOAD_FAILURE
  UNSUPPORTED_DATA_LOAD_TYPE
  MISSING_COLUMN_DEFINITIONS
  MISSING_COLUMN_NAMES
  PARSING
  PARSE_FAILURE
  READY_TO_IMPORT
  VALIDATING
  PARTIALLY_VALIDATED
  VALIDATION_FAILURE
  VALIDATED
  IMPORTING
  PARTIALLY_IMPORTED
  IMPORT_FAILURE
  IMPORTED
  PERMANENT_FAILURE
  QUEUED_FOR_PROCESSING
}

enum DataImportType {
  INVALID
  ABSENCE
  ABSENCE_REASON
  ACCOUNTING_CODE
  ADMINISTRATOR
  CALENDAR_CHANGE
  CALENDAR_CHANGE_REASON
  CONTRACT
  EMPLOYEE
  ENDORSEMENT
  LOCATION
  LOCATION_GROUP
  PAY_CODE
  POSITION_TYPE
  REPLACEMENT_CRITERIA_CONFIG
  REPLACEMENT_POOL_CONFIG
  SUBSTITUTE
  VACANCY
  ABSENCE_REASON_BALANCE
  ABSENCE_REASON_CATEGORY
  WORK_DAY_SCHEDULE
}

input DataImportUpdateInput {
  id: ID!
  parseOnly: Boolean
  validateOnly: Boolean
  maxValidationErrors: Int
  maxParseErrors: Int
  maxImportErrors: Int
  notificationEmailAddresses: [String]
  reRun: Boolean
}

scalar Date

enum DateRangeType {
  DAY_OF_WEEK
  WEEK
  MONTH
  YEAR
}

scalar DateTime

scalar DateTimeOffset

type DayConversion {
  _info: [ReturnMessage]
  name: String!
  maxMinutes: Int!
  dayEquivalent: Decimal!
}

input DayConversionInput {
  name: String!
  maxMinutes: Int!
  dayEquivalent: Decimal!
}

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum DayPart {
  INVALID
  FULL_DAY
  HALF_DAY_MORNING
  HALF_DAY_AFTERNOON
  QUARTER_DAY_EARLY_MORNING
  QUARTER_DAY_LATE_MORNING
  QUARTER_DAY_EARLY_AFTERNOON
  QUARTER_DAY_LATE_AFTERNOON
  HOURLY
}

input DayPortionOverride {
  date: DateTime
  dayPortion: Decimal!
}

scalar Decimal

enum DefaultNotificationStatus {
  ALWAYS_ON
  ON
  OFF
}

input DeleteUserDeviceInput {
  userId: ID
  deviceId: String!
}

enum DensityUnit {
  INVALID
  POUNDS_PER_CUBIC_FOOT
  KILOGRAMS_PER_CUBIC_METER
}

enum DimensionUnit {
  INVALID
  INCHES
  CENTIMETERS
  FEET
  METERS
}

enum DistanceUnit {
  INVALID
  MILES
  KILOMETERS
}

interface DomainObjectInterface {
  externalId: String
  rowVersion: String!
}

type Employee implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  active: Boolean!
  email: String!
  phoneNumber: String
  formattedPhone: String
  firstName: String!
  middleName: String
  lastName: String!
  rowVersion: String
  isShadowEmployee: Boolean!
  shadowEmployeeId: ID
  shadowEmployee: Employee
  primaryPositionId: ID
  primaryPosition: Position
  permissionSet: PermissionSet
  permissions: [PermissionEnum]
  assignments: [Assignment]
  absenceReasonBalances: [AbsenceReasonBalance]
  employmentHistories: [EmploymentHistory]
  endorsements: [EmployeeEndorsement]
  locations: [Location]
  substitutePreferences: SubstitutePreferences!
}

input EmployeeCreateInput {
  orgId: ID
  orgUserId: ID
  canFillVacancies: Boolean!
  primaryPositionId: ID
  primaryPosition: PositionCreateInput
}

type EmployeeDr {
  _info: [ReturnMessage]
  id: ID!
  firstName: String!
  middleName: String
  lastName: String!
  phone: String
  formattedPhone: String
  countryId: CountryCode
}

type EmployeeEndorsement implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  employeeId: ID!
  expirationDate: Date
  endorsementId: ID!
  endorsement: Endorsement!
}

input EmployeeEndorsementInput {
  orgId: ID!
  employeeId: ID!
  endorsementId: ID!
  expirationDate: Date
}

input EmployeeInput {
  id: ID
  orgId: ID
  email: String
  active: Boolean
  externalId: String
  permissionSet: LocatorInput
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  postalCode: String
  state: StateCode
  country: CountryCode
  phoneNumber: String
  inviteImmediately: Boolean
  position: PositionInput
  substitutePreferences: SubstitutePreferencesInput
  timeOffBalances: [TimeOffBalancesInput]
  relatedOrgIds: [ID]
}

input EmployeeInterestInVacancyInput {
  vacancyId: ID
  employeeId: ID
  interestRatingId: InterestRating
  overrideNonPreferredWarning: Boolean
}

type EmployeeMutations {
  create(employee: EmployeeCreateInput!): Employee
  update(employee: EmployeeUpdateInput!): Employee
  delete(employeeId: ID!): Boolean
  addEndorsement(endorsement: EmployeeEndorsementInput!): Employee
  changeEndorsement(endorsement: EmployeeEndorsementInput!): Employee
  removeEndorsement(employeeId: ID!, endorsementId: ID!): Employee
}

type EmployeeQualifiedResult {
  _info: [ReturnMessage]
  employeeId: ID!
  userId: Int!
  firstName: String!
  middleName: String
  lastName: String!
  phoneNumber: String
  isQualified: Boolean!
  excludedAttribute: Boolean!
  missingAttribute: Boolean!
  qualifiedAtMinutesLeft: Int!
  qualifiedAtPercentLeft: Int!
  qualifiedAtLocal: DateTime
  qualifiedAtUtc: DateTime
  levelQualified: VacancyQualification!
}

type EmployeeQueries {
  byId(id: ID!): Employee
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput], contractedOn: DateTime): [Employee]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], contractedOn: DateTime): PagedEmployee
  employeePositionSchedule(id: ID!, fromDate: Date!, toDate: Date!): [PositionScheduleDate]
  employeeContractSchedule(id: ID!, fromDate: Date!, toDate: Date!): [ContractDate]
  employeeAbsenceSchedule(id: ID!, fromDate: Date!, toDate: Date!): [Absence]
  employeeVacancySchedule(id: ID!, fromDate: Date!, toDate: Date!): [Vacancy]
  employeeAssignmentSchedule(id: ID!, orgId: ID, fromDate: DateTime!, toDate: Date!, limit: Int, includeCompletedToday: Boolean): [VacancyDetail]
  employeeSpecificAssignment(id: ID!, assignmentId: ID!, orgId: ID): [VacancyDetail]
  employeeSmsLogOnDate(id: ID!, onDate: Date!, orgId: ID, limit: Int, offset: Int): PagedSmsMessageLog
  employeeSmsLogLocal(id: ID!, fromTime: DateTime!, toTime: DateTime!, orgId: ID, limit: Int, offset: Int): PagedSmsMessageLog
  employeeSmsLogUtc(id: ID!, fromTime: DateTime!, toTime: DateTime!, orgId: ID, limit: Int, offset: Int): PagedSmsMessageLog
}

input EmployeeRejectVacancyInput {
  vacancyId: ID
  employeeId: ID
  vacancyRejectionReasonId: VacancyRejectionReason
}

input EmployeeUpdateInput {
  id: ID!
  rowVersion: String!
  canFillVacancies: Boolean
  primaryPositionId: ID
}

type EmploymentHistory {
  _info: [ReturnMessage]
}

type EndEmploymentReason implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
}

input EndEmploymentReasonCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
}

input EndEmploymentReasonUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
}

type Endorsement implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  expires: Boolean!
}

input EndorsementCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
  expires: Boolean!
}

input EndorsementUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  expires: Boolean!
}

type EventLog {
  _info: [ReturnMessage]
  id: ID!
  eventFullName: String!
  eventJson: String!
  transactionId: String!
  objectKey: ID!
  objectTypeId: ObjectType
  eventTypeId: EventType
  orgId: ID
  actingUserId: ID
  actualUserId: ID
  actingOrgUserId: ID
  actualOrgUserId: ID
}

type EventQueue {
  _info: [ReturnMessage]
  id: Int!
  orgId: Int
  objectTypeId: ObjectType
  objectKey: Int!
  eventTypeId: EventType
  eventQueueStatusId: EventQueueStatus
  numAttempts: Int!
  nextAttemptUtc: DateTime
  lastAttemptUtc: DateTime
  createdUtc: DateTime
  changedUtc: DateTime
  tasks: [EventTask]
  eventLog: EventLog
}

type EventQueueMutations {
  retryEvent(eventQueueId: ID!): Boolean
  delete(eventQueueId: ID!): Boolean
}

type EventQueueQueries {
  byId(id: ID!): EventQueue
  paged(limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedEventQueue
}

enum EventQueueStatus {
  INVALID
  WAITING
  IN_PROCESS
  SUCCESS
  PARTIAL_SUCCESS
  FAILURE
  PERMANENT_FAILURE
  DESERIALIZATION_FAILURE
  MISSING_EVENT_HANDLER
}

type EventTask {
  _info: [ReturnMessage]
  id: ID!
  eventQueueId: ID!
  taskNumber: Int!
  eventTaskStatusId: EventTaskStatus
  name: String
  numAttempts: Int!
  lastAttemptUtc: DateTime
  errorMessage: String
  callStack: String
}

enum EventTaskStatus {
  WAITING
  IN_PROCESS
  SUCCESS
  FAILURE
}

enum EventType {
  INVALID
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_ACCESS_REVOKED
  USER_ACCESS_RESTORED
  USER_LOGGED_IN
  USER_LOGGED_OUT
  USER_PASSWORD_LIMIT_EXCEEDED
  USER_PASSWORD_CHANGED
  USER_PASSWORD_RESET_REQUESTED
  USER_LOGIN_EMAIL_CHANGED
  USER_RECOVERY_EMAIL_CHANGED
  USER_CONTACT_INFO_CHANGED
  USER_ACCEPTED_EULA
  USER_TIME_ZONE_UPDATED
  INVITES_FOR_USERS_SCHEDULED
  USER_INVITED
  USER_STOP_SMS_RECEIVED
  USER_START_SMS_RECEIVED
  USER_PAUSE_SMS_RECEIVED
  USER_RESUME_SMS_RECEIVED
  USER_INVALID_SMS_NUMBER_RECEIVED
  USER_AVAILABLE_TIME_SAVED
  USER_UNAVAILABLE_TIME_SAVED
  USER_UNAVAILABLE_TIME_DELETED
  USER_NOTIFICATION_FAILED
  USER_DEVICE_CREATED
  USER_DEVICE_UPDATED
  USER_DEVICE_DELETED
  ORGANIZATION_CREATED
  ORGANIZATION_UPDATED
  ORGANIZATION_DELETED
  ORGANIZATION_TIME_ZONE_CHANGED
  ORGANIZATION_DATA_SEEDED
  APPLICATION_GRANT_CREATED
  APPLICATION_GRANT_UPDATED
  APPLICATION_GRANT_DELETED
  LOCATION_CREATED
  LOCATION_UPDATED
  LOCATION_DELETED
  LOCATION_GEO_CODED
  LOCATION_ADDRESS_CHANGED
  LOCATION_TIME_ZONE_CHANGED
  LOCATION_VALID_UNTIL_CHANGED
  LOCATION_CHANGED_GROUP_MEMBERSHIP
  ORGANIZATION_USER_CREATED
  ORGANIZATION_USER_UPDATED
  ORGANIZATION_USER_DELETED
  ORGANIZATION_USER_ACTIVATED
  ORGANIZATION_USER_INACTIVATED
  ORGANIZATION_USER_ADMIN_SCOPE_POSITION_TYPE_RULES_UPDATED
  ORGANIZATION_USER_ADMIN_SCOPE_LOCATION_RULES_UPDATED
  ORGANIZATION_USER_RELATIONSHIP_ADDED
  ORGANIZATION_USER_RELATIONSHIP_REMOVED
  ACCESS_GRANTED
  ACCESS_UPDATED
  ORGANIZATION_USER_RELATIONSHIP_UPDATED
  ORGANIZATION_USER_ROLE_REMOVED
  SCHOOL_YEAR_CREATED
  SCHOOL_YEAR_UPDATED
  SCHOOL_YEAR_DELETED
  WORK_DAY_PATTERN_CREATED
  WORK_DAY_PATTERN_UPDATED
  WORK_DAY_PATTERN_DELETED
  ABSENCE_REASON_CREATED
  ABSENCE_REASON_UPDATED
  ABSENCE_REASON_DELETED
  WORK_DAY_SCHEDULE_VARIANT_TYPE_CREATED
  WORK_DAY_SCHEDULE_VARIANT_TYPE_UPDATED
  WORK_DAY_SCHEDULE_VARIANT_TYPE_DELETED
  END_EMPLOYMENT_REASON_CREATED
  END_EMPLOYMENT_REASON_UPDATED
  END_EMPLOYMENT_REASON_DELETED
  CALENDAR_CHANGE_REASON_CREATED
  CALENDAR_CHANGE_REASON_UPDATED
  CALENDAR_CHANGE_REASON_DELETED
  ENDORSEMENT_CREATED
  ENDORSEMENT_UPDATED
  ENDORSEMENT_DELETED
  CONTRACT_CREATED
  CONTRACT_UPDATED
  CONTRACT_DELETED
  CONTRACT_SCHEDULE_CREATED
  CONTRACT_SCHEDULE_UPDATED
  CONTRACT_SCHEDULE_DELETED
  CONTRACT_SCHEDULE_SEEDED
  RESEED_CONTRACT_SCHEDULE
  POSITION_TYPE_CREATED
  POSITION_TYPE_UPDATED
  POSITION_TYPE_DELETED
  POSITION_CREATED
  POSITION_UPDATED
  POSITION_DELETED
  POSITION_SCHEDULE_CREATED
  POSITION_SCHEDULE_UPDATED
  POSITION_SCHEDULE_DELETED
  POSITION_SCHEDULE_VARIANT_CREATED
  POSITION_SCHEDULE_VARIANT_UPDATED
  POSITION_SCHEDULE_VARIANT_DELETED
  POSITION_CHANGED_OBJECT_SCOPE
  POSITION_CHANGED_POSITION_TYPE
  CALENDAR_CHANGE_CREATED
  CALENDAR_CHANGE_UPDATED
  CALENDAR_CHANGE_DELETED
  WORK_DAY_SCHEDULE_CREATED
  WORK_DAY_SCHEDULE_UPDATED
  WORK_DAY_SCHEDULE_DELETED
  WORK_DAY_SCHEDULE_VARIANT_CREATED
  WORK_DAY_SCHEDULE_VARIANT_UPDATED
  WORK_DAY_SCHEDULE_VARIANT_DELETED
  LABEL_CREATED
  LABEL_UPDATED
  LABEL_DELETED
  PAY_CODE_CREATED
  PAY_CODE_UPDATED
  PAY_CODE_DELETED
  ACCOUNTING_CODE_CREATED
  ACCOUNTING_CODE_UPDATED
  ACCOUNTING_CODE_DELETED
  ABSENCE_REASON_BALANCE_CREATED
  ABSENCE_REASON_BALANCE_UPDATED
  ABSENCE_REASON_BALANCE_DELETED
  ABSENCE_REASON_BALANCE_DEDUCTED
  REPLACEMENT_POOL_CONFIG_CREATED
  REPLACEMENT_POOL_CONFIG_UPDATED
  REPLACEMENT_POOL_CONFIG_DELETED
  REPLACEMENT_POOL_CREATED
  REPLACEMENT_POOL_UPDATED
  REPLACEMENT_POOL_DELETED
  EMPLOYEES_ADDED_TO_REPLACEMENT_POOL
  EMPLOYEES_REMOVED_FROM_REPLACEMENT_POOL
  REPLACEMENT_POOL_MEMBER_ADDED
  REPLACEMENT_POOL_MEMBER_REMOVED
  REPLACEMENT_CRITERIA_CONFIG_CREATED
  REPLACEMENT_CRITERIA_CONFIG_UPDATED
  REPLACEMENT_CRITERIA_CONFIG_DELETED
  REPLACEMENT_CRITERIA_CREATED
  REPLACEMENT_CRITERIA_UPDATED
  REPLACEMENT_CRITERIA_DELETED
  REPLACEMENT_CRITERION_ADDED
  REPLACEMENT_CRITERION_REMOVED
  EMPLOYEE_CREATED
  EMPLOYEE_UPDATED
  EMPLOYEE_DELETED
  EMPLOYEE_CHANGED_OBJECT_SCOPE
  EMPLOYEE_ENDORSEMENT_ADDED
  EMPLOYEE_ENDORSEMENT_CHANGED
  EMPLOYEE_ENDORSEMENT_REMOVED
  CONTRACTED_ASSIGNMENT_CREATED
  CONTRACTED_ASSIGNMENT_UPDATED
  CONTRACTED_ASSIGNMENT_ENDED
  VACANCY_ASSIGNMENT_CREATED
  VACANCY_ASSIGNMENT_UPDATED
  VACANCY_ASSIGNMENT_CANCELLED
  VACANCY_ASSIGNMENT_DELETED
  ABSENCE_CREATED
  ABSENCE_UPDATED
  ABSENCE_DELETED
  ABSENCE_DETAIL_ADDED
  ABSENCE_DETAIL_CHANGED
  ABSENCE_DETAIL_REMOVED
  ABSENCE_DISCOVERED_FOR_CALENDAR_CHANGE
  ABSENCE_DETAIL_CLOSED_BY_CALENDAR_CHANGE
  ABSENCE_DETAIL_ALTERED_BY_CALENDAR_CHANGE
  ABSENCE_DETAIL_RESTORED_BY_CALENDAR_CHANGE_DELETE
  VACANCY_CREATED
  VACANCY_UPDATED
  VACANCY_DELETED
  VACANCY_ASSIGNED
  VACANCY_UNASSIGNED
  VACANCY_DETAIL_ADDED
  VACANCY_DETAIL_CHANGED
  VACANCY_DETAIL_REMOVED
  VACANCY_EMPLOYEE_REQUEST_ADDED
  VACANCY_EMPLOYEE_REQUEST_REMOVED
  EMPLOYEE_INTERESTED_IN_VACANCY
  EMPLOYEE_REJECTED_VACANCY
  VACANCY_NOTIFICATION_SENT
  VACANCY_DETAIL_UPDATED
  VACANCY_DETAIL_VERIFIED
  VACANCY_DETAIL_UN_VERIFIED
  VACANCY_DETAIL_CLOSED_BY_CALENDAR_CHANGE
  VACANCY_DETAIL_ALTERED_BY_CALENDAR_CHANGE
  VACANCY_DETAIL_RESTORED_BY_CALENDAR_CHANGE_DELETE
  VACANCY_REQUESTED_SUB_RESERVED_EXPIRED
  VACANCY_DISCOVERED_FOR_CALENDAR_CHANGE
  FILE_UPLOAD_CREATED
  FILE_UPLOADED
  FILE_UPLOAD_DELETED
  BRANDING_CREATED
  BRANDING_UPDATED
  BRANDING_DELETED
  CUSTOM_FIELD_CREATED
  CUSTOM_FIELD_UPDATED
  CUSTOM_FIELD_DELETED
  CUSTOM_FIELD_VALID_UNTIL_UPDATED
  SAVED_VIEW_CREATED
  SAVED_VIEW_UPDATED
  SAVED_VIEW_DELETED
  DATA_IMPORT_CREATED
  DATA_IMPORT_FILE_UPLOADED
  DATA_IMPORT_STARTED
  DATA_IMPORT_FINISHED
  DATA_IMPORT_UPDATED
  LOCATION_GROUP_CREATED
  LOCATION_GROUP_UPDATED
  LOCATION_GROUP_DELETED
  PERMISSION_SET_CREATED
  PERMISSION_SET_UPDATED
  PERMISSION_SET_DELETED
  ORGANIZATION_RELATIONSHIP_CREATED
  ORGANIZATION_RELATIONSHIP_UPDATED
  ORGANIZATION_RELATIONSHIP_DELETED
  VACANCY_REASON_CREATED
  VACANCY_REASON_UPDATED
  VACANCY_REASON_DELETED
  ABSENCE_REASON_CATEGORY_CREATED
  ABSENCE_REASON_CATEGORY_UPDATED
  ABSENCE_REASON_CATEGORY_DELETED
}

enum FeatureFlag {
  NONE
  FULL_DAY_ABSENCES
  HALF_DAY_ABSENCES
  QUARTER_DAY_ABSENCES
  HOURLY_ABSENCES
  VERIFY
}

enum FilePurpose {
  INVALID
  BRANDING
  ABSENCE
  VACANCY
  IMPORT
  OTHER
}

enum FileType {
  INVALID
  PDF
  JPG
  PNG
  GIF
  TIF
  CSV
  XLS
  XLSX
}

type FileUpload implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  uploadedFileName: String!
  fileTypeId: FileType!
  numberOfPages: Int
  filePurposeId: FilePurpose!
  originalFileDownloadUrlSas: String
}

enum FillStatus {
  INVALID
  UNFILLED
  PARTLY_FILLED
  FILLED
}

type GlobalSearchTypeDef {
  _info: [ReturnMessage]
  ownerId: ID!
  objectTypeId: ObjectType!
  orgId: ID!
  createdUtc: DateTime!
  objectJson: String!
}

scalar Guid

type InAppNotification implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  title: String
  content: String
  objectTypeId: ObjectType!
  objectKey: ID!
  isLinkable: Boolean!
  forOrgUserRole: OrgUserRole
  viewed: Boolean!
  orgId: Int!
  organization: Organization!
}

type InAppNotificationMutations {
  markSingleNotificationViewed(notificationId: ID!): Boolean
  markMultipleNotificationsViewed(notificationIds: [ID]!): Boolean
}

type InAppNotificationQueries {
  byId(id: ID!): InAppNotification
  paged(limit: Int, offset: Int, orgId: ID, includeViewed: Boolean): PagedInAppNotification
  unreadNotificationCount(orgId: ID): Int
}

enum InterestRating {
  NOT_INTERESTED
  LOW_INTEREST
  HIGH_INTEREST
}

enum InvitationStatus {
  ALL
  ACCOUNT_SETUP
  INVITE_SENT
  INVITE_NOT_SENT
}

enum JobNotificationResponse {
  INVALID
  ACCEPTED
  REJECTED
  IGNORED
}

type Label implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  allowedLabelTypes: LabelType
}

input LabelCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
  allowedLabelTypes: LabelType
}

enum LabelType {
  NONE
  CONTRACT
  LOCATION
  POSITION
  EMPLOYEE
  ABSENCE_REASON
}

input LabelUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  allowedLabelTypes: LabelType
}

type Location implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  timeZoneId: TimeZone
  address: Address
  locationGroupId: ID!
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  phoneNumber: String
  formattedPhone: String
  locationGroup: LocationGroup
  substitutePreferences: SubstitutePreferences!
  workDaySchedules: [WorkDaySchedule!]!
  address1: String
  address2: String
  city: String
  stateName: String
  state: StateCode
  country: CountryCode
  postalCode: String
  countryName: String
  validUntil: DateTime
  active: Boolean
}

input LocationCreateInput {
  orgId: ID!
  name: String!
  externalId: String
  address: AddressInput
  timeZoneId: TimeZone
  locationGroupId: ID
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  phoneNumber: String
}

type LocationDr {
  _info: [ReturnMessage]
  id: ID!
  name: String!
}

type LocationGroup implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  locations: [Location]
  substitutePreferences: SubstitutePreferences!
}

input LocationGroupCreateInput {
  orgId: ID!
  name: String!
  description: String
  externalId: String
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
}

type LocationGroupMutations {
  create(locationGroup: LocationGroupCreateInput!): LocationGroup
  update(locationGroup: LocationGroupUpdateInput!): LocationGroup
  delete(locationGroupId: ID!): Boolean
}

type LocationGroupQueries {
  byId(id: ID!): LocationGroup
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [LocationGroup]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedLocationGroup
}

input LocationGroupUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  substitutePreferences: SubstitutePreferencesInput
}

type LocationMutations {
  create(location: LocationCreateInput!): Location
  update(location: LocationUpdateInput!): Location
  delete(locationId: ID!): Boolean
}

type LocationQueries {
  byId(id: ID!): Location
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput], searchText: String, locationGroups: [ID]): [Location]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput], searchText: String, locationGroups: [ID]): PagedLocation
}

input LocationUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  externalId: String
  address: AddressInput
  timeZoneId: TimeZone
  expired: Boolean
  locationGroupId: ID
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  phoneNumber: String
  substitutePreferences: SubstitutePreferencesInput
}

input LocatorInput {
  id: ID
  externalId: String
}

scalar Milliseconds

enum MobileDeviceType {
  INVALID
  IOS
  ANDROID
}

interface ModelObjectInterface {
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
}

type Mutation {
  absence: AbsenceMutations
  absenceReasonBalance: AbsenceReasonBalanceMutations
  applicationGrant: ApplicationGrantMutations
  assignment: AssignmentMutations
  branding: BrandingMutations
  calendarChange: CalendarChangeMutations
  contractedAssignment: ContractedAssignmentMutations
  contract: ContractMutations
  contractSchedule: ContractScheduleMutations
  customField: CustomFieldMutations
  dataImport: DataImportMutations
  employee: EmployeeMutations
  eventQueue: EventQueueMutations
  inAppNotification: InAppNotificationMutations
  locationGroup: LocationGroupMutations
  location: LocationMutations
  organization: OrganizationMutations
  organizationRelationship: OrganizationRelationshipMutations
  orgUser: OrgUserMutations
  permissionSet: PermissionSetMutations
  positionSchedule: PositionScheduleMutations
  positionType: PositionTypeMutations
  replacementCriteriaConfig: ReplacementCriteriaConfigMutations
  replacementCriteria: ReplacementCriteriaMutations
  replacementPoolConfig: ReplacementPoolConfigMutations
  replacementPool: ReplacementPoolMutations
  savedView: SavedViewMutations
  schoolYear: SchoolYearMutations
  user: UserMutations
  vacancy: VacancyMutations
  workDayPattern: WorkDayPatternMutations
  workDaySchedule: WorkDayScheduleMutations
  orgRef_AbsenceReasonCategory: OrgRef_AbsenceReasonCategoryMutations
  orgRef_AbsenceReason: OrgRef_AbsenceReasonMutations
  orgRef_AccountingCode: OrgRef_AccountingCodeMutations
  orgRef_CalendarChangeReason: OrgRef_CalendarChangeReasonMutations
  orgRef_EndEmploymentReason: OrgRef_EndEmploymentReasonMutations
  orgRef_Endorsement: OrgRef_EndorsementMutations
  orgRef_Label: OrgRef_LabelMutations
  orgRef_PayCode: OrgRef_PayCodeMutations
  orgRef_VacancyReason: OrgRef_VacancyReasonMutations
  orgRef_WorkDayScheduleVariantType: OrgRef_WorkDayScheduleVariantTypeMutations
}

enum NeedsReplacement {
  NO
  YES
  SOMETIMES
}

enum NotificationMessageStatus {
  WAITING_TO_SEND
  SENT_TO_PROVIDER
  SEND_FAILURE
  DELIVERED_TO_RECIPIENT
  DELIVERY_FAILURE
  NOTHING_TO_SEND
}

enum NotificationMethod {
  IN_APP
  EMAIL
  SMS
  PUSH
}

type NotificationMethodOfDelivery {
  _info: [ReturnMessage]
  method: NotificationMethod
  default: DefaultNotificationStatus
}

type NotificationPreference {
  _info: [ReturnMessage]
  notificationReasonId: NotificationReason!
  receiveInAppNotifications: Boolean!
  receiveEmailNotifications: Boolean!
  receiveSmsNotifications: Boolean!
}

input NotificationPreferenceInput {
  notificationReasonId: NotificationReason!
  receiveInAppNotifications: Boolean
  receiveEmailNotifications: Boolean
  receiveSmsNotifications: Boolean
}

enum NotificationReason {
  INVALID
  ADMIN_ABSENCE_OR_VACANCY_CREATED_BY_ANY
  ADMIN_ABSENCE_OR_VACANCY_DELETED_BY_ANY
  EMP_ABSENCE_CREATED_BY_OTHER
  EMP_ABSENCE_CREATED_BY_SELF
  EMP_ABSENCE_DELETED_BY_OTHER
  EMP_ABSENCE_DELETED_BY_SELF
  SUB_ASSIGNED_BY_OTHER
  SUB_ASSIGNED_BY_SELF
  SUB_REMOVED_BY_OTHER
  SUB_REMOVED_BY_SELF
  SUB_ASSIGNMENT_UPDATED_BY_OTHER
  EMP_SUB_ASSIGNED_BY_ANY
  EMP_SUB_REMOVED_BY_ANY
  ADMIN_SUB_ASSIGNED_BY_ANY
  ADMIN_SUB_REMOVED_BY_ANY
}

type ObjectReplacementCriteria {
  _info: [ReturnMessage]
  mustHave: [Endorsement]
  preferToHave: [Endorsement]
  preferToNotHave: [Endorsement]
  mustNotHave: [Endorsement]
}

enum ObjectType {
  INVALID
  USER
  ORGANIZATION
  CONTACT
  LOCATION
  ORG_USER
  PERMISSION_SET
  SCHOOL_YEAR
  WORK_DAY_PATTERN
  ABSENCE_REASON
  WORK_DAY_SCHEDULE_VARIANT_TYPE
  END_EMPLOYMENT_REASON
  CALENDAR_CHANGE_REASON
  ENDORSEMENT
  CONTRACT
  CONTRACT_SCHEDULE
  POSITION_TYPE
  POSITION
  CALENDAR_CHANGE
  WORK_DAY_SCHEDULE
  LOCATION_GROUP
  LABEL
  PAY_CODE
  ACCOUNTING_CODE
  ABSENCE_REASON_BALANCE
  REPLACEMENT_POOL_CONFIG
  REPLACEMENT_POOL
  REPLACEMENT_CRITERIA_CONFIG
  REPLACEMENT_CRITERIA
  EMPLOYEE
  ASSIGNMENT
  ABSENCE
  VACANCY
  FILE_UPLOAD
  BRANDING
  CUSTOM_FIELD
  RECEIVED_EMAIL
  EXTERNAL_FILE
  SAVED_VIEW
  DATA_IMPORT
  VACANCY_REASON
  ABSENCE_REASON_CATEGORY
  APPLICATION
}

type Organization implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  timeZoneId: TimeZone
  isStaffingProvider: Boolean!
  config: organizationConfig
}

type organizationConfig {
  _info: [ReturnMessage]
  id: ID!
  organizationTypeId: OrganizationType
  defaultUnitType: UnitType
  defaultDensityUnit: DensityUnit
  defaultVolumeUnit: VolumeUnit
  defaultDimensionUnit: DimensionUnit
  defaultDistanceUnit: DistanceUnit
  defaultWeightUnit: WeightUnit
  defaultCurrency: Currency
  defaultCountry: CountryCode
  defaultLocationId: Int
  orgUsersMustAcceptEula: Boolean!
  minutesBeforeStartAbsenceCanBeCreated: Int!
  brandingId: ID!
  branding: Branding
  absenceSubContact: OrganizationContact
  absenceEmployeeContact: OrganizationContact
  featureFlags: [FeatureFlag]
  longTermVacancyThresholdDays: Int!
  minLeadTimeMinutesToCancelVacancy: Int!
  minLeadTimeMinutesToCancelVacancyWithoutPunishment: Int!
  maxGapMinutesForSameVacancyDetail: Int!
  minAbsenceMinutes: Int!
  maxAbsenceDays: Int!
  absenceCreateCutoffTime: Seconds!
  requestedSubCutoffMinutes: Int!
  minRequestedEmployeeHoldMinutes: Int!
  maxRequestedEmployeeHoldMinutes: Int!
  minorConflictThresholdMinutes: Int!
  minutesRelativeToStartVacancyCanBeFilled: Int!
  defaultSubVisibilityPercent: Int!
  defaultSubVisibilityMinutesMinimum: Int!
  vacancyDayConversions: [DayConversion]
}

input organizationConfigInput {
  organizationTypeId: OrganizationType
  featureFlags: [FeatureFlag]
  defaultUnitType: UnitType
  defaultCurrency: Currency
  defaultCountry: CountryCode
  orgUsersMustAcceptEula: Boolean
  minutesBeforeStartAbsenceCanBeCreated: Int
  brandingId: ID
  longTermVacancyThresholdDays: Int
  minLeadTimeMinutesToCancelVacancy: Int
  minLeadTimeMinutesToCancelVacancyWithoutPunishment: Int
  maxGapMinutesForSameVacancyDetail: Int
  minAbsenceMinutes: Int
  maxAbsenceDays: Int
  absenceCreateCutoffTime: Int
  absenceSubContact: OrganizationContactInput
  absenceEmployeeContact: OrganizationContactInput
  requestedSubCutoffMinutes: Int
  minRequestedEmployeeHoldMinutes: Int
  maxRequestedEmployeeHoldMinutes: Int
  minorConflictThresholdMinutes: Int
  minutesRelativeToStartVacancyCanBeFilled: Int
  defaultSubVisibilityPercent: Int
  defaultSubVisibilityMinutesMinimum: Int
  vacancyDayConversions: [DayConversionInput]
}

type OrganizationContact {
  _info: [ReturnMessage]
  name: String
  email: String
  phone: String
}

input OrganizationContactInput {
  name: String
  email: String
  phone: String
}

input OrganizationCreateInput {
  name: String!
  externalId: String
  relatesToOrganizationId: ID
  superUserLoginEmail: String!
  superUserFirstName: String!
  superUserLastName: String!
  timeZoneId: TimeZone
  seedOrgDataOption: SeedOrgDataOptionEnum
  seedOptionalData: Boolean
  config: organizationConfigInput
}

type OrganizationMutations {
  create(organization: OrganizationCreateInput!): Organization
  update(organization: OrganizationUpdateInput!): Organization
}

type OrganizationQueries {
  byId(id: ID!): Organization
  all(searchText: String): [Organization]
  paged(limit: Int, offset: Int, searchText: String): PagedOrganization
  search(orgIds: [ID], searchTerm: String!): [GlobalSearchTypeDef]
  staffingProviders: [Organization]
  searchDelegatesToOrganizations(orgId: ID!, searchText: String): [Organization]
}

type OrganizationRelationship implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  relationshipType: OrganizationRelationshipType
  relatesToOrganizationId: ID
  permissionSetId: ID
  relatesToOrganization: BasicOrganization
}

input OrganizationRelationshipCreateInput {
  orgId: ID
  relatesToOrgId: ID
  relationshipType: OrganizationRelationshipType
  permissionSetId: ID
}

type OrganizationRelationshipMutations {
  create(organizationRelationship: OrganizationRelationshipCreateInput!): OrganizationRelationship
  update(organizationRelationship: OrganizationRelationshipUpdateInput!): OrganizationRelationship
  delete(organizationRelationshipId: ID!): Boolean
}

type OrganizationRelationshipQueries {
  byId(id: ID!): OrganizationRelationship
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [OrganizationRelationship]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedOrganizationRelationship
}

enum OrganizationRelationshipType {
  INVALID
  DELEGATES_TO
  SERVICES
}

input OrganizationRelationshipUpdateInput {
  orgId: ID
  relatesToOrgId: ID
  permissionSetId: ID
}

enum OrganizationType {
  INVALID
  STANDARD
  DEMO
  IMPLEMENTING
}

input OrganizationUpdateInput {
  orgId: ID
  rowVersion: String!
  name: String
  externalId: String
  timeZoneId: TimeZone
  config: organizationConfigInput
}

interface OrgObjectInterface {
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
}

type OrgRef_AbsenceReasonCategoryMutations {
  create(absenceReasonCategory: AbsenceReasonCategoryCreateInput!): AbsenceReasonCategory
  update(absenceReasonCategory: AbsenceReasonCategoryUpdateInput!): AbsenceReasonCategory
  delete(absenceReasonCategoryId: ID!): Boolean
}

type OrgRef_AbsenceReasonCategoryQueries {
  byId(id: ID!): AbsenceReasonCategory
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [AbsenceReasonCategory]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedAbsenceReasonCategory
}

type OrgRef_AbsenceReasonMutations {
  create(absenceReason: AbsenceReasonCreateInput!): AbsenceReason
  update(absenceReason: AbsenceReasonUpdateInput!): AbsenceReason
  delete(absenceReasonId: ID!): Boolean
}

type OrgRef_AbsenceReasonQueries {
  byId(id: ID!): AbsenceReason
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [AbsenceReason]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedAbsenceReason
}

type OrgRef_AccountingCodeMutations {
  create(accountingCode: AccountingCodeCreateInput!): AccountingCode
  update(accountingCode: AccountingCodeUpdateInput!): AccountingCode
  delete(accountingCodeId: ID!): Boolean
}

type OrgRef_AccountingCodeQueries {
  byId(id: ID!): AccountingCode
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput], includeExpired: Boolean, locationIds: [ID]): [AccountingCode]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput], includeExpired: Boolean, locationIds: [ID]): PagedAccountingCode
}

type OrgRef_CalendarChangeReasonMutations {
  create(calendarChangeReason: CalendarChangeReasonCreateInput!): CalendarChangeReason
  update(calendarChangeReason: CalendarChangeReasonUpdateInput!): CalendarChangeReason
  delete(calendarChangeReasonId: ID!): Boolean
}

type OrgRef_CalendarChangeReasonQueries {
  byId(id: ID!): CalendarChangeReason
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [CalendarChangeReason]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedCalendarChangeReason
}

type OrgRef_EndEmploymentReasonMutations {
  create(endEmploymentReason: EndEmploymentReasonCreateInput!): EndEmploymentReason
  update(endEmploymentReason: EndEmploymentReasonUpdateInput!): EndEmploymentReason
  delete(endEmploymentReasonId: ID!): Boolean
}

type OrgRef_EndEmploymentReasonQueries {
  byId(id: ID!): EndEmploymentReason
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [EndEmploymentReason]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedEndEmploymentReason
}

type OrgRef_EndorsementMutations {
  create(endorsement: EndorsementCreateInput!): Endorsement
  update(endorsement: EndorsementUpdateInput!): Endorsement
  delete(endorsementId: ID!): Boolean
}

type OrgRef_EndorsementQueries {
  byId(id: ID!): Endorsement
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput], searchText: String): [Endorsement]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput], searchText: String): PagedEndorsement
}

type OrgRef_LabelMutations {
  create(label: LabelCreateInput!): Label
  update(label: LabelUpdateInput!): Label
  delete(labelId: ID!): Boolean
}

type OrgRef_LabelQueries {
  byId(id: ID!): Label
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [Label]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedLabel
}

type OrgRef_PayCodeMutations {
  create(payCode: PayCodeCreateInput!): PayCode
  update(payCode: PayCodeUpdateInput!): PayCode
  delete(payCodeId: ID!): Boolean
}

type OrgRef_PayCodeQueries {
  byId(id: ID!): PayCode
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [PayCode]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedPayCode
}

type OrgRef_VacancyReasonMutations {
  create(vacancyReason: VacancyReasonCreateInput!): VacancyReason
  update(vacancyReason: VacancyReasonUpdateInput!): VacancyReason
  delete(vacancyReasonId: ID!): Boolean
}

type OrgRef_VacancyReasonQueries {
  byId(id: ID!): VacancyReason
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [VacancyReason]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedVacancyReason
}

type OrgRef_WorkDayScheduleVariantTypeMutations {
  create(workDayScheduleVariantType: WorkDayScheduleVariantTypeCreateInput!): WorkDayScheduleVariantType
  update(workDayScheduleVariantType: WorkDayScheduleVariantTypeUpdateInput!): WorkDayScheduleVariantType
  delete(workDayScheduleVariantTypeId: ID!): Boolean
}

type OrgRef_WorkDayScheduleVariantTypeQueries {
  byId(id: ID!): WorkDayScheduleVariantType
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [WorkDayScheduleVariantType]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedWorkDayScheduleVariantType
}

type OrgUser implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  active: Boolean!
  email: String
  phoneNumber: String
  formattedPhone: String
  firstName: String!
  middleName: String
  lastName: String!
  userId: ID
  loginEmail: String
  temporaryPassword: String
  isReplacementEmployee: Boolean!
  isEmployee: Boolean!
  isAdmin: Boolean!
  permissionSets: [PermissionSet]
  permissionSetIds: [ID]
  relatedOrgIds: [ID]
  relatedOrganizations: [Organization]
  isShadowRecord: Boolean!
  shadowFromOrgId: ID
  shadowFromOrgName: String
  employee: Employee
  substitute: Substitute
  administrator: Administrator
  inviteSentAtUtc: DateTime
  inviteSent: Boolean!
  isAccountSetup: Boolean!
}

input OrgUserCreateInput {
  orgId: ID
  email: String!
  active: Boolean
  externalId: String
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  postalCode: String
  stateId: StateCode
  countryId: CountryCode
  phoneNumber: String
  isSuperUser: Boolean!
  permissionSetIds: [ID]
  adminScopeLocationRules: AdminScopeLocationRulesInput
  adminScopePositionTypeRules: AdminScopePositionTypeRulesInput
  allLocationIdsInScope: Boolean
  allPositionTypeIdsInScope: Boolean
  relatedOrgIds: [ID]
  inviteImmediately: Boolean
}

type OrgUserLastLogin {
  _info: [ReturnMessage]
  id: ID!
  lastLogin: DateTime
}

type OrgUserMutations {
  create(orgUser: OrgUserCreateInput!): OrgUser
  update(orgUser: OrgUserUpdateInput!): OrgUser
  delete(orgUserId: ID!): Boolean
  addRelatedOrg(orgUserId: ID!, relatedOrgId: ID!): OrgUser
  removeRelatedOrg(orgUserId: ID!, relatedOrgId: ID!): OrgUser
  saveAdministrator(administrator: AdministratorInput!): OrgUser
  saveSubstitute(substitute: SubstituteInput!): OrgUser
  saveEmployee(employee: EmployeeInput!): OrgUser
  addSubPreference(subPreference: SubstitutePreferenceInput!): ReplacementPoolMember
  removeSubPreference(subPreference: SubstitutePreferenceInput!): Boolean
  removeOrgUserRole(orgUserId: ID!, orgUserRole: OrgUserRole!): OrgUser
}

type OrgUserQueries {
  byId(id: ID!): OrgUser
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput], name: String, role: [OrgUserRole], active: Boolean, endorsements: [ID], locations: [ID], positionTypes: [ID], shadowOrgIds: [ID], invitationStatus: InvitationStatus): [OrgUser]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], name: String, role: [OrgUserRole], active: Boolean, endorsements: [ID], locations: [ID], positionTypes: [ID], shadowOrgIds: [ID], invitationStatus: InvitationStatus): PagedOrgUser
  pagedSubsForPreferences(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], name: String): PagedOrgUser
  lastLoginById(id: ID!): OrgUserLastLogin
}

enum OrgUserRole {
  INVALID
  ADMINISTRATOR
  EMPLOYEE
  ADMIN_OR_EMPLOYEE
  REPLACEMENT_EMPLOYEE
  ADMIN_OR_REPLACEMENT
  ANY
}

input OrgUserUpdateInput {
  id: ID!
  rowVersion: String!
  email: String
  active: Boolean
  externalId: String
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  postalCode: String
  stateId: StateCode
  countryId: CountryCode
  phoneNumber: String
  isSuperUser: Boolean
  permissionSetIds: [ID]
  adminScopeLocationRules: AdminScopeLocationRulesInput
  adminScopePositionTypeRules: AdminScopePositionTypeRulesInput
  allLocationIdsInScope: Boolean
  allPositionTypeIdsInScope: Boolean
  relatedOrgIds: [ID]
}

type PagedAbsence {
  _info: [ReturnMessage]
  results: [Absence]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedAbsenceReason {
  _info: [ReturnMessage]
  results: [AbsenceReason]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedAbsenceReasonCategory {
  _info: [ReturnMessage]
  results: [AbsenceReasonCategory]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedAccountingCode {
  _info: [ReturnMessage]
  results: [AccountingCode]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedAssignment {
  _info: [ReturnMessage]
  results: [Assignment]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedCalendarChange {
  _info: [ReturnMessage]
  results: [CalendarChange]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedCalendarChangeReason {
  _info: [ReturnMessage]
  results: [CalendarChangeReason]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedContract {
  _info: [ReturnMessage]
  results: [Contract]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedContractSchedule {
  _info: [ReturnMessage]
  results: [ContractSchedule]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedCustomField {
  _info: [ReturnMessage]
  results: [CustomField]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedDataImport {
  _info: [ReturnMessage]
  results: [DataImport]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedDataImportRow {
  _info: [ReturnMessage]
  results: [DataImportRow]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEmployee {
  _info: [ReturnMessage]
  results: [Employee]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEmployeeQualifiedResult {
  _info: [ReturnMessage]
  results: [EmployeeQualifiedResult]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEndEmploymentReason {
  _info: [ReturnMessage]
  results: [EndEmploymentReason]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEndorsement {
  _info: [ReturnMessage]
  results: [Endorsement]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEventQueue {
  _info: [ReturnMessage]
  results: [EventQueue]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedInAppNotification {
  _info: [ReturnMessage]
  results: [InAppNotification]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedLabel {
  _info: [ReturnMessage]
  results: [Label]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedLocation {
  _info: [ReturnMessage]
  results: [Location]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedLocationGroup {
  _info: [ReturnMessage]
  results: [LocationGroup]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedOrganization {
  _info: [ReturnMessage]
  results: [Organization]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedOrganizationRelationship {
  _info: [ReturnMessage]
  results: [OrganizationRelationship]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedOrgUser {
  _info: [ReturnMessage]
  results: [OrgUser]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPayCode {
  _info: [ReturnMessage]
  results: [PayCode]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPermissionSet {
  _info: [ReturnMessage]
  results: [PermissionSet]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPosition {
  _info: [ReturnMessage]
  results: [Position]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPositionSchedule {
  _info: [ReturnMessage]
  results: [PositionSchedule]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPositionType {
  _info: [ReturnMessage]
  results: [PositionType]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedReplacementCriteriaConfig {
  _info: [ReturnMessage]
  results: [ReplacementCriteriaConfig]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedReplacementPool {
  _info: [ReturnMessage]
  results: [PagedReplacementPool]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedReplacementPoolConfig {
  _info: [ReturnMessage]
  results: [ReplacementPoolConfig]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedSavedView {
  _info: [ReturnMessage]
  results: [SavedView]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedSchoolYear {
  _info: [ReturnMessage]
  results: [SchoolYear]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedSmsMessageLog {
  _info: [ReturnMessage]
  results: [SmsMessageLog]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedSubJobSearch {
  _info: [ReturnMessage]
  results: [SubJobSearch]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedUser {
  _info: [ReturnMessage]
  results: [User]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedUserUnavailableTime {
  _info: [ReturnMessage]
  results: [UserUnavailableTime]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedVacancy {
  _info: [ReturnMessage]
  results: [Vacancy]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedVacancyNotificationLog {
  _info: [ReturnMessage]
  results: [VacancyNotificationLog]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedVacancyReason {
  _info: [ReturnMessage]
  results: [VacancyReason]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedVacancySubSearchQueryResult {
  _info: [ReturnMessage]
  results: [VacancySubSearchQueryResult]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedWorkDayPattern {
  _info: [ReturnMessage]
  results: [WorkDayPattern]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedWorkDaySchedule {
  _info: [ReturnMessage]
  results: [WorkDaySchedule]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedWorkDayScheduleVariantType {
  _info: [ReturnMessage]
  results: [WorkDayScheduleVariantType]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

enum ParsingStatus {
  INVALID
  NOT_PARSED
  WAITING_FOR_PARSING
  PARSING
  PARSING_COMPLETE
  PARSING_ERROR
  PARSING_FAILURE
}

type PayCode implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
}

input PayCodeCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
}

input PayCodeUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
}

type PayInfo {
  _info: [ReturnMessage]
  dayConversion: DayConversion
  label: String!
  match: Boolean!
  payTypeId: AbsenceReasonTrackingTypeId
  dayPortion: Decimal
  hours: Decimal
}

type PayInfoSummary {
  _info: [ReturnMessage]
  payTypeRollups: [PayTypeRollup]
  summaryLabel: String!
}

type PayTypeRollup {
  _info: [ReturnMessage]
  name: String!
  total: Decimal!
  label: String!
}

type PermissionCategory {
  _info: [ReturnMessage]
  categoryId: String!
  displayName: String!
  settings: [PermissionSetting!]!
}

type PermissionCategoryIdentifier {
  _info: [ReturnMessage]
  categoryId: String!
  settings: [PermissionSettingIdentifier!]!
}

input PermissionCategoryIdentifierInput {
  categoryId: String!
  settings: [PermissionSettingIdentifierInput]
}

type PermissionDefinition {
  _info: [ReturnMessage]
  id: String!
  categories: [PermissionCategory!]!
}

enum PermissionEnum {
  INVALID
  ABS_VAC_VIEW
  ABS_VAC_VIEW_ACCOUNT_CODE
  ABS_VAC_VIEW_PAY_CODE
  ABS_VAC_VIEW_NOTIFICATION_LOG
  ABS_VAC_VIEW_CLOSED_DAYS
  ABS_VAC_SAVE
  ABS_VAC_DELETE
  ABS_VAC_REMOVE_SUB
  ABS_VAC_REMOVE_SUB_DAY
  ABS_VAC_SAVE_ACCOUNT_CODE
  ABS_VAC_SAVE_PAY_CODE
  ABS_VAC_EDIT_PAST
  ABS_VAC_EDIT_ASSIGNED
  ABS_VAC_EDIT_VERIFIED
  ABS_VAC_EDIT_PAST_SAME_DAY
  ABS_VAC_REQUEST_REPLACEMENT
  ABS_VAC_ASSIGN
  ABS_VAC_ASSIGN_NO_SUB_NEEDED
  ABS_VAC_ASSIGN_UNQUALIFIED
  ABS_VAC_ASSIGN_MINOR_CONFLICT
  ABS_VAC_ASSIGN_EXCLUDED
  ABS_VAC_VERIFY
  LOCATION_VIEW
  LOCATION_GROUP_VIEW
  LOCATION_SAVE
  LOCATION_DELETE
  LOCATION_GROUP_SAVE
  LOCATION_GROUP_DELETE
  ADMIN_VIEW
  ADMIN_SAVE
  ADMIN_DELETE
  EMPLOYEE_VIEW
  EMPLOYEE_VIEW_BALANCES
  EMPLOYEE_SAVE
  EMPLOYEE_DELETE
  EMPLOYEE_SAVE_FAVORITE_SUBS
  EMPLOYEE_SAVE_BLOCKED_SUBS
  POSITION_VIEW
  POSITION_SAVE
  POSITION_DELETE
  SUBSTITUTE_VIEW
  SUBSTITUTE_VIEW_PHONE
  SUBSTITUTE_VIEW_EMAIL
  SUBSTITUTE_SAVE
  SUBSTITUTE_DELETE
  ORG_USER_DELETE
  USER_RESET_PASSWORD
  USER_CHANGE_EMAIL
  ORG_USER_INVITE
  ORG_USER_IMPERSONATE
  CALENDAR_CHANGE_VIEW
  SCHOOL_YEAR_VIEW
  CALENDAR_CHANGE_SAVE
  CALENDAR_CHANGE_DELETE
  SCHOOL_YEAR_SAVE
  SCHOOL_YEAR_DELETE
  GENERAL_SETTINGS_VIEW
  GENERAL_SETTINGS_SAVE
  SCHEDULE_SETTINGS_VIEW
  SCHEDULE_SETTINGS_SAVE
  SCHEDULE_SETTINGS_DELETE
  ABS_VAC_SETTINGS_VIEW
  ABS_VAC_SETTINGS_SAVE
  ABS_VAC_SETTINGS_DELETE
  FINANCE_SETTINGS_VIEW
  FINANCE_SETTINGS_SAVE
  FINANCE_SETTINGS_DELETE
  ASSIGN_RESTRICTED_ABSENCE_REASON
  PERMISSION_SET_VIEW
  PERMISSION_SET_SAVE
  PERMISSION_SET_DELETE
  EXTERNAL_CONNECTIONS_VIEW
  EXTERNAL_CONNECTIONS_SAVE
  EXTERNAL_CONNECTIONS_DELETE
  ORGANIZATION_RELATIONSHIP_VIEW
  ORGANIZATION_RELATIONSHIP_SAVE
  ORGANIZATION_RELATIONSHIP_DELETE
  DATA_IMPORT
  FILE_UPLOAD
  FILE_DELETE
  REPLACEMENT_POOL_CONFIG_SAVE
  REPLACEMENT_POOL_CONFIG_DELETE
  REPLACEMENT_CRITERIA_CONFIG_SAVE
  REPLACEMENT_CRITERIA_CONFIG_DELETE
  CUSTOM_FIELD_SAVE
  CUSTOM_FIELD_DELETE
  LABEL_SAVE
  LABEL_DELETE
}

type PermissionLevel {
  _info: [ReturnMessage]
  levelId: String!
  displayName: String!
  permissions: [PermissionEnum]!
}

type PermissionQueries {
  definition(role: OrgUserRole!): PermissionDefinition!
}

type PermissionSet implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  orgUserRole: OrgUserRole
  permissionSet: [PermissionEnum]
  categories: [PermissionCategoryIdentifier!]!
  isShadowRecord: Boolean!
  shadowFromOrgId: ID
  shadowFromOrgName: String
}

input PermissionSetCreateInput {
  orgId: ID
  name: String!
  externalId: String
  description: String
  orgUserRole: OrgUserRole!
  categories: [PermissionCategoryIdentifierInput]
}

type PermissionSetMutations {
  create(permissionSet: PermissionSetCreateInput!): PermissionSet
  update(permissionSet: PermissionSetUpdateInput!): PermissionSet
  delete(permissionSetId: ID!): Boolean
}

type PermissionSetQueries {
  byId(id: ID!): PermissionSet
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput], searchText: String, roles: [OrgUserRole]): [PermissionSet]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], searchText: String, roles: [OrgUserRole]): PagedPermissionSet
}

type PermissionSetting {
  _info: [ReturnMessage]
  settingId: String!
  displayName: String!
  levels: [PermissionLevel!]!
}

type PermissionSettingIdentifier {
  _info: [ReturnMessage]
  settingId: String!
  levelId: String!
}

input PermissionSettingIdentifierInput {
  settingId: String!
  levelId: String!
}

input PermissionSetUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  externalId: String
  description: String
  categories: [PermissionCategoryIdentifierInput]
}

enum PhoneType {
  INVALID
  HOME_PHONE
  WORK_PHONE
  MOBILE_PHONE
}

type Position implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  title: String!
  startDate: Date
  endDate: Date
  positionTypeId: ID
  positionType: PositionType
  currentEmployeeId: ID
  contractId: ID
  contract: Contract
  hoursPerFullWorkDay: Decimal
  needsReplacement: NeedsReplacement
  isStaffAugmentation: Boolean!
  replacementCriteria: ObjectReplacementCriteria
  schedules: [PositionSchedule]
  accountingCodeAllocations: [PositionAccountingCode]
  locationIds: [ID]
  locations: [Location]
}

type PositionAccountingCode implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  positionId: ID!
  accountingCodeId: ID!
  accountingCode: AccountingCode
  allocation: Decimal!
}

input PositionAccountingCodeInput {
  accountingCodeId: ID!
  allocation: Decimal!
}

input PositionCreateInput {
  name: String!
  orgId: ID
  externalId: String
  startDate: Date
  endDate: Date
  positionTypeId: ID
  currentEmployeeId: ID
  currentContractId: ID
  needsReplacement: NeedsReplacement
  isStaffAugmentation: Boolean!
  hoursPerFullWorkDay: Decimal
}

type PositionDr {
  _info: [ReturnMessage]
  id: ID!
  name: String!
  positionType: PositionTypeDr!
}

input PositionInput {
  orgId: ID
  id: ID
  externalId: String
  positionType: LocatorInput
  contract: LocatorInput
  title: String
  hoursPerFullWorkDay: Decimal
  needsReplacement: NeedsReplacement
  schedules: [PositionScheduleInput]
  replacementCriteria: ReplacementCriteriaInput
  accountingCodeAllocations: [PositionAccountingCodeInput]
}

type PositionQueries {
  byId(id: ID!): Position
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [Position]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedPosition
  qualifiedEmployeeCounts(orgId: ID!, limit: Int, offset: Int, positionId: ID!, name: String): QualifiedEmployeeCounts
  qualifiedEmployees(orgId: ID!, limit: Int, offset: Int, positionId: ID!, name: String): PagedEmployeeQualifiedResult
}

type PositionSchedule implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  rowVersion: String
  name: String!
  positionId: ID!
  items: [PositionScheduleItem!]!
  daysOfTheWeek: [DayOfWeek!]!
}

input PositionScheduleCreateInput {
  orgId: ID
  positionId: ID
  name: String!
  periods: [PositionSchedulePeriodInput]
}

input PositionScheduleCreateSimpleInputTypeDef {
  orgId: ID
  positionId: ID
  locationId: ID
  workScheduleId: ID
  periods: [PositionSchedulePeriodSimpleInput]
}

type PositionScheduleDate {
  _info: [ReturnMessage]
  workDate: Date
  calendarDayTypeId: CalendarDayType
  workDayId: ID!
  contractId: ID!
  positionId: ID!
  positionTypeId: ID!
  positionScheduleId: ID!
  workScheduleVariantTypeId: ID!
  startTimeLocal: DateTime
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  fullWorkdayDuration: Short!
  totalDuration: Short!
  absenceBalanceDuration: Short!
  replacementDuration: Short!
  replacementDayPortion: Decimal!
  halfDayMorningEndLocal: DateTime
  halfDayMorningEndUtc: DateTime
  halfDayAfternoonStartLocal: DateTime
  halfDayMorningDuration: Short
  halfDayAfternoonDuration: Short
  quarterDayEarlyMorningEndLocal: DateTime
  quarterDayEarlyMorningEndUtc: DateTime
  quarterDayLateMorningStartLocal: DateTime
  quarterDayLateMorningStartUtc: DateTime
  quarterDayLateMorningEndLocal: DateTime
  quarterDayLateMorningEndUtc: DateTime
  quarterDayEarlyAfternoonStartLocal: DateTime
  quarterDayEarlyAfternoonStartUtc: DateTime
  quarterDayEarlyAfternoonEndLocal: DateTime
  quarterDayEarlyAfternoonEndUtc: DateTime
  quarterDayLateAfternoonStartLocal: DateTime
  quarterDayLateAfternoonStartUtc: DateTime
  quarterDayEarlyMorningDuration: Short
  quarterDayLateMorningDuration: Short
  quarterDayEarlyAfternoonDuration: Short
  quarterDayLateAfternoonDuration: Short
  details: [PositionScheduleDateDetail]
  position: Position
  workScheduleVariantType: WorkDayScheduleVariantType
}

type PositionScheduleDateDetail {
  _info: [ReturnMessage]
  sequence: Int!
  name: String!
  description: String!
  locationId: ID!
  workDayScheduleId: ID
  workDaySchedulePeriodId: ID
  startDate: Date
  endDate: Date
  startTimeLocal: DateTime
  endTimeLocal: DateTime
  nextStartTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  nextStartTimeUtc: DateTime
  periodDuration: Short!
  travelDuration: Short!
  needsReplacement: Boolean!
  deductFromAbsenceBalance: Boolean!
  room: String!
  totalDuration: Short!
  absenceBalanceDuration: Short!
  absenceBalanceDayPortion: Decimal!
  replacementDuration: Short!
  replacementDayPortion: Decimal!
  isHalfDayMorningEnd: Boolean!
  isHalfDayAfternoonStart: Boolean!
  isQuarterDayEarlyMorningEnd: Boolean!
  isQuarterDayLateMorningStart: Boolean!
  isQuarterDayLateMorningEnd: Boolean!
  isQuarterDayEarlyAfternoonStart: Boolean!
  isQuarterDayEarlyAfternoonEnd: Boolean!
  isQuarterDayLateAfternoonStart: Boolean!
  location: Location
}

input PositionScheduleInput {
  items: [PositionScheduleItemInput]
  daysOfTheWeek: [DayOfWeek]
}

type PositionScheduleItem {
  _info: [ReturnMessage]
  location: Location!
  bellSchedule: WorkDaySchedule
  startPeriod: WorkDaySchedulePeriod
  endPeriod: WorkDaySchedulePeriod
  isAllDay: Boolean!
  startTime: Seconds
  endTime: Seconds
}

input PositionScheduleItemInput {
  location: LocatorInput
  bellSchedule: LocatorInput
  startPeriod: LocatorInput
  endPeriod: LocatorInput
  startTime: Int
  endTime: Int
  nextStartTime: Int
}

type PositionScheduleMutations {
  create(positionSchedule: PositionScheduleCreateInput!): PositionSchedule
  update(positionSchedule: PositionScheduleUpdateInput!): PositionSchedule
  delete(positionScheduleId: ID!): Boolean
  modifyScheduleVariant(positionScheduleVariant: PositionScheduleVariantModifyInput!): PositionScheduleVariant
  deleteScheduleVariant(positionScheduleVariant: PositionScheduleVariantDeleteInput!): Boolean
  createSimple(positionSchedule: PositionScheduleCreateSimpleInputTypeDef!): PositionSchedule
}

input PositionSchedulePeriodInput {
  id: ID
  name: String
  description: String
  room: String
  locationId: ID
  workDayScheduleId: ID
  workDaySchedulePeriodId: ID
  needsReplacement: Boolean
  deductFromAbsenceBalance: Boolean
}

input PositionSchedulePeriodSimpleInput {
  workDaySchedulePeriodId: ID
  name: String
  room: String
  needsReplacement: Boolean
  deductFromAbsenceBalance: Boolean
}

type PositionScheduleQueries {
  byId(id: ID!): PositionSchedule
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [PositionSchedule]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedPositionSchedule
}

input PositionScheduleUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  periods: [PositionSchedulePeriodInput]
}

type PositionScheduleVariant implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  positionScheduleId: ID!
  workDayScheduleVariantTypeId: ID!
  isStandard: Boolean!
  startTime: Seconds
  endTime: Seconds
  duration: Int
  halfDayMorningEnd: Seconds
  halfDayAfternoonStart: Seconds
  halfDayMorningDuration: Int
  halfDayAfternoonDuration: Int
  quarterDayEarlyMorningEnd: Seconds
  quarterDayLateMorningStart: Seconds
  quarterDayLateMorningEnd: Seconds
  quarterDayEarlyAfternoonStart: Seconds
  quarterDayEarlyAfternoonEnd: Seconds
  quarterDayLateAfternoonStart: Seconds
  quarterDayEarlyMorningDuration: Int
  quarterDayLateMorningDuration: Int
  quarterDayEarlyAfternoonDuration: Int
  quarterDayLateAfternoonDuration: Int
  periods: [PositionScheduleVariantPeriod]
}

input PositionScheduleVariantDeleteInput {
  positionScheduleId: ID
  positionScheduleVariantId: ID
}

input PositionScheduleVariantInput {
  id: ID
  workDayScheduleVariantTypeId: ID
  periods: [PositionScheduleVariantPeriodCreateInput]
}

input PositionScheduleVariantModifyInput {
  positionScheduleId: ID
  rowVersion: String
  scheduleVariant: PositionScheduleVariantInput
}

type PositionScheduleVariantPeriod implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  sequence: Int
  startTime: Seconds!
  endTime: Seconds!
  nextStartTime: Seconds
  duration: Int
  travelDuration: Int
  totalDuration: Int
  dayPortion: Decimal!
  isHalfDayMorningEnd: Boolean!
  isHalfDayAfternoonStart: Boolean!
  isQuarterDayEarlyMorningEnd: Boolean!
  isQuarterDayLateMorningStart: Boolean!
  isQuarterDayLateMorningEnd: Boolean!
  isQuarterDayEarlyAfternoonStart: Boolean!
  isQuarterDayEarlyAfternoonEnd: Boolean!
  isQuarterDayLateAfternoonStart: Boolean!
}

input PositionScheduleVariantPeriodCreateInput {
  id: ID
  positionSchedulePeriodName: String!
  startTime: Int
  isHalfDayMorningEnd: Boolean
  isHalfDayAfternoonStart: Boolean
  isQuarterDayEarlyMorningEnd: Boolean
  isQuarterDayLateMorningStart: Boolean
  isQuarterDayLateMorningEnd: Boolean
  isQuarterDayEarlyAfternoonStart: Boolean
  isQuarterDayEarlyAfternoonEnd: Boolean
  isQuarterDayLateAfternoonStart: Boolean
}

type PositionType implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  forStaffAugmentation: Boolean!
  forPermanentPositions: Boolean!
  needsReplacement: NeedsReplacement
  minAbsenceDurationMinutes: Int!
  defaultContractId: ID
  defaultContract: Contract
  validUntil: DateTime
  expired: Boolean!
  payTypeId: AbsenceReasonTrackingTypeId
  payCodeId: ID
  payCode: PayCode
  replacementCriteria: ObjectReplacementCriteria
}

input PositionTypeCreateInput {
  name: String!
  orgId: ID
  forStaffAugmentation: Boolean!
  forPermanentPositions: Boolean!
  externalId: String
  needsReplacement: NeedsReplacement
  minAbsenceDurationMinutes: Int!
  defaultContractId: ID
  payTypeId: AbsenceReasonTrackingTypeId
  payCodeId: ID
  replacementCriteria: ReplacementCriteriaInput
}

type PositionTypeDr {
  _info: [ReturnMessage]
  id: ID!
  name: String!
}

type PositionTypeMutations {
  create(positionType: PositionTypeCreateInput!): PositionType
  update(positionType: PositionTypeUpdateInput!): PositionType
  delete(positionTypeId: ID!): Boolean
}

type PositionTypeQualifications {
  _info: [ReturnMessage]
  qualifiedPositionTypes: [PositionType!]!
  unqualifiedPositionTypes: [PositionType!]!
}

type PositionTypeQueries {
  byId(id: ID!): PositionType
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput], forStaffAugmentation: Boolean, forPermanentPositions: Boolean): [PositionType]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput], forStaffAugmentation: Boolean, forPermanentPositions: Boolean): PagedPositionType
  qualifiedEmployeeCounts(orgId: ID!, limit: Int, offset: Int, positionTypeId: ID!, name: String): QualifiedEmployeeCounts
  qualifiedEmployees(orgId: ID!, limit: Int, offset: Int, positionTypeId: ID!, name: String): PagedEmployeeQualifiedResult
  getQualificationsFromEndorsements(orgId: ID!, endorsementIds: [ID!]!): PositionTypeQualifications!
}

input PositionTypeUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  forStaffAugmentation: Boolean
  forPermanentPositions: Boolean
  externalId: String
  needsReplacement: NeedsReplacement
  minAbsenceDurationMinutes: Int
  defaultContractId: ID
  expired: Boolean
  payTypeId: AbsenceReasonTrackingTypeId
  payCodeId: ID
  replacementCriteria: ReplacementCriteriaInput
}

type QualifiedEmployeeCounts {
  _info: [ReturnMessage]
  nameMask: String!
  offset: Int!
  limit: Int!
  moreEmployees: Boolean!
  numFullyQualified: Int!
  numMinimallyQualified: Int!
  numNeverQualified: Int!
}

type Query {
  absence: AbsenceQueries
  absenceReasonBalance: AbsenceReasonBalanceQueries
  applicationGrant: ApplicationGrantQueries
  assignment: AssignmentQueries
  branding: BrandingQueries
  calendarChange: CalendarChangeQueries
  changeLog: ChangeLogQueries
  contract: ContractQueries
  contractSchedule: ContractScheduleQueries
  customField: CustomFieldQueries
  dataImport: DataImportQueries
  employee: EmployeeQueries
  eventQueue: EventQueueQueries
  inAppNotification: InAppNotificationQueries
  locationGroup: LocationGroupQueries
  location: LocationQueries
  organization: OrganizationQueries
  organizationRelationship: OrganizationRelationshipQueries
  orgRef_AbsenceReasonCategory: OrgRef_AbsenceReasonCategoryQueries
  orgRef_AbsenceReason: OrgRef_AbsenceReasonQueries
  orgRef_AccountingCode: OrgRef_AccountingCodeQueries
  orgRef_CalendarChangeReason: OrgRef_CalendarChangeReasonQueries
  orgRef_EndEmploymentReason: OrgRef_EndEmploymentReasonQueries
  orgRef_Endorsement: OrgRef_EndorsementQueries
  orgRef_Label: OrgRef_LabelQueries
  orgRef_PayCode: OrgRef_PayCodeQueries
  orgRef_VacancyReason: OrgRef_VacancyReasonQueries
  orgRef_WorkDayScheduleVariantType: OrgRef_WorkDayScheduleVariantTypeQueries
  orgUser: OrgUserQueries
  permission: PermissionQueries
  permissionSet: PermissionSetQueries
  position: PositionQueries
  positionSchedule: PositionScheduleQueries
  positionType: PositionTypeQueries
  referenceData: ReferenceDataQueries
  replacementCriteriaConfig: ReplacementCriteriaConfigQueries
  replacementPoolConfig: ReplacementPoolConfigQueries
  replacementPool: ReplacementPoolQueries
  returnMessageTest: ReturnMessageTestQueries
  savedView: SavedViewQueries
  schoolYear: SchoolYearQueries
  search: SearchQueries
  userAccess: UserAccessQueries
  user: UserQueries
  vacancy: VacancyQueries
  workDayPattern: WorkDayPatternQueries
  workDaySchedule: WorkDayScheduleQueries
}

type RefAbsenceDocumentType {
  _info: [ReturnMessage]
  enumValue: AbsenceDocumentType
  name: String!
  description: String
}

type RefAbsenceReasonTrackingType {
  _info: [ReturnMessage]
  enumValue: AbsenceReasonTrackingTypeId
  name: String!
  description: String
}

type RefAbsenceStatus {
  _info: [ReturnMessage]
  enumValue: AbsenceStatus
  name: String!
  description: String
}

type RefAddressType {
  _info: [ReturnMessage]
  enumValue: AddressType
  name: String!
  description: String
}

type RefCalendarDayType {
  _info: [ReturnMessage]
  enumValue: CalendarDayType
  name: String!
  description: String
}

type RefCountryCode {
  _info: [ReturnMessage]
  enumValue: CountryCode
  name: String!
  description: String
}

type RefCulture {
  _info: [ReturnMessage]
  enumValue: Culture
  name: String!
  description: String
}

type RefCurrency {
  _info: [ReturnMessage]
  enumValue: Currency
  name: String!
  description: String
}

type RefCustomFieldRequirementLevel {
  _info: [ReturnMessage]
  enumValue: CustomFieldRequirementLevel
  name: String!
  description: String
}

type RefCustomFieldSetType {
  _info: [ReturnMessage]
  enumValue: CustomFieldSetType
  name: String!
  description: String
}

type RefCustomFieldType {
  _info: [ReturnMessage]
  enumValue: CustomFieldType
  name: String!
  description: String
}

type RefCustomFieldVisibility {
  _info: [ReturnMessage]
  enumValue: CustomFieldVisibility
  name: String!
  description: String
}

type RefDataImportType {
  _info: [ReturnMessage]
  enumValue: DataImportType
  name: String!
  description: String
}

type RefDateRangeType {
  _info: [ReturnMessage]
  enumValue: DateRangeType
  name: String!
  description: String
}

type RefDensityUnit {
  _info: [ReturnMessage]
  enumValue: DensityUnit
  name: String!
  description: String
}

type RefDimensionUnit {
  _info: [ReturnMessage]
  enumValue: DimensionUnit
  name: String!
  description: String
}

type ReferenceDataQueries {
  absenceDocumentTypes: [RefAbsenceDocumentType]
  absenceReasonTrackingTypes: [RefAbsenceReasonTrackingType]
  absenceStatuses: [RefAbsenceStatus]
  addressTypes: [RefAddressType]
  calendarDayTypes: [RefCalendarDayType]
  country: [RefCountryCode]
  cultures: [RefCulture]
  customFieldTypes: [RefCustomFieldType]
  customFieldVisibilitys: [RefCustomFieldVisibility]
  customFieldRequirementLevels: [RefCustomFieldRequirementLevel]
  customFieldSetTypes: [RefCustomFieldSetType]
  currencies: [RefCurrency]
  dateRangeTypes: [RefDateRangeType]
  dataImportTypes: [RefDataImportType]
  densityUnits: [RefDensityUnit]
  dimensionUnits: [RefDimensionUnit]
  featureFlags: [RefFeatureFlag]
  fileTypes: [RefFileType]
  filePurposes: [RefFilePurpose]
  notificationReasons: [RefNotificationReason]
  parsingStatuses: [RefParsingStatus]
  objectTypes: [RefObjectType]
  organizationTypes: [RefOrganizationType]
  phoneTypes: [RefPhoneType]
  replacementCriteriaTypes: [RefReplacementCriteriaType]
  replacementPoolTypes: [RefReplacementPoolType]
  states: [RefStateCode]
  labelTypes: [RefLabelType]
  fillStatuses: [RefFillStatus]
  timeZones: [RefTimeZone]
  unitTypes: [RefUnitType]
  volumeUnits: [RefVolumeUnit]
  weightUnits: [RefWeightUnit]
}

type RefFeatureFlag {
  _info: [ReturnMessage]
  enumValue: FeatureFlag
  name: String!
  description: String
}

type RefFilePurpose {
  _info: [ReturnMessage]
  enumValue: FilePurpose
  name: String!
  description: String
}

type RefFileType {
  _info: [ReturnMessage]
  enumValue: FileType
  name: String!
  description: String
}

type RefFillStatus {
  _info: [ReturnMessage]
  enumValue: FillStatus
  name: String!
  description: String
}

type RefLabelType {
  _info: [ReturnMessage]
  enumValue: LabelType
  name: String!
  description: String
}

type RefNotificationReason {
  _info: [ReturnMessage]
  enumValue: NotificationReason
  name: String!
  description: String
  appliesToRole: OrgUserRole
  methodsOfDelivery: [NotificationMethodOfDelivery!]!
}

type RefObjectType {
  _info: [ReturnMessage]
  enumValue: ObjectType
  name: String!
  description: String
}

type RefOrganizationType {
  _info: [ReturnMessage]
  enumValue: OrganizationType
  name: String!
  description: String
}

type RefParsingStatus {
  _info: [ReturnMessage]
  enumValue: ParsingStatus
  name: String!
  description: String
}

type RefPhoneType {
  _info: [ReturnMessage]
  enumValue: PhoneType
  name: String!
  description: String
}

type RefReplacementCriteriaType {
  _info: [ReturnMessage]
  enumValue: ReplacementCriteriaType
  name: String!
  description: String
}

type RefReplacementPoolType {
  _info: [ReturnMessage]
  enumValue: ReplacementPoolType
  name: String!
  description: String
}

type RefStateCode {
  _info: [ReturnMessage]
  enumValue: StateCode
  name: String!
  description: String
}

type RefTimeZone {
  _info: [ReturnMessage]
  enumValue: TimeZone
  name: String!
  description: String
}

type RefUnitType {
  _info: [ReturnMessage]
  enumValue: UnitType
  name: String!
  description: String
}

type RefVolumeUnit {
  _info: [ReturnMessage]
  enumValue: VolumeUnit
  name: String!
  description: String
}

type RefWeightUnit {
  _info: [ReturnMessage]
  enumValue: WeightUnit
  name: String!
  description: String
}

input RegisterUserDeviceInput {
  userId: ID
  deviceId: String!
  firebaseTokenId: String
  mobileDeviceTypeId: MobileDeviceType
  operatingSystemVersion: String
  softwareVersion: String
}

type ReplacementCriteria implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  replacementCriteriaConfigId: Int!
  positionId: ID
  positionTypeId: ID
  objectType: ObjectType
  objectKey: ID!
  replacementCriteriaConfig: ReplacementCriteriaConfig
  replacementCriterion: [ReplacementCriterion]
}

input ReplacementCriteriaAddEndorsementsInput {
  id: ID!
  rowVersion: String!
  endorsementIds: [ID]
}

type ReplacementCriteriaConfig implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  requiredUntilLeadTimeMinutesRemain: Int
  requiredUntilLeadTimePercentRemain: Int
  requiredUntilNCandidateRemain: Int
  includeMatchingCandidates: Boolean
  replacementCriteriaTypeId: ReplacementCriteriaType
}

input ReplacementCriteriaConfigCreateInput {
  name: String!
  orgId: ID
  requiredUntilLeadTimeMinutesRemain: Int
  requiredUntilLeadTimePercentRemain: Int
  requiredUntilNCandidateRemain: Int
  includeMatchingCandidates: Boolean
}

type ReplacementCriteriaConfigMutations {
  create(replacementCriteriaConfig: ReplacementCriteriaConfigCreateInput!): ReplacementCriteriaConfig
  update(replacementCriteriaConfig: ReplacementCriteriaConfigUpdateInput!): ReplacementCriteriaConfig
  delete(replacementCriteriaConfigId: ID!): Boolean
}

type ReplacementCriteriaConfigQueries {
  byId(id: ID!): ReplacementCriteriaConfig
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ReplacementCriteriaConfig]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedReplacementCriteriaConfig
}

input ReplacementCriteriaConfigUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  requiredUntilLeadTimeMinutesRemain: Int
  requiredUntilLeadTimePercentRemain: Int
  requiredUntilNCandidateRemain: Int
  includeMatchingCandidates: Boolean
}

input ReplacementCriteriaCreateInput {
  orgId: ID
  replacementCriteriaConfigId: ID
  endorsementIds: [ID]
  objectType: ObjectType
  objectKey: ID
}

input ReplacementCriteriaInput {
  orgId: ID
  mustHave: [LocatorInput]
  shouldHave: [LocatorInput]
  shouldNotHave: [LocatorInput]
  mustNotHave: [LocatorInput]
}

type ReplacementCriteriaMutations {
  create(replacementCriteria: ReplacementCriteriaCreateInput!): ReplacementCriteria
  update(replacementCriteria: ReplacementCriteriaUpdateInput!): ReplacementCriteria
  delete(replacementCriteriaId: ID!): Boolean
  addEndorsements(replacementCriteriaEndorsements: ReplacementCriteriaAddEndorsementsInput!): ReplacementCriteria
  removeEndorsements(replacementCriteriaEndorsements: ReplacementCriteriaRemoveEndorsementsInput!): ReplacementCriteria
}

input ReplacementCriteriaRemoveEndorsementsInput {
  id: ID!
  rowVersion: String!
  endorsementIds: [ID]
}

enum ReplacementCriteriaType {
  INVALID
  MUST_HAVE
  PREFER_TO_HAVE
  PREFER_TO_NOT_HAVE
  MUST_NOT_HAVE
}

input ReplacementCriteriaUpdateInput {
  id: ID!
  rowVersion: String!
  replacementCriteriaConfigId: ID
}

type ReplacementCriterion implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  replacementCriteriaId: ID!
  endorsementId: ID!
}

type ReplacementPool implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  replacementPoolConfigId: ID!
  includeAllEmployees: Boolean
  locationGroupId: ID
  locationGroup: LocationGroup
  locationId: ID
  location: Location
  positionTypeId: ID
  positionType: PositionType
  employeeId: ID
  employee: Employee
  objectType: ObjectType
  objectKey: ID!
  numReplacements: Int
  replacementPoolConfig: ReplacementPoolConfig
  replacementPoolMembers: [ReplacementPoolMember]
}

input ReplacementPoolAddEmployeesInput {
  id: ID!
  rowVersion: String!
  employeeIds: [ID]
  appliesToAllEmployees: Boolean
}

type ReplacementPoolConfig implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  exclude: Boolean
  maxLeadTimeMinutes: Int!
  minLeadTImeMinutes: Int!
  useWhenDayExceedsWorkMinutes: Int!
  percentLeadTime: Int
  replacementPoolTypeId: ReplacementPoolType
}

input ReplacementPoolConfigCreateInput {
  name: String!
  orgId: ID
  description: String
  exclude: Boolean
  maxLeadTimeMinutes: Int!
  minLeadTImeMinutes: Int!
  useWhenDayExceedsWorkMinutes: Int!
  percentLeadTime: Int
  replacementPoolTypeId: ReplacementPoolType
}

type ReplacementPoolConfigMutations {
  create(replacementPoolConfig: ReplacementPoolConfigCreateInput!): ReplacementPoolConfig
  update(replacementPoolConfig: ReplacementPoolConfigUpdateInput!): ReplacementPoolConfig
  delete(replacementPoolConfigId: ID!): Boolean
}

type ReplacementPoolConfigQueries {
  byId(id: ID!): ReplacementPoolConfig
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ReplacementPoolConfig]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedReplacementPoolConfig
}

input ReplacementPoolConfigUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  exclude: Boolean
  maxLeadTimeMinutes: Int
  minLeadTImeMinutes: Int
  useWhenDayExceedsWorkMinutes: Int
  percentLeadTime: Int
  replacementPoolTypeId: ReplacementPoolType
}

input ReplacementPoolCreateInput {
  orgId: ID
  replacementPoolConfigId: ID
  employeeIds: [ID]
  includeAllEmployees: Boolean
  objectType: ObjectType
  objectKey: ID
}

type ReplacementPoolMember implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  replacementPoolId: ID!
  employeeId: ID!
  employee: BasicEmployee
}

type ReplacementPoolMutations {
  create(replacementPool: ReplacementPoolCreateInput!): ReplacementPool
  update(replacementPool: ReplacementPoolUpdateInput!): ReplacementPool
  delete(replacementPoolId: ID!): Boolean
  addMembers(replacementPoolMember: ReplacementPoolAddEmployeesInput!): ReplacementPool
  removeMembers(replacementPoolMember: ReplacementPoolRemoveEmployeesInput!): ReplacementPool
}

type ReplacementPoolQueries {
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ReplacementPoolSummary]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedReplacementPool
  byId(limit: Int, offset: Int, forUpdate: Boolean, replacementPoolId: ID!): ReplacementPool
}

input ReplacementPoolRemoveEmployeesInput {
  id: ID!
  rowVersion: String!
  employeeIds: [ID]
}

type ReplacementPoolSummary implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  replacementPoolConfigId: Int!
  includeAllEmployees: Boolean
  locationGroupId: ID
  locationId: ID
  positionTypeId: ID
  employeeId: ID
  objectType: ObjectType
  objectKey: Int!
  numReplacements: Int
  replacementPoolConfig: ReplacementPoolConfig
}

enum ReplacementPoolType {
  INVALID
  FAVORITE
  BLOCKED
  AUTO_ASSIGN
  OTHER
}

input ReplacementPoolUpdateInput {
  id: ID!
  rowVersion: String!
  replacementPoolConfigId: ID
}

input ResetUserPasswordInput {
  id: ID!
  orgId: ID
}

type ReturnMessage {
  text: String
  code: String
  severity: String
}

type ReturnMessageTestQueries {
  testInfo(includeInfo: Boolean, includeWarning: Boolean, includeError: Boolean): TestTypeDef
}

type SavedView implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  query: String!
  viewType: SavedViewType
  createdByOrgUser: OrgUser
  createdByOrgUserId: ID
  createdByUser: User
  createdByUserId: ID!
  changedByOrgUser: OrgUser
  changedByOrgUserId: ID
  changedByUser: User
  changedByUserId: ID!
  fromClause: String!
  selectClause: String!
  whereClause: String!
  orderByClause: String!
  pageSizeClause: String!
  fields: [SavedViewField]
  fieldNames: [String]
  sort: [SavedViewSort]
  pageSize: Int
  filters: [SavedViewFilter]
}

input SavedViewCreateInput {
  orgId: ID
  name: String!
  description: String
  query: String!
}

type SavedViewField {
  _info: [ReturnMessage]
  name: String!
}

type SavedViewFilter {
  _info: [ReturnMessage]
  field: SavedViewField
  fieldName: String!
  operator: String!
  values: [String]!
}

type SavedViewMutations {
  create(savedView: SavedViewCreateInput!): SavedView
  update(savedView: SavedViewUpdateInput!): SavedView
  delete(savedViewId: ID!): Boolean
}

type SavedViewQueries {
  byId(id: ID!): SavedView
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [SavedView]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], searchText: String): PagedSavedView
}

type SavedViewSort {
  _info: [ReturnMessage]
  direction: SavedViewSortDirection
  field: SavedViewField
  fieldName: String!
}

enum SavedViewSortDirection {
  ASC
  DESC
}

enum SavedViewType {
  ABSENCE_SUMMARY
  VACANCY_SUMMARY
  LOOSE
  INVALID
}

input SavedViewUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  query: String
}

scalar SByte

type SchoolYear implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  startDate: Date!
  endDate: Date!
  earliestDateForAbsenceEntry: Date!
  isCurrentSchoolYear: Boolean!
}

input SchoolYearCreateInput {
  orgId: ID
  name: String!
  externalId: String
  startDate: Date
  endDate: Date
  earliestDateForAbsenceEntry: Date
}

type SchoolYearMutations {
  create(schoolYear: SchoolYearCreateInput!): SchoolYear
  update(schoolYear: SchoolYearUpdateInput!): SchoolYear
  delete(schoolYearId: ID!): Boolean
}

type SchoolYearQueries {
  byId(id: ID!): SchoolYear
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [SchoolYear]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedSchoolYear
  currentSchoolYear(orgId: ID!): SchoolYear
}

input SchoolYearUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  externalId: String
  startDate: Date
  endDate: Date
  earliestDateForAbsenceEntry: Date
}

type SearchQueries {
  global(orgId: ID, searchText: String, limit: Int): [SearchResult]
}

type SearchResult {
  _info: [ReturnMessage]
  id: ID!
  type: ObjectType
  orgId: ID!
  fieldName: String
  value: String!
  matches: [SearchResultMatch]
}

type SearchResultMatch {
  _info: [ReturnMessage]
  fieldName: String
  value: String!
}

scalar Seconds

enum SeedOrgDataOptionEnum {
  DONT_SEED
  SEED_SYNCHRONOUSLY
  SEED_ASYNCHRONOUSLY
}

scalar Short

type SmsMessageLog {
  _info: [ReturnMessage]
  createdLocal: DateTime
  createdUtc: DateTime
  sentLocal: DateTime
  sentUtc: DateTime
  updateLocal: DateTime
  updateUtc: DateTime
  direction: String!
  fromPhone: String!
  toPhone: String!
  status: String!
  errorCode: Int
  errorMessage: String
  body: String!
}

input SortDetailsInput {
  sortByPropertyName: String
  sortAscending: Boolean
}

enum StateCode {
  INVALID
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
  AS
  DC
  FM
  GU
  MH
  MP
  PW
  PR
  VI
  AB
  BC
  MB
  NB
  NL
  NS
  NT
  NU
  ON
  PE
  QC
  SK
  YT
}

type SubJobSearch {
  _info: [ReturnMessage]
  vacancy: Vacancy!
  unavailableToWork: Boolean!
}

type Substitute implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  active: Boolean!
  email: String
  phoneNumber: String
  formattedPhone: String
  firstName: String!
  middleName: String
  lastName: String!
  rowVersion: String
  isShadowEmployee: Boolean!
  shadowEmployeeId: ID
  shadowEmployee: Employee
  permissionSet: PermissionSet
  permissions: [PermissionEnum]
  assignments: [Assignment]
  attributes: [EmployeeEndorsement!]!
  payCodeId: ID
  payCode: PayCode
  qualifiedPositionTypes: [PositionType!]!
  substitutePoolMembership: SubstitutePoolMembership
}

input SubstituteAttributeInput {
  attribute: LocatorInput
  expires: Date
}

input SubstituteInput {
  id: ID
  orgId: ID
  email: String
  active: Boolean
  externalId: String
  permissionSet: LocatorInput
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  postalCode: String
  state: StateCode
  country: CountryCode
  phoneNumber: String
  inviteImmediately: Boolean
  payCodeId: ID
  attributes: [SubstituteAttributeInput]
  relatedOrgIds: [ID]
}

type SubstitutePoolMembership {
  _info: [ReturnMessage]
  favoriteForLocationIds: [ID!]
  favoriteForLocations: [Location]
  blockedFromLocationIds: [ID!]
  blockedFromLocations: [Location]
  favoriteForLocationGroupIds: [ID!]
  favoriteForLocationGroups: [LocationGroup]
  blockedFromLocationGroupIds: [ID!]
  blockedFromLocationGroups: [LocationGroup]
  favoriteForEmployeeIds: [ID!]
  favoriteForEmployees: [Employee]
  blockedFromEmployeeIds: [ID!]
  blockedFromEmployees: [Employee]
  favoriteForPositionTypeIds: [ID!]
  favoriteForPositionTypes: [PositionType]
  blockedFromPositionTypeIds: [ID!]
  blockedFromPositionTypes: [PositionType]
  autoAssignToLocations: [Location]
  autoAssignToLocationIds: [ID!]
}

input SubstitutePreferenceInput {
  orgId: ID!
  employee: LocatorInput
  location: LocatorInput
  locationGroup: LocatorInput
  positionType: LocatorInput
  substitute: LocatorInput
  replacementPoolType: ReplacementPoolType
}

type SubstitutePreferences {
  _info: [ReturnMessage]
  favoriteSubstitutes: [Employee!]!
  blockedSubstitutes: [Employee!]!
  autoAssignedSubstitutes: [Employee!]!
}

input SubstitutePreferencesInput {
  favoriteSubstitutes: [LocatorInput]
  blockedSubstitutes: [LocatorInput]
  autoAssignedSubstitutes: [LocatorInput]
}

input SwapVacancyAssignmentsInput {
  firstVacancyId: ID
  firstVacancyRowVersion: String!
  secondVacancyId: ID
  secondVacancyRowVersion: String!
  ignoreWarnings: Boolean
}

type TestTypeDef {
  _info: [ReturnMessage]
  test: String
}

input TimeOffBalancesInput {
  absenceReason: LocatorInput
  schoolYear: LocatorInput
  asOf: Date
  balance: Decimal
}

enum TimeZone {
  INVALID
  UTC
  ATLANTIC_STANDARD_TIME_CANADA
  EASTERN_STANDARD_TIME_US_CANADA
  EASTERN_STANDARD_TIME_INDIANA_EAST
  CENTRAL_STANDARD_TIME_US_CANADA
  CENTRAL_STANDARD_TIME_SASKATCHEWAN
  MOUNTAIN_STANDARD_TIME_US_CANADA
  MOUNTAIN_STANDARD_TIME_ARIZONA
  PACIFIC_STANDARD_TIME_US_CANADA
  ALASKAN_STANDARD_TIME
  HAWAIIAN_STANDARD_TIME
}

scalar UInt

scalar ULong

enum UnitType {
  INVALID
  IMPERIAL
  METRIC
}

scalar Uri

type User implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  firstName: String!
  middleName: String
  lastName: String!
  loginEmail: String!
  recoveryEmail: String
  phone: String
  formattedPhone: String
  phoneIsValidForSms: Boolean
  stopSmsUntilUtc: DateTime
  suspendSmsUntilUtc: DateTime
  inviteSentAtUtc: DateTime
  inviteSent: Boolean!
  isAccountSetup: Boolean!
  cultureId: Culture
  timeZoneId: TimeZone
  rowVersion: String!
  orgUsers: [OrgUser]
  allOrgUsers: [OrgUser]
  preferences: UserPreferences
  mobileDevices: [UserDevice]
  isSystemAdministrator: Boolean!
  eulaAcceptedAtUtc: DateTime
  eulaAccepted: Boolean!
  resetPasswordTicketUrl: String
  resetPasswordTicketUrlGeneratedAtUtc: DateTime
  temporaryPassword: String
  availableTime: [UserAvailableTime]
}

type UserAccess {
  _info: [ReturnMessage]
  id: ID
  user: User
  isSystemAdministrator: Boolean!
  visibleOrganizations: [Organization]
  actualUser: UserAccess
}

type UserAccessQueries {
  me: UserAccess
}

enum UserAvailability {
  INVALID
  AVAILABLE
  NOT_AVAILABLE
  BEFORE
  AFTER
}

type UserAvailableTime implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  userId: ID!
  description: String
  daysOfWeek: [DayOfWeek!]!
  availableTime: Seconds
  availabilityType: UserAvailability!
}

input UserAvailableTimeInput {
  id: ID
  description: String
  userId: ID!
  daysOfWeek: [DayOfWeek!]!
  availableTime: Int
  userAvailabilityType: UserAvailability!
}

input UserCreateInput {
  firstName: String!
  middleName: String
  lastName: String!
  loginEmail: String!
  recoveryEmail: String
  phone: String
  timeZoneId: TimeZone
  cultureId: Culture
  preferences: UserPreferencesInput
}

type UserDevice implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  userId: ID!
  deviceId: String!
  mobileDeviceTypeId: MobileDeviceType!
  firebaseTokenId: String!
  operatingSystemVersion: String!
  softwareVersion: String!
}

input UserLoginEmailChangeInput {
  id: ID!
  rowVersion: String!
  loginEmail: String!
}

type UserMutations {
  create(user: UserCreateInput!): User
  update(user: UserUpdateInput!): User
  changeLoginEmail(loginEmailChange: UserLoginEmailChangeInput!): User
  delete(id: ID!): Boolean
  resetPassword(userInfo: ResetUserPasswordInput!): User
  acceptEula: User
  invite(idsToInvite: [ID]!, orgId: ID, inviteSynchronously: Boolean): Boolean
  saveAvailableTime(availableTime: UserAvailableTimeInput!): UserAvailableTime
  saveUnavailableTime(unavailableTime: UserUnavailableTimeInput!): UserUnavailableTime
  deleteUnavailableTime(id: ID!): Boolean
  verifyPhoneNumber(phoneNumber: String!): User
  sendMobileMessage(id: ID!, title: String!, message: String!): Boolean
  registerUserDevice(userDevice: RegisterUserDeviceInput!): UserDevice
  deleteUserDevice(userDevice: DeleteUserDeviceInput!): Boolean
}

type UserPreferences {
  _info: [ReturnMessage]
  notificationPreferences: [NotificationPreference!]!
}

input UserPreferencesInput {
  notificationPreferences: [NotificationPreferenceInput]
}

type UserQueries {
  byId(id: ID!): User
  paged(limit: Int, offset: Int, sortBy: [SortDetailsInput], searchText: String): PagedUser
  pagedUserUnavailableTime(limit: Int, offset: Int, sortBy: [SortDetailsInput], userId: ID, fromDate: DateTime!, toDate: Date!): PagedUserUnavailableTime
}

type UserUnavailableTime implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  userId: ID!
  description: String
  startDate: Date!
  endDate: Date!
  availableTime: Seconds
  availabilityType: UserAvailability!
}

input UserUnavailableTimeInput {
  id: ID
  description: String
  userId: ID!
  userAvailabilityType: UserAvailability!
  startTimeLocal: Date!
  endTimeLocal: Date!
  startTime: Int
}

input UserUpdateInput {
  id: ID!
  rowVersion: String!
  firstName: String
  middleName: String
  lastName: String
  recoveryEmail: String
  phone: String
  phoneIsValidForSms: Boolean
  timeZoneId: TimeZone
  cultureId: Culture
  preferences: UserPreferencesInput
}

scalar UShort

type Vacancy implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  isNormalVacancy: Boolean!
  title: String!
  positionId: ID!
  contractId: ID!
  absenceId: ID
  isLongTerm: Boolean!
  notesToReplacement: String
  adminOnlyNotes: String
  isClosed: Boolean!
  startDate: Date
  startTimeLocal: DateTime!
  endDate: Date!
  endTimeLocal: DateTime!
  startTimeUtc: DateTime!
  endTimeUtc: DateTime!
  numDays: Int!
  totalDuration: Int!
  totalDayPortion: Decimal!
  fillStatus: FillStatus!
  details: [VacancyDetail!]!
  closedDetails: [VacancyDetail]
  requestedEmployees: [VacancyEmployeeRequest]
  interestedEmployees: [VacancyEmployeeInterest]
  position: Position
  absence: Absence
  payInfoSummary: PayInfoSummary
}

enum VacancyAvailability {
  YES
  MINOR_CONFLICT
  NO
}

input VacancyCreateInput {
  orgId: ID!
  positionTypeId: ID!
  contractId: ID!
  locationId: ID!
  workDayScheduleId: ID!
  title: String!
  notesToReplacement: String
  adminOnlyNotes: String
  externalId: String
  details: [VacancyDetailInput!]!
  ignoreWarnings: Boolean
}

type VacancyDetail implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  vacancyId: ID!
  isPartOfNormalVacancy: Boolean!
  startDate: Date!
  startTimeLocal: DateTime!
  startTimeLocalTimeSpan: Seconds!
  endDate: Date!
  endTimeLocal: DateTime!
  endTimeLocalTimeSpan: Seconds!
  startTimeUtc: DateTime!
  endTimeUtc: DateTime!
  actualDuration: Int!
  dayPortion: Decimal!
  isFilled: Boolean!
  verifiedAtLocal: DateTime
  verifiedAtUtc: DateTime
  verifyComments: String
  payDurationOverride: Int
  payTypeId: AbsenceReasonTrackingTypeId
  workDayScheduleId: ID
  workDayId: Int!
  workDay: WorkDay
  assignmentId: ID
  assignment: Assignment
  locationId: ID!
  location: Location
  accountingCodeAllocations: [VacancyDetailAccountingCode!]!
  payCodeId: ID
  payCode: PayCode
  vacancyReasonId: ID
  vacancyReason: VacancyReason
  vacancy: BasicVacancy
  isClosed: Boolean!
  totalDayPortion: Decimal
  payInfo: PayInfo
}

type VacancyDetailAccountingCode implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  vacancyId: ID!
  vacancyDetailId: ID!
  accountingCodeId: ID!
  accountingCode: AccountingCode
  allocation: Decimal!
}

input VacancyDetailAccountingCodeInput {
  accountingCodeId: ID
  allocation: Decimal!
}

type VacancyDetailCount {
  date: Date
  count: Int!
}

type VacancyDetailDr {
  _info: [ReturnMessage]
  id: ID!
  vacancyId: ID!
  startDate: Date
  endDate: Date
  startTimeLocal: DateTime
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  originalStartTime: DateTime
  originalEndTime: DateTime
  vacancyReasonId: ID
  vacancyReason: String
  isClosed: Boolean!
  location: LocationDr!
  assignment: AssignmentDr
}

input VacancyDetailInput {
  id: ID
  date: DateTime
  startTime: Seconds
  endTime: Seconds
  locationId: ID
  payCodeId: ID
  accountingCodeAllocations: [VacancyDetailAccountingCodeInput]
  vacancyReasonId: ID
  prearrangedReplacementEmployeeId: ID
}

input VacancyDetailVerifyInput {
  vacancyDetailId: ID
  doVerify: Boolean
  verifyComments: String
  payCodeId: ID
  payDurationOverride: Int
  dayPortion: Decimal
  accountingCodeAllocations: [VacancyDetailAccountingCodeInput]
  payTypeId: AbsenceReasonTrackingTypeId
}

type VacancyDr {
  _info: [ReturnMessage]
  id: ID!
  absenceId: ID
  createdUtc: DateTime
  createdLocal: DateTime
  changedUtc: DateTime
  changedLocal: DateTime
  rowVersion: String!
  startDate: Date
  endDate: Date
  numDays: Int!
  isMultiDay: Boolean!
  isClosed: Boolean!
  calendarDayTypeId: CalendarDayType
  position: PositionDr!
  details: [VacancyDetailDr]!
  locationIds: [ID]
  positionTypeIds: [ID]
  positionTypes: [PositionTypeDr]!
  locations: [LocationDr]!
}

type VacancyEmployeeInterest implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  vacancyId: ID!
  employeeId: ID!
  interestRatingId: InterestRating
  isInterested: Boolean
  vacancyRejectionReasonId: VacancyRejectionReason
  rejectedAtUtc: DateTime
  isRejected: Boolean
}

type VacancyEmployeeRequest implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  vacancyId: ID!
  employeeId: ID!
  vacancyRejectionReasonId: VacancyRejectionReason
  rejectedAtUtc: DateTime
  isRejected: Boolean
  validUntilUtc: DateTime
  isExpired: Boolean
  requestedByOrgUserId: ID
  requestedByOrgUser: OrgUser
}

type VacancyMutations {
  create(vacancy: VacancyCreateInput!): Vacancy
  update(vacancy: VacancyUpdateInput!): Vacancy
  delete(vacancyId: ID!): Boolean
  requestVacancy(vacancyRequest: EmployeeInterestInVacancyInput!): VacancyEmployeeInterest
  rejectVacancy(vacancyRejection: EmployeeRejectVacancyInput!): VacancyEmployeeInterest
  assignVacancy(vacancyAssignment: CreateVacancyAssignmentInput!): Assignment
  swapVacancyAssignments(swapDetails: SwapVacancyAssignmentsInput!): Boolean
  verifyVacancyDetail(vacancyDetail: VacancyDetailVerifyInput!): VacancyDetail
}

type VacancyNotificationLog {
  _info: [ReturnMessage]
  id: ID!
  orgId: ID!
  organization: Organization!
  vacancyId: ID!
  vacancy: Vacancy!
  employeeId: ID!
  employee: Employee!
  createdUtc: DateTime!
  sentAtUtc: DateTime
  statusAsOfUtc: DateTime
  numFailedSendAttempts: Short!
  notificationMessageStatus: NotificationMessageStatus
  statusErrorCode: Int
  repliedAtUtc: DateTime
  reply: String
  conversationId: Short!
  jobNotificationResponse: JobNotificationResponse
  messageId: String
}

enum VacancyQualification {
  FULLY
  MINIMALLY
  NOT_QUALIFIED
}

type VacancyQueries {
  byId(id: ID!): Vacancy
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [Vacancy]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedVacancy
  getAssignmentsForVerify(locationIds: [ID], fromDate: Date, toDate: Date, limit: Int, orgId: ID!, shadowFromOrgId: ID, includeVerified: Boolean): [VacancyDetail]
  getCountOfAssignmentsForVerify(locationIds: [ID], fromDate: Date, toDate: Date, orgId: ID!, includeVerified: Boolean): [VacancyDetailCount]
  getTotalCountOfAssignmentsToVerifyForCurrentSchoolYear(orgId: ID!): Int
  wasEmployeeAssignedToJob(id: ID!, vacancyId: ID!): VacancyWasAssignedResult
  employeeSuitableForJob(id: ID!, vacancyId: ID!): Boolean
  employeeJobSearch(id: ID!, availableJobsOnly: Boolean, locationIds: [ID], positionTypeIds: [ID], limit: Int, offset: Int): PagedVacancy
  userSuitableForJob(id: ID!, vacancyId: ID!): Boolean
  specificJobSearchForUser(id: ID!, vacancyId: ID!): Vacancy
  subJobSearch(id: ID!, availableJobsOnly: Boolean, showNonPreferredJobs: Boolean, orgIds: [ID], locationIds: [ID], positionTypeIds: [ID], limit: Int, offset: Int): PagedSubJobSearch
  vacancyNotificationLogByVacancy(vacancyId: ID!, sortBy: [SortDetailsInput]): [VacancyNotificationLog]
  vacancyNotificationLogByUser(userId: ID!, fromDate: Date, toDate: Date, orgIds: [ID], limit: Int, offset: Int): PagedVacancyNotificationLog
  replacementEmployeesForVacancy(orgId: ID!, limit: Int, offset: Int, sortBy: [SortDetailsInput], vacancyId: ID, vacancyDetailIds: [ID], vacancy: VacancyCreateInput, name: String, qualified: [VacancyQualification], available: [VacancyAvailability], favoritesOnly: Boolean, replacementEmployeeId: ID): PagedVacancySubSearchQueryResult
  activityLog(id: ID!): ActivityLog
}

type VacancyReason implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
}

input VacancyReasonCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
}

input VacancyReasonUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
}

enum VacancyRejectionReason {
  INVALID
  NOT_SPECIFIED
  OTHER
  DISLIKE_POSITION
  DISLIKE_LOCATION
  DISLIKE_TEACHER
}

type VacancySubSearchQueryResult {
  _info: [ReturnMessage]
  isAvailableToSubWhenSearching: Boolean!
  availableToSubWhenSearchingAtLocal: DateTime
  availableToSubWhenSearchingAtUtc: DateTime
  isSelectable: Boolean!
  employeeId: ID!
  firstName: String!
  middleName: String
  lastName: String!
  phoneNumber: String
  levelQualified: VacancyQualification!
  levelAvailable: VacancyAvailability!
  vacancyId: ID
  vacancyCreatedUtc: Date!
  vacancyStartTimeUtc: Date!
  totalLeadTimeMinutes: Int!
  minutesLeadTimeLeft: Int!
  percentLeadTimeLeft: Int!
  payCodeId: ID
  isRejected: Boolean!
  isAvailable: Boolean!
  otherJobConflict: Boolean!
  otherOrgJobConflict: Boolean!
  unavailableToWork: Boolean!
  minutesOverlapForJobConflict: Int!
  minutesOverlapForUnavailable: Int!
  isMinorJobConflict: Boolean!
  isMajorJobConflict: Boolean!
  isQualified: Boolean!
  excludedAttribute: Boolean!
  missingAttribute: Boolean!
  qualifiedAtMinutesLeft: Int!
  qualifiedAtPercentLeft: Int!
  qualifiedAtLocal: DateTime
  qualifiedAtUtc: DateTime
  isVisible: Boolean!
  excludedSub: Boolean!
  notYetVisible: Boolean!
  notIncluded: Boolean!
  visibleAtMinutesLeft: Int!
  visibleAtPercentLeft: Int!
  visibleAtLocal: DateTime
  visibleAtUtc: DateTime
  isFavoriteEmployee: Boolean!
  isFavoritePositionType: Boolean!
}

input VacancyUpdateInput {
  id: ID!
  rowVersion: String!
  workDayScheduleId: ID
  title: String
  notesToReplacement: String
  adminOnlyNotes: String
  externalId: String
  details: [VacancyDetailInput!]!
  ignoreWarnings: Boolean
}

type VacancyWasAssignedResult {
  _info: [ReturnMessage]
  vacancyId: ID!
  employeeId: ID!
  returnCode: Int!
  description: String!
  employeeWasAssigned: Boolean!
  assignmentId: ID
  assignment: Assignment
}

enum VolumeUnit {
  INVALID
  CUBIC_INCHES
  CUBIC_FEET
  CUBIC_CENTIMETERS
  CUBIC_METERS
}

enum WeightUnit {
  INVALID
  POUNDS
  KILOGRAMS
}

type WorkDay implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  workDayPatternId: ID!
  sequence: Int
  name: String!
  fullDayEquivalence: Decimal!
  dayOfWeek: DayOfWeek
}

input WorkDayCreateInput {
  name: String!
  dayOfWeek: DayOfWeek
  fullDayEquivalence: Decimal!
}

type WorkDayPattern implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  shiftContractSchedulesForNonInstructionalDays: Boolean
  validUntilUtc: DateTime
  isExpired: Boolean
  workDays: [WorkDay]
}

input WorkDayPatternCreateInput {
  orgId: ID
  name: String!
  externalId: String
  shiftContractSchedulesForNonInstructionalDays: Boolean!
  workDays: [WorkDayCreateInput]
}

type WorkDayPatternMutations {
  create(workDayPattern: WorkDayPatternCreateInput!): WorkDayPattern
  update(workDayPattern: WorkDayPatternUpdateInput!): WorkDayPattern
  delete(workDayPatternId: ID!): Boolean
}

type WorkDayPatternQueries {
  byId(id: ID!): WorkDayPattern
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [WorkDayPattern]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedWorkDayPattern
}

input WorkDayPatternUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  externalId: String
  shiftContractSchedulesForNonInstructionalDays: Boolean
  expired: Boolean
  workDays: [WorkDayCreateInput]
}

type WorkDaySchedule implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  workDayPatternId: ID!
  validUntil: DateTime
  expired: Boolean
  periods: [WorkDaySchedulePeriod]
  variants: [WorkDayScheduleVariant]
  usages: [WorkDayScheduleUsage]
}

input WorkDayScheduleCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
  workDayPatternId: ID
  periods: [WorkDaySchedulePeriodInput]
  locationIds: [ID]
  locationGroupIds: [ID]
  standardSchedule: WorkDayScheduleVariantInput
  additionalVariants: [WorkDayScheduleVariantInput]
}

type WorkDayScheduleMutations {
  create(workDaySchedule: WorkDayScheduleCreateInput!): WorkDaySchedule
  update(workDaySchedule: WorkDayScheduleUpdateInput!): WorkDaySchedule
  delete(workDayScheduleId: ID!): Boolean
  modifyScheduleVariant(workDayScheduleVariant: WorkDayScheduleVariantModifyInput!): WorkDayScheduleVariant
  deleteScheduleVariant(workDayScheduleVariant: WorkDayScheduleVariantDeleteInput!): Boolean
}

type WorkDaySchedulePeriod implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  sequence: Int
  name: String!
  description: String
  workDayScheduleId: ID!
  standardPeriod: WorkDayScheduleVariantPeriod
}

input WorkDaySchedulePeriodInput {
  id: ID
  name: String
  description: String
}

type WorkDayScheduleQueries {
  byId(id: ID!): WorkDaySchedule
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput], searchText: String, locationIds: [ID], locationGroupIds: [ID]): [WorkDaySchedule]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput], searchText: String, locationIds: [ID], locationGroupIds: [ID]): PagedWorkDaySchedule
}

input WorkDayScheduleUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  workDayPatternId: ID
  expired: Boolean
  periods: [WorkDaySchedulePeriodInput]
  locationIds: [ID]
  locationGroupIds: [ID]
  standardSchedule: WorkDayScheduleVariantInput
}

type WorkDayScheduleUsage implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  workDayScheduleId: ID!
  workDayId: ID
  locationId: ID
  locationGroupId: ID
  workDay: WorkDay
  location: Location
  locationGroup: LocationGroup
}

type WorkDayScheduleVariant implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  workDayScheduleId: ID!
  workDayScheduleVariantTypeId: ID!
  isStandard: Boolean!
  startTime: Seconds
  endTime: Seconds
  duration: Int
  halfDayMorningEnd: Seconds
  halfDayAfternoonStart: Seconds
  halfDayMorningDuration: Int
  halfDayAfternoonDuration: Int
  quarterDayEarlyMorningEnd: Seconds
  quarterDayLateMorningStart: Seconds
  quarterDayLateMorningEnd: Seconds
  quarterDayEarlyAfternoonStart: Seconds
  quarterDayEarlyAfternoonEnd: Seconds
  quarterDayLateAfternoonStart: Seconds
  quarterDayEarlyMorningDuration: Int
  quarterDayLateMorningDuration: Int
  quarterDayEarlyAfternoonDuration: Int
  quarterDayLateAfternoonDuration: Int
  periods: [WorkDayScheduleVariantPeriod]
}

input WorkDayScheduleVariantDeleteInput {
  workDayScheduleId: ID
  workDayScheduleVariantId: ID
}

input WorkDayScheduleVariantInput {
  id: ID
  workDayScheduleVariantTypeId: ID
  periods: [WorkDayScheduleVariantPeriodInput]
}

input WorkDayScheduleVariantModifyInput {
  workDayScheduleId: ID
  rowVersion: String
  scheduleVariant: WorkDayScheduleVariantInput
}

type WorkDayScheduleVariantPeriod implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  workDaySchedulePeriodId: ID!
  sequence: Int
  startTime: Seconds!
  endTime: Seconds!
  nextStartTime: Seconds!
  periodDuration: Int
  travelDuration: Int
  dayPortion: Decimal!
  isHalfDayMorningEnd: Boolean!
  isHalfDayAfternoonStart: Boolean!
  isQuarterDayEarlyMorningEnd: Boolean!
  isQuarterDayLateMorningStart: Boolean!
  isQuarterDayLateMorningEnd: Boolean!
  isQuarterDayEarlyAfternoonStart: Boolean!
  isQuarterDayEarlyAfternoonEnd: Boolean!
  isQuarterDayLateAfternoonStart: Boolean!
}

input WorkDayScheduleVariantPeriodInput {
  id: ID
  workDaySchedulePeriodName: String!
  startTime: Int
  endTime: Int
  isHalfDayMorningEnd: Boolean
  isHalfDayAfternoonStart: Boolean
  isQuarterDayEarlyMorningEnd: Boolean
  isQuarterDayLateMorningStart: Boolean
  isQuarterDayLateMorningEnd: Boolean
  isQuarterDayEarlyAfternoonStart: Boolean
  isQuarterDayEarlyAfternoonEnd: Boolean
  isQuarterDayLateAfternoonStart: Boolean
}

type WorkDayScheduleVariantType implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: ID!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  isStandard: Boolean!
}

input WorkDayScheduleVariantTypeCreateInput {
  orgId: ID
  name: String!
  description: String
  externalId: String
  isStandard: Boolean!
}

input WorkDayScheduleVariantTypeUpdateInput {
  id: ID!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  isStandard: Boolean!
}
