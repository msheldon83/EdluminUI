type Absence implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  employeeId: Int!
  notesToApprover: String
  startDate: Date
  startTimeLocal: DateTime
  endDate: Date
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  numDays: Int
  totalDuration: Int!
  totalDayPortion: Decimal!
  details: [AbsenceDetail]
  employee: BasicEmployee
  vacancies: [Vacancy]
  locationIds: [Int]
  locations: [Location]
  positionTypeIds: [Int]
  positionTypes: [PositionType]
}

input AbsenceCreateInput {
  orgId: Int!
  employeeId: Int!
  notesToApprover: String
  details: [AbsenceDetailCreateInput]
  vacancies: [AbsenceVacancyInput]
}

type AbsenceDetail implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  absenceId: Int!
  startDate: Date
  startTimeLocal: DateTime
  endDate: Date
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  actualDuration: Int
  dayPartId: DayPart
  dayPortion: Decimal!
  description: String
  reasonUsages: [AbsenceReasonUsage]
}

input AbsenceDetailCreateInput {
  id: Int
  date: DateTime
  dayPartId: DayPart
  startTime: Seconds
  endTime: Seconds
  description: String
  reasons: [AbsenceReasonUsageInput]
}

enum AbsenceDocumentType {
  INVALID
}

type AbsenceMutations {
  create(absence: AbsenceCreateInput!): Absence
  update(absence: AbsenceUpdateInput!): Absence
  delete(absenceId: Int!): Boolean
}

type AbsenceQueries {
  byId(id: ID!): Absence
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [Absence]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedAbsence
  projectedVacancies(absence: AbsenceCreateInput!, ignoreAbsenceId: Int): [Vacancy]
  replacementEmployeesForVacancy(orgId: ID!, limit: Int, offset: Int, sortBy: [SortDetailsInput], vacancyId: ID, vacancy: AbsenceVacancyInput, absentEmployeeId: ID, name: String, qualified: [VacancyQualification], available: [VacancyAvailability], favoritesOnly: Boolean, replacementEmployeeId: ID): PagedVacancySubSearchQueryResult
  projectedAbsence(absence: AbsenceCreateInput!, ignoreAbsenceId: Int): Absence
  dailyReport(orgId: ID!, date: Date!, locationIds: [Int], positionTypeIds: [Int]): DailyReport
}

type AbsenceReason implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  absenceReasonTrackingTypeId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
  isBucket: Boolean!
  appliesToAssignmentTypes: AssignmentType
  limitPerDay: Int
  parentAbsenceReasonId: Int
  parentAbsenceReason: AbsenceReason
  prioritySequence: Int
  childrenAbsenceReasons: [AbsenceReason]
}

type AbsenceReasonBalance implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  rowVersion: String
  employeeId: Int!
  schoolYearId: Int
  schoolYear: SchoolYear
  absenceReasonId: Int
  absenceReason: AbsenceReason
  absenceReasonTrackingTypeId: AbsenceReasonTrackingTypeId
  balanceAsOf: Date!
  initialBalance: Decimal!
  usedBalance: Decimal!
  unusedBalance: Decimal!
}

input AbsenceReasonBalanceCreateInput {
  orgId: Int!
  employeeId: Int!
  schoolYearId: Int
  absenceReasonId: Int
  initialBalance: Decimal
  balanceAsOf: Date
  absenceReasonTrackingTypeId: AbsenceReasonTrackingTypeId
}

type AbsenceReasonBalanceMutations {
  create(absenceReasonBalance: AbsenceReasonBalanceCreateInput!): AbsenceReasonBalance
  update(absenceReasonBalance: AbsenceReasonBalanceUpdateInput!): AbsenceReasonBalance
  delete(absenceReasonBalanceId: Int!): Boolean
}

input AbsenceReasonBalanceUpdateInput {
  id: Int!
  rowVersion: String!
  schoolYearId: Int
  absenceReasonId: Int
  initialBalance: Decimal
  balanceAsOf: Date
  absenceReasonTrackingTypeId: AbsenceReasonTrackingTypeId
}

input AbsenceReasonCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
  appliesToAssignmentTypes: AssignmentType
  absenceReasonTrackingId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
  isBucket: Boolean!
  limitPerDay: Int
  parentAbsenceReasonId: Int
  prioritySequence: Int
}

enum AbsenceReasonTrackingTypeId {
  INVALID
  HOURLY
  DAILY
}

input AbsenceReasonUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  appliesToAssignmentTypes: AssignmentType
  absenceReasonTrackingId: AbsenceReasonTrackingTypeId
  allowNegativeBalance: Boolean!
  isBucket: Boolean!
  limitPerDay: Int
  parentAbsenceReasonId: Int
  prioritySequence: Int
}

type AbsenceReasonUsage implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  absenceId: Int!
  absenceDetailId: Int!
  sequence: Byte!
  amount: Decimal!
  absenceReasonTrackingTypeId: AbsenceReasonTrackingTypeId
  absenceReasonId: Int!
  absenceReason: AbsenceReason
}

input AbsenceReasonUsageInput {
  id: Int
  absenceReasonId: Int!
  amount: Decimal
}

enum AbsenceStatus {
  INVALID
  SAVED
  NEEDS_APPROVAL
  REJECTED
  APPROVED
  CANCELLED
}

input AbsenceUpdateInput {
  id: Int!
  rowVersion: String!
  notesToApprover: String
  details: [AbsenceDetailCreateInput]
  vacancies: [AbsenceVacancyInput]
}

input AbsenceVacancyInput {
  positionId: Int!
  needsReplacement: Boolean
  useSuppliedDetails: Boolean
  notesToReplacement: String
  externalId: String
  requestedReplacementEmployeeIds: [Int]
  prearrangedReplacementEmployeeId: Int
  details: [VacancyDetailInput]
  dayPortionOverrides: [DayPortionOverride]
  accountingCodeAllocations: [VacancyDetailAccountingCodeInput]
  payCodeId: Int
}

type AccountingCode implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  locationId: Int
  location: Location
}

input AccountingCodeCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
  locationId: Int
}

input AccountingCodeUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  locationId: Int
}

type Address {
  _info: [ReturnMessage]
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  lat: Float
  long: Float
  isMappable: Boolean
}

input AddressInput {
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  lat: Float
  long: Float
  isMappable: Boolean
}

enum AddressType {
  INVALID
  HOME_ADDRESS
  WORK_ADDRESS
}

type AdminScopeLocationRules {
  _info: [ReturnMessage]
  locationIds: [Int]
  locationGroupIds: [Int]
  locations: [Location]
  locationGroups: [LocationGroup]
}

input AdminScopeLocationRulesInput {
  locationIds: [Int]
  locationGroupIds: [Int]
}

type AdminScopePositionTypeRules {
  _info: [ReturnMessage]
  positionTypeIds: [Int]
  positionTypes: [PositionType]
}

input AdminScopePositionTypeRulesInput {
  positionTypeIds: [Int]
}

type Assignment implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  assignmentTypeId: AssignmentType
  employeeId: Int!
  positionId: Int!
  contractId: Int!
  vacancyId: Int
  cancellationReasonId: Int
  startTimeLocal: DateTime
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  cancelledAtUtc: DateTime
  employee: BasicEmployee
}

type AssignmentMutations {
  cancelAssignment(cancelRequest: CancelVacancyAssignmentInput!): Assignment
}

type AssignmentQueries {
  byId(id: ID!): Assignment
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [Assignment]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedAssignment
}

enum AssignmentType {
  INVALID
  CONTRACT_ASSIGNMENT
  LONG_TERM_ASSIGNMENT
  DAILY_ASSIGNMENT
}

type BasicEmployee implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  firstName: String!
  middleName: String
  lastName: String!
  phoneNumber: String
}

type BasicVacancy implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  positionId: Int!
  contractId: Int!
  absenceId: Int
  notesToReplacement: String
  position: Position
  absence: Absence
}

type Branding implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  name: String
  description: String
  majorLogoUrl: String
  minorLogoUrl: String
  navigationColor: String
  navigationHoverColor: String
  navigationActiveColor: String
  frontendPrimaryColor: String
  frontendPrimaryLightColor: String
  frontendPrimaryDarkerColor: String
  frontendSecondaryColor: String
  frontendSecondaryLightColor: String
  frontendSecondaryDarkerColor: String
  supportEmailAddress: String
  supportPhoneNumber: String
  domainName: String
  productName: String
  poweredByUrl: String
  emailIconUrl: String
}

type BrandingCsPage implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  name: String
  description: String
  majorLogoUrl: String
  minorLogoUrl: String
  navigationColor: String
  navigationHoverColor: String
  navigationActiveColor: String
  frontendPrimaryColor: String
  frontendPrimaryLightColor: String
  frontendPrimaryDarkerColor: String
  frontendSecondaryColor: String
  frontendSecondaryLightColor: String
  frontendSecondaryDarkerColor: String
  supportEmailAddress: String
  supportPhoneNumber: String
  domainName: String
  productName: String
  certificateExpirationDate: Date
  poweredByUrl: String
  emailIconUrl: String
}

input BrandingInput {
  id: Int
  name: String
  description: String
  majorLogoUrl: String
  minorLogoUrl: String
  navigationColor: String
  navigationHoverColor: String
  navigationActiveColor: String
  frontendPrimaryColor: String
  frontendPrimaryLightColor: String
  frontendPrimaryDarkerColor: String
  frontendSecondaryColor: String
  frontendSecondaryLightColor: String
  frontendSecondaryDarkerColor: String
  supportEmailAddress: String
  supportPhoneNumber: String
  domainName: String
  productName: String
  certificateExpirationDate: Date
  poweredByUrl: String
  emailIconUrl: String
}

type BrandingMutations {
  save(branding: BrandingInput!): Branding
  delete(brandingId: Int!): Boolean
}

type BrandingQueries {
  defaultBranding: Branding
  byId(id: ID!): BrandingCsPage
  all: [BrandingCsPage]
}

scalar Byte

type CalendarChange implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  startDate: Date!
  endDate: Date!
  description: String
  calendarChangeReasonId: Int!
  calendarChangeReason: CalendarChangeReason
  countTowardContractDays: Boolean!
  changedContracts: [ChangedContract]
  schoolYearId: Int!
  schoolYear: SchoolYear
  affectsAllContracts: Boolean!
}

input CalendarChangeCreateInput {
  orgId: Int!
  description: String
  startDate: Date
  endDate: Date
  calendarChangeReasonId: Int
  contractIds: [Int!]!
  countTowardContractDays: Boolean
  affectsAllContracts: Boolean!
}

type CalendarChangeMutations {
  create(calendarChange: CalendarChangeCreateInput!): CalendarChange
  update(calendarChange: CalendarChangeUpdateInput!): CalendarChange
  delete(calendarChangeId: Int!): Boolean
}

type CalendarChangeQueries {
  byId(id: ID!): CalendarChange
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [CalendarChange]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedCalendarChange
}

type CalendarChangeReason implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  calendarDayTypeId: CalendarDayType
  workDayScheduleVariantTypeId: Int
  workDayScheduleVariantType: WorkDayScheduleVariant
}

input CalendarChangeReasonCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
  calendarDayTypeId: CalendarDayType
  workDayScheduleVariantTypeId: Int
}

input CalendarChangeReasonUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  calendarDayTypeId: CalendarDayType
  workDayScheduleVariantTypeId: Int
}

input CalendarChangeUpdateInput {
  id: Int!
  rowVersion: String!
  description: String
  startDate: Date
  endDate: Date
  calendarChangeReasonId: Int
  contractIds: [Int!]!
  countTowardContractDays: Boolean
  affectsAllContracts: Boolean!
}

enum CalendarDayType {
  INVALID
  INSTRUCTIONAL_DAY
  NON_WORK_DAY
  TEACHER_WORK_DAY
  CANCELLED_DAY
}

input CancelVacancyAssignmentInput {
  id: Int!
  rowVersion: String!
  cancellationReasonId: Int
}

type ChangedContract implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  calendarChangeId: Int!
  contractId: Int!
  contract: Contract
}

type ChangeLogQueries {
  byId(id: ID!): ChangeLogTypeDef
  byObjectId(id: ID!, objectType: ObjectType!): [ChangeLogTypeDef]
  byEventLogId(id: ID!): [ChangeLogTypeDef]
}

type ChangeLogTypeDef {
  _info: [ReturnMessage]
  messages: String!
  changes: String!
}

type Contract implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  numberOfDays: Int
  workDayPatternId: Int!
  validUntil: DateTime
  expired: Boolean!
}

input ContractCreateInput {
  orgId: Int!
  name: String!
  externalId: String
  numberOfDays: Int
  workDayPatternId: Int
}

type ContractDate implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  contractScheduleId: Int!
  contractId: Int!
  contract: Contract
  workDayPatternId: Int!
  workDayPattern: WorkDayPattern
  schoolYearId: Int!
  schoolYear: SchoolYear
  date: Date!
  calendarDayTypeId: CalendarDayType
  daysFromStart: Int
  daysToEnd: Int
  workDayId: Int
  workDay: WorkDay
  workDayScheduleVariantTypeId: Int!
  workDayScheduleVariantType: WorkDayScheduleVariant
}

input ContractedAssignmentCreateInput {
  orgId: Int!
  employeeId: Int!
  positionId: Int!
  startDate: DateTime
  endDate: DateTime
}

type ContractedAssignmentMutations {
  create(assignment: ContractedAssignmentCreateInput!): Assignment
  update(assignment: ContractedAssignmentUpdateInput!): Assignment
  delete(assignmentId: Int!): Boolean
}

input ContractedAssignmentUpdateInput {
  id: Int!
  rowVersion: String!
  startDate: DateTime
  endDate: DateTime
}

type ContractMutations {
  create(contract: ContractCreateInput!): Contract
  update(contract: ContractUpdateInput!): Contract
  delete(contractId: Int!): Boolean
}

type ContractQueries {
  byId(id: ID!): Contract
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [Contract]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedContract
}

type ContractSchedule implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  contractId: Int!
  contract: Contract
  schoolYearId: Int!
  schoolYear: SchoolYear
  startDate: Date!
  daysToWork: [DayOfWeek]
  firstWorkDayId: Int!
  firstWorkDay: WorkDay
  projectedEndDate: Date!
  contractDates: [ContractDate]
}

input ContractScheduleCreateInput {
  orgId: Int!
  startDate: Date
  firstWorkDayId: Int
  daysToWork: [DayOfWeek]
  contractId: Int!
  schoolYearId: Int!
}

type ContractScheduleMutations {
  create(contractSchedule: ContractScheduleCreateInput!): ContractSchedule
  update(contractSchedule: ContractScheduleUpdateInput!): ContractSchedule
  delete(contractScheduleId: Int!): Boolean
  seedContractSchedule(contractScheduleId: Int!): ContractSchedule
}

type ContractScheduleQueries {
  byId(id: ID!): ContractSchedule
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ContractSchedule]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedContractSchedule
}

input ContractScheduleUpdateInput {
  id: Int!
  rowVersion: String!
  startDate: Date
  firstWorkDayId: Int
  daysToWork: [DayOfWeek]
}

input ContractUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  externalId: String
  numberOfDays: Int
  workDayPatternId: Int
  expired: Boolean
}

enum CountryCode {
  INVALID
  US
  CA
}

input CreateVacancyAssignmentInput {
  orgId: Int!
  vacancyId: Int!
  employeeId: Int!
  isLongTerm: Boolean
  appliesToAllVacancyDetails: Boolean
  vacancyDetailIds: [Int]
}

enum Culture {
  INVALID
  US_ENGLISH
}

enum Currency {
  INVALID
  USD
  CAD
}

type CustomField implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  stringId: String!
  description: String
  customFieldTypeId: CustomFieldType
  maxResponses: Int!
  customFieldVisibilityId: CustomFieldVisibility
  customFieldRequirementLevelId: CustomFieldRequirementLevel
  format: String
  searchable: Boolean
  listItems: [String]
  label: String!
  displayOrder: Int!
  customFieldSetType: String!
  validUntil: Date
  expired: Boolean
}

input CustomFieldCreateInput {
  orgId: Int!
  customFieldSetTypeId: CustomFieldSetType
  label: String!
  description: String
  displayOrder: Int!
  customFieldTypeId: CustomFieldType
  maxResponses: Int!
  customFieldVisibilityId: CustomFieldVisibility
  customFieldRequirementLevelId: CustomFieldRequirementLevel
  format: String
  listItems: [String]
}

type CustomFieldMutations {
  create(customField: CustomFieldCreateInput!): CustomField
  update(customField: CustomFieldUpdateInput!): CustomField
  delete(customFieldId: Int!): Boolean
}

type CustomFieldQueries {
  byId(id: ID!): CustomField
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [CustomField]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedCustomField
}

enum CustomFieldRequirementLevel {
  INVALID
  ERROR
  WARN
  NONE
}

enum CustomFieldSetType {
  INVALID
  JUST_FOR_TESTING
}

enum CustomFieldType {
  INVALID
  TEXT
  DROP_DOWN
  COMBO
}

input CustomFieldUpdateInput {
  id: Int!
  rowVersion: String!
  label: String
  description: String
  displayOrder: Int
  customFieldTypeId: CustomFieldType
  maxResponses: Int
  customFieldVisibilityId: CustomFieldVisibility
  customFieldRequirementLevelId: CustomFieldRequirementLevel
  format: String
  listItems: [String]
}

enum CustomFieldVisibility {
  INVALID
  SHOW
  SELECT
  HIDE
}

type DailyReport {
  _info: [ReturnMessage]
  unfilledAbsences: [Absence]!
  unfilledVacancies: [Vacancy]!
  filledAbsences: [Absence]!
  filledVacancies: [Vacancy]!
  noSubRequiredAbsences: [Absence]!
  totalCount: Int!
}

scalar Date

enum DateRangeType {
  DAY_OF_WEEK
  WEEK
  MONTH
  YEAR
}

scalar DateTime

scalar DateTimeOffset

enum DayOfWeek {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum DayPart {
  INVALID
  FULL_DAY
  HALF_DAY_MORNING
  HALF_DAY_AFTERNOON
  QUARTER_DAY_EARLY_MORNING
  QUARTER_DAY_LATE_MORNING
  QUARTER_DAY_EARLY_AFTERNOON
  QUARTER_DAY_LATE_AFTERNOON
  HOURLY
}

input DayPortionOverride {
  date: DateTime
  dayPortion: Decimal!
}

scalar Decimal

enum DensityUnit {
  INVALID
  POUNDS_PER_CUBIC_FOOT
  KILOGRAMS_PER_CUBIC_METER
}

enum DimensionUnit {
  INVALID
  INCHES
  CENTIMETERS
  FEET
  METERS
}

enum DistanceUnit {
  INVALID
  MILES
  KILOMETERS
}

interface DomainObjectInterface {
  externalId: String
  rowVersion: String!
}

type Employee implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  rowVersion: String
  canFillVacancies: Boolean
  isShadowEmployee: Boolean!
  shadowEmployeeId: Int
  shadowEmployee: Employee
  primaryPositionId: Int
  primaryPosition: Position
  firstName: String!
  middleName: String
  lastName: String!
  phoneNumber: String
  formattedPhone: String
  assignments: [Assignment]
  absenceReasonBalances: [AbsenceReasonBalance]
  employmentHistories: [EmploymentHistory]
  endorsements: [EmployeeEndorsement]
  locations: [Location]
}

input EmployeeCreateInput {
  orgId: Int!
  orgUserId: Int!
  canFillVacancies: Boolean!
  shadowEmployeeId: Int
  primaryPositionId: Int
  primaryPosition: PositionCreateInput
}

type EmployeeEndorsement implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  employeeId: Int!
  endorsementDate: Date
  expirationDate: Date
  endorsementId: Int!
  endorsement: Endorsement
}

input EmployeeEndorsementCreateInput {
  orgId: Int!
  employeeId: Int!
  endorsementId: Int!
  endorsementDate: Date
  expirationDate: Date
}

type EmployeeEndorsementMutations {
  create(employeeEndorsement: EmployeeEndorsementCreateInput!): EmployeeEndorsement
  update(employeeEndorsement: EmployeeEndorsementUpdateInput!): EmployeeEndorsement
  delete(employeeEndorsementId: Int!): Boolean
}

input EmployeeEndorsementUpdateInput {
  id: Int!
  endorsementDate: Date
  expirationDate: Date
}

input EmployeeInterestInVacancyInput {
  vacancyId: ID
  employeeId: Int!
  interestRatingId: InterestRating
}

type EmployeeMutations {
  create(employee: EmployeeCreateInput!): Employee
  update(employee: EmployeeUpdateInput!): Employee
  delete(employeeId: Int!): Boolean
}

type EmployeeQueries {
  byId(id: ID!): Employee
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput], contractedOn: DateTime): [Employee]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], contractedOn: DateTime): PagedEmployee
  employeePositionSchedule(id: ID!, fromDate: Date!, toDate: Date!): [PositionScheduleDate]
  employeeContractSchedule(id: ID!, fromDate: Date!, toDate: Date!): [ContractDate]
  employeeAbsenceSchedule(id: ID!, fromDate: Date!, toDate: Date!): [Absence]
  employeeVacancySchedule(id: ID!, fromDate: Date!, toDate: Date!): [Vacancy]
  employeeAssignmentSchedule(id: ID!, fromDate: DateTime!, toDate: Date!, limit: Int, includeCompletedToday: Boolean): [VacancyDetail]
}

input EmployeeRejectVacancyInput {
  vacancyId: ID
  employeeId: Int!
  vacancyRejectionReasonId: VacancyRejectionReason
}

input EmployeeUpdateInput {
  id: Int!
  rowVersion: String!
  canFillVacancies: Boolean
  shadowEmployeeId: Int
  primaryPositionId: Int
}

type EmploymentHistory {
  _info: [ReturnMessage]
}

type EndEmploymentReason implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
}

input EndEmploymentReasonCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
}

input EndEmploymentReasonUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
}

type Endorsement implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  expires: Boolean!
}

input EndorsementCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
  expires: Boolean!
}

input EndorsementUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  expires: Boolean!
}

type EventLog {
  _info: [ReturnMessage]
  id: Int!
  eventFullName: String!
  eventJson: String!
  transactionId: String!
  objectKey: Int!
  objectTypeId: ObjectType
  eventTypeId: EventType
  orgId: Int
  actingUserId: Int
  actualUserId: Int
  actingOrgUserId: Int
  actualOrgUserId: Int
}

type EventQueue {
  _info: [ReturnMessage]
  id: Int!
  orgId: Int
  objectTypeId: ObjectType
  objectKey: Int!
  eventTypeId: EventType
  eventQueueStatusId: EventQueueStatus
  numAttempts: Int!
  nextAttemptUtc: DateTime
  lastAttemptUtc: DateTime
  createdUtc: DateTime
  changedUtc: DateTime
  tasks: [EventTask]
  eventLog: EventLog
}

type EventQueueMutations {
  retryEvent(eventQueueId: ID!): Boolean
  delete(eventQueueId: ID!): Boolean
}

type EventQueueQueries {
  byId(id: ID!): EventQueue
  paged(limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedEventQueue
}

enum EventQueueStatus {
  INVALID
  WAITING
  IN_PROCESS
  SUCCESS
  PARTIAL_SUCCESS
  FAILURE
  PERMANENT_FAILURE
  DESERIALIZATION_FAILURE
  MISSING_EVENT_HANDLER
}

type EventTask {
  _info: [ReturnMessage]
  id: Int!
  eventQueueId: Int!
  taskNumber: Int!
  eventTaskStatusId: EventTaskStatus
  name: String
  numAttempts: Int!
  lastAttemptUtc: DateTime
  errorMessage: String
  callStack: String
}

enum EventTaskStatus {
  WAITING
  IN_PROCESS
  SUCCESS
  FAILURE
}

enum EventType {
  INVALID
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_ACCESS_REVOKED
  USER_ACCESS_RESTORED
  USER_LOGGED_IN
  USER_LOGGED_OUT
  USER_PASSWORD_LIMIT_EXCEEDED
  USER_PASSWORD_CHANGED
  USER_PASSWORD_RESET_REQUESTED
  USER_LOGIN_EMAIL_CHANGED
  USER_RECOVERY_EMAIL_CHANGED
  USER_CONTACT_INFO_CHANGED
  USER_ACCEPTED_EULA
  USER_TIME_ZONE_UPDATED
  ORGANIZATION_CREATED
  ORGANIZATION_UPDATED
  ORGANIZATION_DELETED
  ORGANIZATION_TIME_ZONE_CHANGED
  ORGANIZATION_DATA_SEEDED
  LOCATION_CREATED
  LOCATION_UPDATED
  LOCATION_DELETED
  LOCATION_GEO_CODED
  LOCATION_ADDRESS_CHANGED
  LOCATION_TIME_ZONE_CHANGED
  LOCATION_VALID_UNTIL_CHANGED
  LOCATION_CHANGED_GROUP_MEMBERSHIP
  ORGANIZATION_USER_CREATED
  ORGANIZATION_USER_UPDATED
  ORGANIZATION_USER_DELETED
  ORGANIZATION_USER_ACTIVATED
  ORGANIZATION_USER_INACTIVATED
  ORGANIZATION_USER_ADMIN_SCOPE_POSITION_TYPE_RULES_UPDATED
  ORGANIZATION_USER_ADMIN_SCOPE_LOCATION_RULES_UPDATED
  PERMISSION_PROFILE_CREATED
  PERMISSION_PROFILE_UPDATED
  PERMISSION_PROFILE_DELETED
  SCHOOL_YEAR_CREATED
  SCHOOL_YEAR_UPDATED
  SCHOOL_YEAR_DELETED
  WORK_DAY_PATTERN_CREATED
  WORK_DAY_PATTERN_UPDATED
  WORK_DAY_PATTERN_DELETED
  ABSENCE_REASON_CREATED
  ABSENCE_REASON_UPDATED
  ABSENCE_REASON_DELETED
  WORK_DAY_SCHEDULE_VARIANT_TYPE_CREATED
  WORK_DAY_SCHEDULE_VARIANT_TYPE_UPDATED
  WORK_DAY_SCHEDULE_VARIANT_TYPE_DELETED
  END_EMPLOYMENT_REASON_CREATED
  END_EMPLOYMENT_REASON_UPDATED
  END_EMPLOYMENT_REASON_DELETED
  CALENDAR_CHANGE_REASON_CREATED
  CALENDAR_CHANGE_REASON_UPDATED
  CALENDAR_CHANGE_REASON_DELETED
  ENDORSEMENT_CREATED
  ENDORSEMENT_UPDATED
  ENDORSEMENT_DELETED
  CONTRACT_CREATED
  CONTRACT_UPDATED
  CONTRACT_DELETED
  CONTRACT_SCHEDULE_CREATED
  CONTRACT_SCHEDULE_UPDATED
  CONTRACT_SCHEDULE_DELETED
  CONTRACT_SCHEDULE_SEEDED
  RESEED_CONTRACT_SCHEDULE
  POSITION_TYPE_CREATED
  POSITION_TYPE_UPDATED
  POSITION_TYPE_DELETED
  POSITION_CREATED
  POSITION_UPDATED
  POSITION_DELETED
  POSITION_SCHEDULE_CREATED
  POSITION_SCHEDULE_UPDATED
  POSITION_SCHEDULE_DELETED
  POSITION_SCHEDULE_VARIANT_CREATED
  POSITION_SCHEDULE_VARIANT_UPDATED
  POSITION_SCHEDULE_VARIANT_DELETED
  POSITION_CHANGED_OBJECT_SCOPE
  POSITION_CHANGED_POSITION_TYPE
  CALENDAR_CHANGE_CREATED
  CALENDAR_CHANGE_UPDATED
  CALENDAR_CHANGE_DELETED
  WORK_DAY_SCHEDULE_CREATED
  WORK_DAY_SCHEDULE_UPDATED
  WORK_DAY_SCHEDULE_DELETED
  WORK_DAY_SCHEDULE_VARIANT_CREATED
  WORK_DAY_SCHEDULE_VARIANT_UPDATED
  WORK_DAY_SCHEDULE_VARIANT_DELETED
  LABEL_CREATED
  LABEL_UPDATED
  LABEL_DELETED
  PAY_CODE_CREATED
  PAY_CODE_UPDATED
  PAY_CODE_DELETED
  ACCOUNTING_CODE_CREATED
  ACCOUNTING_CODE_UPDATED
  ACCOUNTING_CODE_DELETED
  ABSENCE_REASON_BALANCE_CREATED
  ABSENCE_REASON_BALANCE_UPDATED
  ABSENCE_REASON_BALANCE_DELETED
  ABSENCE_REASON_BALANCE_DEDUCTED
  EMPLOYEE_ENDORSEMENT_CREATED
  EMPLOYEE_ENDORSEMENT_UPDATED
  EMPLOYEE_ENDORSEMENT_DELETED
  REPLACEMENT_POOL_CONFIG_CREATED
  REPLACEMENT_POOL_CONFIG_UPDATED
  REPLACEMENT_POOL_CONFIG_DELETED
  REPLACEMENT_POOL_CREATED
  REPLACEMENT_POOL_UPDATED
  REPLACEMENT_POOL_DELETED
  EMPLOYEES_ADDED_TO_REPLACEMENT_POOL
  EMPLOYEES_REMOVED_FROM_REPLACEMENT_POOL
  REPLACEMENT_CRITERIA_CONFIG_CREATED
  REPLACEMENT_CRITERIA_CONFIG_UPDATED
  REPLACEMENT_CRITERIA_CONFIG_DELETED
  REPLACEMENT_CRITERIA_CREATED
  REPLACEMENT_CRITERIA_UPDATED
  REPLACEMENT_CRITERIA_DELETED
  REPLACEMENT_CRITERION_ADDED
  REPLACEMENT_CRITERION_REMOVED
  EMPLOYEE_CREATED
  EMPLOYEE_UPDATED
  EMPLOYEE_DELETED
  EMPLOYEE_CHANGED_OBJECT_SCOPE
  CONTRACTED_ASSIGNMENT_CREATED
  CONTRACTED_ASSIGNMENT_UPDATED
  CONTRACTED_ASSIGNMENT_ENDED
  VACANCY_ASSIGNMENT_CREATED
  VACANCY_ASSIGNMENT_UPDATED
  VACANCY_ASSIGNMENT_CANCELLED
  ABSENCE_CREATED
  ABSENCE_UPDATED
  ABSENCE_DELETED
  ABSENCE_DETAIL_ADDED
  ABSENCE_DETAIL_CHANGED
  ABSENCE_DETAIL_REMOVED
  VACANCY_CREATED
  VACANCY_UPDATED
  VACANCY_DELETED
  VACANCY_ASSIGNED
  VACANCY_UNASSIGNED
  VACANCY_DETAIL_ADDED
  VACANCY_DETAIL_CHANGED
  VACANCY_DETAIL_REMOVED
  VACANCY_EMPLOYEE_REQUEST_ADDED
  VACANCY_EMPLOYEE_REQUEST_REMOVED
  EMPLOYEE_INTERESTED_IN_VACANCY
  EMPLOYEE_REJECTED_VACANCY
  VACANCY_NOTIFICATION_SENT
  VACANCY_DETAIL_UPDATED
  VACANCY_DETAIL_VERIFIED
  VACANCY_DETAIL_UN_VERIFIED
  FILE_UPLOAD_CREATED
  FILE_UPLOADED
  FILE_UPLOAD_DELETED
  SHIPMENT_FILE_CREATED
  SHIPMENT_FILE_UPDATED
  SHIPMENT_FILE_DELETED
  EXTERNAL_SHIPMENT_FILE_RECEIVED
  PARSED_INVOICE_RECEIVED
  INVOICE_CREATED_FROM_SHIPMENT_FILE
  PARSING_SUBMISSION_PERMANENT_FAILURE
  PARSEABLE_FILE_RECEIVED
  RE_SUBMIT_SHIPMENT_FILE_FOR_PARSING_REQUEST
  BRANDING_CREATED
  BRANDING_UPDATED
  BRANDING_DELETED
  CUSTOM_FIELD_CREATED
  CUSTOM_FIELD_UPDATED
  CUSTOM_FIELD_DELETED
  CUSTOM_FIELD_VALID_UNTIL_UPDATED
  EMAIL_RECEIVED
  EXTERNAL_FILE_CREATED
  EXTERNAL_FILE_UPDATED
  EXTERNAL_FILE_DELETED
  SAVED_VIEW_CREATED
  SAVED_VIEW_UPDATED
  SAVED_VIEW_DELETED
  DATA_IMPORT_CREATED
  DATA_IMPORT_FILE_UPLOADED
  DATA_IMPORT_STARTED
  DATA_IMPORT_FINISHED
  LOCATION_GROUP_CREATED
  LOCATION_GROUP_UPDATED
  LOCATION_GROUP_DELETED
  PERMISSION_SET_CREATED
  PERMISSION_SET_UPDATED
  PERMISSION_SET_DELETED
}

enum FeatureFlag {
  NONE
  FULL_DAY_ABSENCES
  HALF_DAY_ABSENCES
  QUARTER_DAY_ABSENCES
  HOURLY_ABSENCES
}

enum FilePurpose {
  INVALID
  BRANDING
  ABSENCE
  VACANCY
  IMPORT
  OTHER
}

enum FileType {
  INVALID
  PDF
  JPG
  PNG
  GIF
  TIF
}

enum FillStatus {
  INVALID
  UNFILLED
  PARTLY_FILLED
  FILLED
}

scalar Guid

enum InterestRating {
  NOT_INTERESTED
  LOW_INTEREST
  HIGH_INTEREST
}

type Label implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  allowedLabelTypes: LabelType
}

input LabelCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
  allowedLabelTypes: LabelType
}

enum LabelType {
  NONE
  CONTRACT
  LOCATION
  POSITION
  EMPLOYEE
  ABSENCE_REASON
}

input LabelUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  allowedLabelTypes: LabelType
}

type Location implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  timeZoneId: TimeZone
  address: Address
  locationGroupId: Int!
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  phoneNumber: String
  address1: String
  address2: String
  city: String
  stateName: String
  postalCode: String
  countryName: String
  validUntil: DateTime
  active: Boolean
}

input LocationCreateInput {
  orgId: Int!
  name: String!
  externalId: String
  address: AddressInput
  timeZoneId: TimeZone
  locationGroupId: Int!
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  phoneNumber: String
}

type LocationGroup implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  locations: [Location]
}

input LocationGroupCreateInput {
  orgId: Int!
  name: String!
  description: String
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
}

type LocationGroupMutations {
  create(locationGroup: LocationGroupCreateInput!): LocationGroup
  update(locationGroup: LocationGroupUpdateInput!): LocationGroup
  delete(locationGroupId: Int!): Boolean
}

type LocationGroupQueries {
  byId(id: ID!): LocationGroup
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [LocationGroup]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedLocationGroup
}

input LocationGroupUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
}

type LocationMutations {
  create(location: LocationCreateInput!): Location
  update(location: LocationUpdateInput!): Location
  delete(locationId: Int!): Boolean
}

type LocationQueries {
  byId(id: ID!): Location
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [Location]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedLocation
}

input LocationUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  externalId: String
  address: AddressInput
  timeZoneId: TimeZone
  expired: Boolean
  locationGroupId: Int!
  replacementStartOffsetMinutes: Int
  replacementEndOffsetMinutes: Int
  phoneNumber: String
}

scalar Milliseconds

interface ModelObjectInterface {
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
}

type Mutation {
  absence: AbsenceMutations
  absenceReasonBalance: AbsenceReasonBalanceMutations
  assignment: AssignmentMutations
  branding: BrandingMutations
  calendarChange: CalendarChangeMutations
  contractedAssignment: ContractedAssignmentMutations
  contract: ContractMutations
  contractSchedule: ContractScheduleMutations
  customField: CustomFieldMutations
  employeeEndorsement: EmployeeEndorsementMutations
  employee: EmployeeMutations
  eventQueue: EventQueueMutations
  locationGroup: LocationGroupMutations
  location: LocationMutations
  notificationLog: NotificationLogMutations
  organization: OrganizationMutations
  orgUser: OrgUserMutations
  permissionSet: PermissionSetMutations
  positionSchedule: PositionScheduleMutations
  positionType: PositionTypeMutations
  replacementCriteriaConfig: ReplacementCriteriaConfigMutations
  replacementCriteria: ReplacementCriteriaMutations
  replacementPoolConfig: ReplacementPoolConfigMutations
  replacementPool: ReplacementPoolMutations
  savedView: SavedViewMutations
  schoolYear: SchoolYearMutations
  user: UserMutations
  vacancy: VacancyMutations
  workDayPattern: WorkDayPatternMutations
  workDaySchedule: WorkDayScheduleMutations
  orgRef_AbsenceReason: OrgRef_AbsenceReasonMutations
  orgRef_AccountingCode: OrgRef_AccountingCodeMutations
  orgRef_CalendarChangeReason: OrgRef_CalendarChangeReasonMutations
  orgRef_EndEmploymentReason: OrgRef_EndEmploymentReasonMutations
  orgRef_Endorsement: OrgRef_EndorsementMutations
  orgRef_Label: OrgRef_LabelMutations
  orgRef_PayCode: OrgRef_PayCodeMutations
  orgRef_WorkDayScheduleVariantType: OrgRef_WorkDayScheduleVariantTypeMutations
}

enum NeedsReplacement {
  NO
  YES
  SOMETIMES
}

type NotificationLog implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  title: String
  content: String
  headerMessage: String
  link: String
  viewed: Boolean!
  orgId: Int
}

type NotificationLogMutations {
  markSingleNotificationViewed(notificationId: String!): Boolean
  markMultipleNotificationsViewed(notificationIds: [String]!): Boolean
}

type NotificationLogQueries {
  byId(id: ID!): NotificationLog
  paged(limit: Int, offset: Int, orgId: ID, includeViewed: Boolean): PagedNotificationLog
  unreadNotificationCount(orgId: ID): Int
}

type NotificationPreference {
  _info: [ReturnMessage]
  notificationReasonId: NotificationReason
  receiveInAppNotifications: Boolean!
  receiveEmailNotifications: Boolean!
  includeInEmailDigest: Boolean!
}

input NotificationPreferenceInput {
  notificationReasonId: NotificationReason
  receiveInAppNotifications: Boolean!
  receiveEmailNotifications: Boolean!
  includeInEmailDigest: Boolean!
}

enum NotificationReason {
  INVALID
  DIGEST
  ABSENCE_ASSIGNED
  ABSENCE_CANCELLED
}

enum ObjectType {
  INVALID
  USER
  ORGANIZATION
  CONTACT
  LOCATION
  ORG_USER
  PERMISSION_SET
  SCHOOL_YEAR
  WORK_DAY_PATTERN
  ABSENCE_REASON
  WORK_DAY_SCHEDULE_VARIANT_TYPE
  END_EMPLOYMENT_REASON
  CALENDAR_CHANGE_REASON
  ENDORSEMENT
  CONTRACT
  CONTRACT_SCHEDULE
  POSITION_TYPE
  POSITION
  CALENDAR_CHANGE
  WORK_DAY_SCHEDULE
  LOCATION_GROUP
  LABEL
  PAY_CODE
  ACCOUNTING_CODE
  ABSENCE_REASON_BALANCE
  REPLACEMENT_POOL_CONFIG
  REPLACEMENT_POOL
  REPLACEMENT_CRITERIA_CONFIG
  REPLACEMENT_CRITERIA
  EMPLOYEE
  ASSIGNMENT
  ABSENCE
  VACANCY
  FILE_UPLOAD
  BRANDING
  CUSTOM_FIELD
  RECEIVED_EMAIL
  EXTERNAL_FILE
  SAVED_VIEW
  DATA_IMPORT
}

type Organization implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  timeZoneId: TimeZone
  config: organizationConfig
}

type organizationConfig {
  _info: [ReturnMessage]
  organizationTypeId: OrganizationType
  defaultUnitType: UnitType
  defaultDensityUnit: DensityUnit
  defaultVolumeUnit: VolumeUnit
  defaultDimensionUnit: DimensionUnit
  defaultDistanceUnit: DistanceUnit
  defaultWeightUnit: WeightUnit
  defaultCurrency: Currency
  defaultCountry: CountryCode
  defaultLocationId: Int
  orgUsersMustAcceptEula: Boolean!
  leadTimeWindowsMinutes: Int!
  brandingId: Int!
  branding: Branding
  featureFlags: [FeatureFlag]
  longTermVacancyThresholdDays: Int!
  minLeadTimeMinutesToCancelVacancy: Int!
  minLeadTimeMinutesToCancelVacancyWithoutPunishment: Int!
  maxGapMinutesForSameVacancyDetail: Int!
  minAbsenceMinutes: Int!
  maxAbsenceDays: Int!
  requestedSubCutoffMinutes: Int!
  minRequestedEmployeeHoldMinutes: Int!
  maxRequestedEmployeeHoldMinutes: Int!
  minorConflictThresholdMinutes: Int!
}

input organizationConfigInput {
  organizationTypeId: OrganizationType
  featureFlags: [FeatureFlag]
  defaultUnitType: UnitType
  defaultCurrency: Currency
  defaultCountry: CountryCode
  orgUsersMustAcceptEula: Boolean
  defaultLeadTimeWindowMinutes: Int
  brandingId: Int
  longTermVacancyThresholdDays: Int
  minLeadTimeMinutesToCancelVacancy: Int
  minLeadTimeMinutesToCancelVacancyWithoutPunishment: Int
  maxGapMinutesForSameVacancyDetail: Int
  minAbsenceMinutes: Int
  maxAbsenceDays: Int
  requestedSubCutoffMinutes: Int
  minRequestedEmployeeHoldMinutes: Int
  maxRequestedEmployeeHoldMinutes: Int
  minorConflictThresholdMinutes: Int
}

input OrganizationCreateInput {
  name: String!
  externalId: String
  superUserLoginEmail: String!
  superUserFirstName: String!
  superUserLastName: String!
  timeZoneId: TimeZone
  seedOrgDataOption: SeedOrgDataOptionEnum
  config: organizationConfigInput
}

type OrganizationMutations {
  create(organization: OrganizationCreateInput!): Organization
  update(organization: OrganizationUpdateInput!): Organization
}

type OrganizationQueries {
  byId(id: ID!): Organization
  all(searchText: String): [Organization]
  paged(limit: Int, offset: Int, searchText: String): PagedOrganization
}

enum OrganizationType {
  INVALID
  STANDARD
  DEMO
}

input OrganizationUpdateInput {
  orgId: Int!
  rowVersion: String!
  name: String
  externalId: String
  timeZoneId: TimeZone
  config: organizationConfigInput
}

interface OrgObjectInterface {
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
}

type OrgRef_AbsenceReasonMutations {
  create(absenceReason: AbsenceReasonCreateInput!): AbsenceReason
  update(absenceReason: AbsenceReasonUpdateInput!): AbsenceReason
  delete(absenceReasonId: Int!): Boolean
}

type OrgRef_AbsenceReasonQueries {
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [AbsenceReason]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedAbsenceReason
}

type OrgRef_AccountingCodeMutations {
  create(accountingCode: AccountingCodeCreateInput!): AccountingCode
  update(accountingCode: AccountingCodeUpdateInput!): AccountingCode
  delete(accountingCodeId: Int!): Boolean
}

type OrgRef_AccountingCodeQueries {
  byId(id: ID!): AccountingCode
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput], includeExpired: Boolean, locationIds: [Int]): [AccountingCode]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput], includeExpired: Boolean, locationIds: [Int]): PagedAccountingCode
}

type OrgRef_CalendarChangeReasonMutations {
  create(calendarChangeReason: CalendarChangeReasonCreateInput!): CalendarChangeReason
  update(calendarChangeReason: CalendarChangeReasonUpdateInput!): CalendarChangeReason
  delete(calendarChangeReasonId: Int!): Boolean
}

type OrgRef_CalendarChangeReasonQueries {
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [CalendarChangeReason]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedCalendarChangeReason
}

type OrgRef_EndEmploymentReasonMutations {
  create(endEmploymentReason: EndEmploymentReasonCreateInput!): EndEmploymentReason
  update(endEmploymentReason: EndEmploymentReasonUpdateInput!): EndEmploymentReason
  delete(endEmploymentReasonId: Int!): Boolean
}

type OrgRef_EndEmploymentReasonQueries {
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [EndEmploymentReason]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedEndEmploymentReason
}

type OrgRef_EndorsementMutations {
  create(endorsement: EndorsementCreateInput!): Endorsement
  update(endorsement: EndorsementUpdateInput!): Endorsement
  delete(endorsementId: Int!): Boolean
}

type OrgRef_EndorsementQueries {
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [Endorsement]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedEndorsement
}

type OrgRef_LabelMutations {
  create(label: LabelCreateInput!): Label
  update(label: LabelUpdateInput!): Label
  delete(labelId: Int!): Boolean
}

type OrgRef_LabelQueries {
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [Label]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedLabel
}

type OrgRef_PayCodeMutations {
  create(payCode: PayCodeCreateInput!): PayCode
  update(payCode: PayCodeUpdateInput!): PayCode
  delete(payCodeId: Int!): Boolean
}

type OrgRef_PayCodeQueries {
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [PayCode]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedPayCode
}

type OrgRef_WorkDayScheduleVariantTypeMutations {
  create(workDayScheduleVariantType: WorkDayScheduleVariantTypeCreateInput!): WorkDayScheduleVariantType
  update(workDayScheduleVariantType: WorkDayScheduleVariantTypeUpdateInput!): WorkDayScheduleVariantType
  delete(workDayScheduleVariantTypeId: Int!): Boolean
}

type OrgRef_WorkDayScheduleVariantTypeQueries {
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [WorkDayScheduleVariantType]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedWorkDayScheduleVariantType
}

type OrgUser implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  firstName: String!
  middleName: String
  lastName: String!
  email: String!
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  state: StateCode
  postalCode: String
  country: CountryCode
  phoneNumber: String
  formattedPhone: String
  active: Boolean!
  userId: Int
  loginEmail: String
  isReplacementEmployee: Boolean!
  isEmployee: Boolean!
  isAdmin: Boolean!
  isSuperUser: Boolean!
  permissionSets: [PermissionSet]
  permissionSetIds: [Int!]
  adminScopeLocationRules: AdminScopeLocationRules
  adminScopePositionTypeRules: AdminScopePositionTypeRules
  adminLocations: [Location]
  adminPositionTypes: [PositionType]
  allLocationIdsInScope: Boolean!
  allPositionTypeIdsInScope: Boolean!
  employee: Employee
}

input OrgUserCreateInput {
  orgId: Int!
  email: String!
  active: Boolean
  externalId: String
  firstName: String!
  middleName: String
  lastName: String!
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  postalCode: String
  stateId: StateCode
  countryId: CountryCode
  phoneNumber: String
  isSuperUser: Boolean!
  permissionSetIds: [Int!]
  adminScopeLocationRules: AdminScopeLocationRulesInput
  adminScopePositionTypeRules: AdminScopePositionTypeRulesInput
  allLocationIdsInScope: Boolean
  allPositionTypeIdsInScope: Boolean
}

type OrgUserLastLogin {
  _info: [ReturnMessage]
  id: Int!
  lastLogin: DateTime
}

type OrgUserMutations {
  create(orgUser: OrgUserCreateInput!): OrgUser
  update(orgUser: OrgUserUpdateInput!): OrgUser
  delete(orgUserId: Int!): Boolean
}

type OrgUserQueries {
  byId(id: ID!): OrgUser
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput], name: String, role: [OrgUserRole], active: Boolean, endorsements: [Int], locations: [Int], positionTypes: [Int]): [OrgUser]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], name: String, role: [OrgUserRole], active: Boolean, endorsements: [Int], locations: [Int], positionTypes: [Int]): PagedOrgUser
  lastLoginById(id: ID!): OrgUserLastLogin
}

enum OrgUserRole {
  INVALID
  ADMINISTRATOR
  EMPLOYEE
  ADMIN_OR_EMPLOYEE
  REPLACEMENT_EMPLOYEE
  ADMIN_OR_REPLACEMENT
}

input OrgUserUpdateInput {
  id: Int!
  rowVersion: String!
  email: String
  active: Boolean
  externalId: String
  firstName: String
  middleName: String
  lastName: String
  dateOfBirth: Date
  address1: String
  address2: String
  city: String
  postalCode: String
  stateId: StateCode
  countryId: CountryCode
  phoneNumber: String
  isSuperUser: Boolean
  permissionSetIds: [Int!]
  adminScopeLocationRules: AdminScopeLocationRulesInput
  adminScopePositionTypeRules: AdminScopePositionTypeRulesInput
  allLocationIdsInScope: Boolean
  allPositionTypeIdsInScope: Boolean
}

type PagedAbsence {
  _info: [ReturnMessage]
  results: [Absence]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedAbsenceReason {
  _info: [ReturnMessage]
  results: [AbsenceReason]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedAccountingCode {
  _info: [ReturnMessage]
  results: [AccountingCode]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedAssignment {
  _info: [ReturnMessage]
  results: [Assignment]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedCalendarChange {
  _info: [ReturnMessage]
  results: [CalendarChange]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedCalendarChangeReason {
  _info: [ReturnMessage]
  results: [CalendarChangeReason]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedContract {
  _info: [ReturnMessage]
  results: [Contract]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedContractSchedule {
  _info: [ReturnMessage]
  results: [ContractSchedule]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedCustomField {
  _info: [ReturnMessage]
  results: [CustomField]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEmployee {
  _info: [ReturnMessage]
  results: [Employee]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEndEmploymentReason {
  _info: [ReturnMessage]
  results: [EndEmploymentReason]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEndorsement {
  _info: [ReturnMessage]
  results: [Endorsement]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedEventQueue {
  _info: [ReturnMessage]
  results: [EventQueue]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedLabel {
  _info: [ReturnMessage]
  results: [Label]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedLocation {
  _info: [ReturnMessage]
  results: [Location]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedLocationGroup {
  _info: [ReturnMessage]
  results: [LocationGroup]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedNotificationLog {
  _info: [ReturnMessage]
  results: [NotificationLog]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedOrganization {
  _info: [ReturnMessage]
  results: [Organization]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedOrgUser {
  _info: [ReturnMessage]
  results: [OrgUser]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPayCode {
  _info: [ReturnMessage]
  results: [PayCode]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPermissionSet {
  _info: [ReturnMessage]
  results: [PermissionSet]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPositionSchedule {
  _info: [ReturnMessage]
  results: [PositionSchedule]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedPositionType {
  _info: [ReturnMessage]
  results: [PositionType]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedReplacementCriteriaConfig {
  _info: [ReturnMessage]
  results: [ReplacementCriteriaConfig]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedReplacementPool {
  _info: [ReturnMessage]
  results: [PagedReplacementPool]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedReplacementPoolConfig {
  _info: [ReturnMessage]
  results: [ReplacementPoolConfig]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedSavedView {
  _info: [ReturnMessage]
  results: [SavedView]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedSchoolYear {
  _info: [ReturnMessage]
  results: [SchoolYear]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedUser {
  _info: [ReturnMessage]
  results: [User]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedVacancy {
  _info: [ReturnMessage]
  results: [Vacancy]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedVacancySubSearchQueryResult {
  _info: [ReturnMessage]
  results: [VacancySubSearchQueryResult]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedWorkDayPattern {
  _info: [ReturnMessage]
  results: [WorkDayPattern]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedWorkDaySchedule {
  _info: [ReturnMessage]
  results: [WorkDaySchedule]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

type PagedWorkDayScheduleVariantType {
  _info: [ReturnMessage]
  results: [WorkDayScheduleVariantType]
  offset: Int!
  limit: Int!
  hasMoreData: Boolean!
  totalCount: Int
}

enum ParsingStatus {
  INVALID
  NOT_PARSED
  WAITING_FOR_PARSING
  PARSING
  PARSING_COMPLETE
  PARSING_ERROR
  PARSING_FAILURE
}

type PayCode implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
}

input PayCodeCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
}

input PayCodeUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
}

enum PermissionEnum {
  INVALID
  CONTRACT_SAVE
  CONTRACT_DELETE
  LOCATION_SAVE
  LOCATION_DELETE
  LOCATION_GROUP_SAVE
  LOCATION_GROUP_DELETE
  SCHOOL_YEAR_SAVE
  SCHOOL_YEAR_DELETE
  WORK_DAY_PATTERN_SAVE
  WORK_DAY_PATTERN_DELETE
  WORK_DAY_SCHEDULE_SAVE
  WORK_DAY_SCHEDULE_DELETE
  POSITION_TYPE_SAVE
  POSITION_TYPE_DELETE
  ORGANIZATION_UPDATE
  ORGANIZATION_USER_SAVE
  ORGANIZATION_USER_DELETE
  ORG_REFERENCE_DATA_SAVE
  ORG_REFERENCE_DATA_DELETE
  SHIPMENT_FILE_UPLOAD
  SHIPMENT_FILE_DELETE
  CUSTOM_FIELD_SAVE
  CUSTOM_FIELD_DELETE
  DATA_IMPORT
  ABSENCE_REASON_BALANCE_SAVE
  ABSENCE_REASON_BALANCE_DELETE
  POSITION_SAVE
  POSITION_DELETE
  EMPLOYEE_SAVE
  EMPLOYEE_DELETE
  USER_RESET_PASSWORD
  USER_CHANGE_EMAIL
  POSITION_SCHEDULE_SAVE
  POSITION_SCHEDULE_DELETE
  CALENDAR_CHANGE_SAVE
  CALENDAR_CHANGE_DELETE
  PERMISSION_SET_SAVE
  PERMISSION_SET_DELETE
  ABSENCE_SAVE
  ABSENCE_DELETE
  ABSENCE_REQUEST_REPLACEMENT
  CONTRACTED_ASSIGNMENT_SAVE
  CONTRACTED_ASSIGNMENT_DELETE
  VACANCY_ASSIGNMENT_SAVE
  VACANCY_ASSIGNMENT_DELETE
  VACANCY_ASSIGNMENT_CANCEL
  REPLACEMENT_POOL_CONFIG_SAVE
  REPLACEMENT_POOL_CONFIG_DELETE
  REPLACEMENT_POOL_SAVE
  REPLACEMENT_POOL_DELETE
  REPLACEMENT_CRITERIA_SAVE
  REPLACEMENT_CRITERIA_DELETE
  REPLACEMENT_CRITERIA_CONFIG_SAVE
  REPLACEMENT_CRITERIA_CONFIG_DELETE
  ASSIGN_UNQUALIFIED_EMPLOYEE
  ASSIGN_EMPLOYEE_WITH_MINOR_JOB_CONFLICT
  ASSIGN_EMPLOYEE_WITH_MAJOR_JOB_CONFLICT
  ASSIGN_EXCLUDED_EMPLOYEE
  VACANCY_VERIFY
}

type PermissionSet implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  orgUserRole: OrgUserRole
  permissionSet: [PermissionEnum]
  shadowFromPermissionSetId: Int
  shadowFromOrganizationRelationshipId: Int
  shadowFromOrgId: Int
}

input PermissionSetCreateInput {
  orgId: Int!
  name: String!
  description: String
  orgUserRole: OrgUserRole
  permissionSet: [PermissionEnum]
}

type PermissionSetMutations {
  create(permissionSet: PermissionSetCreateInput!): PermissionSet
  update(permissionSet: PermissionSetUpdateInput!): PermissionSet
  delete(permissionSetId: Int!): Boolean
}

type PermissionSetQueries {
  byId(id: ID!): PermissionSet
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [PermissionSet]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedPermissionSet
}

input PermissionSetUpdateInput {
  id: Int!
  rowVersion: String!
  name: String!
  description: String
}

enum PhoneType {
  INVALID
  HOME_PHONE
  WORK_PHONE
  MOBILE_PHONE
}

type Position implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  startDate: Date
  endDate: Date
  positionTypeId: Int!
  positionType: PositionType
  currentEmployeeId: Int
  currentContractId: Int!
  currentContract: Contract
  needsReplacement: NeedsReplacement
  isStaffAugmentation: Boolean!
  hoursPerFullWorkDay: Decimal
  schedules: [PositionSchedule]
}

input PositionCreateInput {
  name: String!
  orgId: Int!
  externalId: String
  startDate: Date
  endDate: Date
  positionTypeId: Int!
  currentEmployeeId: Int
  currentContractId: Int!
  needsReplacement: NeedsReplacement
  isStaffAugmentation: Boolean!
  hoursPerFullWorkDay: Decimal
}

type PositionSchedule implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  name: String!
  positionId: Int!
  rowVersion: String
  periods: [PositionSchedulePeriod]
  variants: [PositionScheduleVariant]
}

input PositionScheduleCreateInput {
  orgId: Int!
  positionId: Int!
  name: String!
  periods: [PositionSchedulePeriodInput]
}

input PositionScheduleCreateSimpleInputTypeDef {
  orgId: Int!
  positionId: Int!
  locationId: Int!
  workScheduleId: Int!
  periods: [PositionSchedulePeriodSimpleInput]
}

type PositionScheduleDate {
  _info: [ReturnMessage]
  workDate: Date
  calendarDayTypeId: CalendarDayType
  workDayId: Int!
  contractId: Int!
  positionId: Int!
  positionScheduleId: Int!
  workScheduleVariantTypeId: Int!
  startTimeLocal: Date!
  endTimeLocal: Date!
  startTimeUtc: Date!
  endTimeUtc: Date!
  fullWorkdayDuration: Short!
  totalDuration: Short!
  absenceBalanceDuration: Short!
  absenceBalanceDayPortion: Decimal!
  replacementDuration: Short!
  replacementDayPortion: Decimal!
  halfDayMorningAbsenceBalanceDayPortion: Decimal
  halfDayAfternoonAbsenceBalanceDayPortion: Decimal
  halfDayMorningEndLocal: Date
  halfDayMorningEndUtc: Date
  halfDayAfternoonStartLocal: Date
  halfDayMorningDuration: Short
  halfDayAfternoonDuration: Short
  quarterDayEarlyMorningEndLocal: Date
  quarterDayEarlyMorningEndUtc: Date
  quarterDayLateMorningStartLocal: Date
  quarterDayLateMorningStartUtc: Date
  quarterDayLateMorningEndLocal: Date
  quarterDayLateMorningEndUtc: Date
  quarterDayEarlyAfternoonStartLocal: Date
  quarterDayEarlyAfternoonStartUtc: Date
  quarterDayEarlyAfternoonEndLocal: Date
  quarterDayEarlyAfternoonEndUtc: Date
  quarterDayLateAfternoonStartLocal: Date
  quarterDayLateAfternoonStartUtc: Date
  quarterDayEarlyMorningDuration: Short
  quarterDayLateMorningDuration: Short
  quarterDayEarlyAfternoonDuration: Short
  quarterDayLateAfternoonDuration: Short
  details: [PositionScheduleDateDetail]
}

type PositionScheduleDateDetail {
  _info: [ReturnMessage]
  sequence: Int!
  name: String!
  description: String!
  locationId: Int!
  workDayScheduleId: Int
  workDaySchedulePeriodId: Int
  startDate: Date
  endDate: Date
  startTimeLocal: Date!
  endTimeLocal: Date!
  nextStartTimeLocal: Date!
  startTimeUtc: Date!
  endTimeUtc: Date!
  nextStartTimeUtc: Date!
  periodDuration: Short!
  travelDuration: Short!
  needsReplacement: Boolean!
  deductFromAbsenceBalance: Boolean!
  room: String!
  totalDuration: Short!
  absenceBalanceDuration: Short!
  absenceBalanceDayPortion: Decimal!
  replacementDuration: Short!
  replacementDayPortion: Decimal!
  isHalfDayMorningEnd: Boolean!
  isHalfDayAfternoonStart: Boolean!
  isQuarterDayEarlyMorningEnd: Boolean!
  isQuarterDayLateMorningStart: Boolean!
  isQuarterDayLateMorningEnd: Boolean!
  isQuarterDayEarlyAfternoonStart: Boolean!
  isQuarterDayEarlyAfternoonEnd: Boolean!
  isQuarterDayLateAfternoonStart: Boolean!
}

type PositionScheduleMutations {
  create(positionSchedule: PositionScheduleCreateInput!): PositionSchedule
  update(positionSchedule: PositionScheduleUpdateInput!): PositionSchedule
  delete(positionScheduleId: Int!): Boolean
  modifyScheduleVariant(positionScheduleVariant: PositionScheduleVariantModifyInput!): PositionScheduleVariant
  deleteScheduleVariant(positionScheduleVariant: PositionScheduleVariantDeleteInput!): Boolean
  createSimple(positionSchedule: PositionScheduleCreateSimpleInputTypeDef!): PositionSchedule
}

type PositionSchedulePeriod implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  positionId: Int!
  positionScheduleId: Int!
  sequence: Int
  name: String!
  description: String
  room: String
  needsReplacement: Boolean!
  deductFromAbsenceBalance: Boolean!
  locationId: Int!
  workDayScheduleId: Int
  workDaySchedulePeriodId: Int
}

input PositionSchedulePeriodInput {
  id: Int
  name: String
  description: String
  room: String
  locationId: Int
  workDayScheduleId: Int
  workDaySchedulePeriodId: Int
  needsReplacement: Boolean
  deductFromAbsenceBalance: Boolean
}

input PositionSchedulePeriodSimpleInput {
  workDaySchedulePeriodId: Int!
  name: String
  room: String
  needsReplacement: Boolean
  deductFromAbsenceBalance: Boolean
}

type PositionScheduleQueries {
  byId(id: ID!): PositionSchedule
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [PositionSchedule]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedPositionSchedule
}

input PositionScheduleUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  periods: [PositionSchedulePeriodInput]
}

type PositionScheduleVariant implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  positionScheduleId: Int!
  workDayScheduleVariantTypeId: Int!
  isStandard: Boolean!
  startTime: Seconds
  endTime: Seconds
  duration: Int
  halfDayMorningEnd: Seconds
  halfDayAfternoonStart: Seconds
  halfDayMorningDuration: Int
  halfDayAfternoonDuration: Int
  quarterDayEarlyMorningEnd: Seconds
  quarterDayLateMorningStart: Seconds
  quarterDayLateMorningEnd: Seconds
  quarterDayEarlyAfternoonStart: Seconds
  quarterDayEarlyAfternoonEnd: Seconds
  quarterDayLateAfternoonStart: Seconds
  quarterDayEarlyMorningDuration: Int
  quarterDayLateMorningDuration: Int
  quarterDayEarlyAfternoonDuration: Int
  quarterDayLateAfternoonDuration: Int
  periods: [PositionScheduleVariantPeriod]
}

input PositionScheduleVariantDeleteInput {
  positionScheduleId: Int!
  positionScheduleVariantId: Int!
}

input PositionScheduleVariantInput {
  id: Int
  workDayScheduleVariantTypeId: Int
  periods: [PositionScheduleVariantPeriodCreateInput]
}

input PositionScheduleVariantModifyInput {
  positionScheduleId: Int
  rowVersion: String
  scheduleVariant: PositionScheduleVariantInput
}

type PositionScheduleVariantPeriod implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  sequence: Int
  startTime: Seconds!
  endTime: Seconds!
  duration: Int
  dayPortion: Decimal!
  isHalfDayMorningEnd: Boolean!
  isHalfDayAfternoonStart: Boolean!
  isQuarterDayEarlyMorningEnd: Boolean!
  isQuarterDayLateMorningStart: Boolean!
  isQuarterDayLateMorningEnd: Boolean!
  isQuarterDayEarlyAfternoonStart: Boolean!
  isQuarterDayEarlyAfternoonEnd: Boolean!
  isQuarterDayLateAfternoonStart: Boolean!
}

input PositionScheduleVariantPeriodCreateInput {
  id: Int
  positionSchedulePeriodName: String!
  startTime: Int
  isHalfDayMorningEnd: Boolean
  isHalfDayAfternoonStart: Boolean
  isQuarterDayEarlyMorningEnd: Boolean
  isQuarterDayLateMorningStart: Boolean
  isQuarterDayLateMorningEnd: Boolean
  isQuarterDayEarlyAfternoonStart: Boolean
  isQuarterDayEarlyAfternoonEnd: Boolean
  isQuarterDayLateAfternoonStart: Boolean
}

type PositionType implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  forStaffAugmentation: Boolean!
  forPermanentPositions: Boolean!
  needsReplacement: NeedsReplacement
  minAbsenceDurationMinutes: Int!
  defaultContractId: Int
  defaultContract: Contract
  validUntil: DateTime
  expired: Boolean!
  payTypeId: AbsenceReasonTrackingTypeId
}

input PositionTypeCreateInput {
  name: String!
  orgId: Int!
  forStaffAugmentation: Boolean!
  forPermanentPositions: Boolean!
  externalId: String
  needsReplacement: NeedsReplacement
  minAbsenceDurationMinutes: Int!
  defaultContractId: Int
  payTypeId: AbsenceReasonTrackingTypeId
}

type PositionTypeMutations {
  create(positionType: PositionTypeCreateInput!): PositionType
  update(positionType: PositionTypeUpdateInput!): PositionType
  delete(positionTypeId: Int!): Boolean
}

type PositionTypeQueries {
  byId(id: ID!): PositionType
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [PositionType]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedPositionType
}

input PositionTypeUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  forStaffAugmentation: Boolean
  forPermanentPositions: Boolean
  externalId: String
  needsReplacement: NeedsReplacement
  minAbsenceDurationMinutes: Int
  defaultContractId: Int
  expired: Boolean
  payTypeId: AbsenceReasonTrackingTypeId
}

type Query {
  absence: AbsenceQueries
  assignment: AssignmentQueries
  branding: BrandingQueries
  calendarChange: CalendarChangeQueries
  changeLog: ChangeLogQueries
  contract: ContractQueries
  contractSchedule: ContractScheduleQueries
  customField: CustomFieldQueries
  employee: EmployeeQueries
  eventQueue: EventQueueQueries
  locationGroup: LocationGroupQueries
  location: LocationQueries
  notificationLog: NotificationLogQueries
  organization: OrganizationQueries
  orgRef_AbsenceReason: OrgRef_AbsenceReasonQueries
  orgRef_AccountingCode: OrgRef_AccountingCodeQueries
  orgRef_CalendarChangeReason: OrgRef_CalendarChangeReasonQueries
  orgRef_EndEmploymentReason: OrgRef_EndEmploymentReasonQueries
  orgRef_Endorsement: OrgRef_EndorsementQueries
  orgRef_Label: OrgRef_LabelQueries
  orgRef_PayCode: OrgRef_PayCodeQueries
  orgRef_WorkDayScheduleVariantType: OrgRef_WorkDayScheduleVariantTypeQueries
  orgUser: OrgUserQueries
  permissionSet: PermissionSetQueries
  positionSchedule: PositionScheduleQueries
  positionType: PositionTypeQueries
  referenceData: ReferenceDataQueries
  replacementCriteriaConfig: ReplacementCriteriaConfigQueries
  replacementPoolConfig: ReplacementPoolConfigQueries
  replacementPool: ReplacementPoolQueries
  returnMessageTest: ReturnMessageTestQueries
  savedView: SavedViewQueries
  schoolYear: SchoolYearQueries
  search: SearchQueries
  userAccess: UserAccessQueries
  user: UserQueries
  vacancy: VacancyQueries
  workDayPattern: WorkDayPatternQueries
  workDaySchedule: WorkDayScheduleQueries
}

type RefAbsenceDocumentType {
  _info: [ReturnMessage]
  enumValue: AbsenceDocumentType
  name: String!
  description: String
}

type RefAbsenceReasonTrackingType {
  _info: [ReturnMessage]
  enumValue: AbsenceReasonTrackingTypeId
  name: String!
  description: String
}

type RefAbsenceStatus {
  _info: [ReturnMessage]
  enumValue: AbsenceStatus
  name: String!
  description: String
}

type RefAddressType {
  _info: [ReturnMessage]
  enumValue: AddressType
  name: String!
  description: String
}

type RefCalendarDayType {
  _info: [ReturnMessage]
  enumValue: CalendarDayType
  name: String!
  description: String
}

type RefCountryCode {
  _info: [ReturnMessage]
  enumValue: CountryCode
  name: String!
  description: String
}

type RefCulture {
  _info: [ReturnMessage]
  enumValue: Culture
  name: String!
  description: String
}

type RefCurrency {
  _info: [ReturnMessage]
  enumValue: Currency
  name: String!
  description: String
}

type RefCustomFieldRequirementLevel {
  _info: [ReturnMessage]
  enumValue: CustomFieldRequirementLevel
  name: String!
  description: String
}

type RefCustomFieldSetType {
  _info: [ReturnMessage]
  enumValue: CustomFieldSetType
  name: String!
  description: String
}

type RefCustomFieldType {
  _info: [ReturnMessage]
  enumValue: CustomFieldType
  name: String!
  description: String
}

type RefCustomFieldVisibility {
  _info: [ReturnMessage]
  enumValue: CustomFieldVisibility
  name: String!
  description: String
}

type RefDateRangeType {
  _info: [ReturnMessage]
  enumValue: DateRangeType
  name: String!
  description: String
}

type RefDensityUnit {
  _info: [ReturnMessage]
  enumValue: DensityUnit
  name: String!
  description: String
}

type RefDimensionUnit {
  _info: [ReturnMessage]
  enumValue: DimensionUnit
  name: String!
  description: String
}

type ReferenceDataQueries {
  absenceDocumentTypes: [RefAbsenceDocumentType]
  absenceReasonTrackingTypes: [RefAbsenceReasonTrackingType]
  absenceStatuses: [RefAbsenceStatus]
  addressTypes: [RefAddressType]
  calendarDayTypes: [RefCalendarDayType]
  country: [RefCountryCode]
  cultures: [RefCulture]
  customFieldTypes: [RefCustomFieldType]
  customFieldVisibilitys: [RefCustomFieldVisibility]
  customFieldRequirementLevels: [RefCustomFieldRequirementLevel]
  customFieldSetTypes: [RefCustomFieldSetType]
  currencies: [RefCurrency]
  dateRangeTypes: [RefDateRangeType]
  densityUnits: [RefDensityUnit]
  dimensionUnits: [RefDimensionUnit]
  featureFlags: [RefFeatureFlag]
  fileTypes: [RefFileType]
  filePurposes: [RefFilePurpose]
  notificationReasons: [RefNotificationReason]
  parsingStatuses: [RefParsingStatus]
  objectTypes: [RefObjectType]
  organizationTypes: [RefOrganizationType]
  permissions: [RefPermission]
  phoneTypes: [RefPhoneType]
  requirementTypes: [RefRequirementType]
  states: [RefStateCode]
  labelTypes: [RefLabelType]
  fillStatuses: [RefFillStatus]
  timeZones: [RefTimeZone]
  unitTypes: [RefUnitType]
  volumeUnits: [RefVolumeUnit]
  weightUnits: [RefWeightUnit]
}

type RefFeatureFlag {
  _info: [ReturnMessage]
  enumValue: FeatureFlag
  name: String!
  description: String
}

type RefFilePurpose {
  _info: [ReturnMessage]
  enumValue: FilePurpose
  name: String!
  description: String
}

type RefFileType {
  _info: [ReturnMessage]
  enumValue: FileType
  name: String!
  description: String
}

type RefFillStatus {
  _info: [ReturnMessage]
  enumValue: FillStatus
  name: String!
  description: String
}

type RefLabelType {
  _info: [ReturnMessage]
  enumValue: LabelType
  name: String!
  description: String
}

type RefNotificationReason {
  _info: [ReturnMessage]
  enumValue: NotificationReason
  name: String!
  description: String
}

type RefObjectType {
  _info: [ReturnMessage]
  enumValue: ObjectType
  name: String!
  description: String
}

type RefOrganizationType {
  _info: [ReturnMessage]
  enumValue: OrganizationType
  name: String!
  description: String
}

type RefParsingStatus {
  _info: [ReturnMessage]
  enumValue: ParsingStatus
  name: String!
  description: String
}

type RefPermission {
  _info: [ReturnMessage]
  enumValue: PermissionEnum
  name: String!
  description: String
}

type RefPhoneType {
  _info: [ReturnMessage]
  enumValue: PhoneType
  name: String!
  description: String
}

type RefRequirementType {
  _info: [ReturnMessage]
  enumValue: RequirementType
  name: String!
  description: String
}

type RefStateCode {
  _info: [ReturnMessage]
  enumValue: StateCode
  name: String!
  description: String
}

type RefTimeZone {
  _info: [ReturnMessage]
  enumValue: TimeZone
  name: String!
  description: String
}

type RefUnitType {
  _info: [ReturnMessage]
  enumValue: UnitType
  name: String!
  description: String
}

type RefVolumeUnit {
  _info: [ReturnMessage]
  enumValue: VolumeUnit
  name: String!
  description: String
}

type RefWeightUnit {
  _info: [ReturnMessage]
  enumValue: WeightUnit
  name: String!
  description: String
}

type ReplacementCriteria implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  replacementCriteriaConfigId: Int!
  positionId: Int
  positionTypeId: Int
  objectType: ObjectType
  objectKey: Int!
  replacementCriteriaConfig: ReplacementCriteriaConfig
  replacementCriterion: [ReplacementCriterion]
}

input ReplacementCriteriaAddEndorsementsInput {
  id: Int!
  rowVersion: String!
  endorsementIds: [Int]
}

type ReplacementCriteriaConfig implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  requiredUntilLeadTimeMinutesRemain: Int
  requiredUntilLeadTimePercentRemain: Int
  requiredUntilNCandidateRemain: Int
  includeMatchingCandidates: Boolean
}

input ReplacementCriteriaConfigCreateInput {
  name: String!
  orgId: Int!
  requiredUntilLeadTimeMinutesRemain: Int
  requiredUntilLeadTimePercentRemain: Int
  requiredUntilNCandidateRemain: Int
  includeMatchingCandidates: Boolean
}

type ReplacementCriteriaConfigMutations {
  create(replacementCriteriaConfig: ReplacementCriteriaConfigCreateInput!): ReplacementCriteriaConfig
  update(replacementCriteriaConfig: ReplacementCriteriaConfigUpdateInput!): ReplacementCriteriaConfig
  delete(replacementCriteriaConfigId: Int!): Boolean
}

type ReplacementCriteriaConfigQueries {
  byId(id: ID!): ReplacementCriteriaConfig
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ReplacementCriteriaConfig]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedReplacementCriteriaConfig
}

input ReplacementCriteriaConfigUpdateInput {
  id: Int!
  rowVersion: String!
  name: String!
  requiredUntilLeadTimeMinutesRemain: Int
  requiredUntilLeadTimePercentRemain: Int
  requiredUntilNCandidateRemain: Int
  includeMatchingCandidates: Boolean
}

input ReplacementCriteriaCreateInput {
  orgId: Int!
  replacementCriteriaConfigId: Int!
  endorsementIds: [Int]
  objectType: ObjectType
  objectKey: Int!
}

type ReplacementCriteriaMutations {
  create(replacementCriteria: ReplacementCriteriaCreateInput!): ReplacementCriteria
  update(replacementCriteria: ReplacementCriteriaUpdateInput!): ReplacementCriteria
  delete(replacementCriteriaId: Int!): Boolean
  addEndorsements(replacementCriteriaEndorsements: ReplacementCriteriaAddEndorsementsInput!): ReplacementCriteria
  removeEndorsements(replacementCriteriaEndorsements: ReplacementCriteriaRemoveEndorsementsInput!): ReplacementCriteria
}

input ReplacementCriteriaRemoveEndorsementsInput {
  id: Int!
  rowVersion: String!
  endorsementIds: [Int]
}

input ReplacementCriteriaUpdateInput {
  id: Int!
  rowVersion: String!
  replacementCriteriaConfigId: Int!
}

type ReplacementCriterion implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  replacementCriteriaId: Int!
  endorsementId: Int!
}

type ReplacementPool implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  replacementPoolConfigId: Int!
  includeAllEmployees: Boolean
  locationGroupId: Int
  locationId: Int
  positionTypeId: Int
  employeeId: Int
  objectType: ObjectType
  objectKey: Int!
  numReplacements: Int
  replacementPoolConfig: ReplacementPoolConfig
  replacementPoolMembers: [ReplacementPoolMember]
}

input ReplacementPoolAddEmployeesInput {
  id: Int!
  rowVersion: String!
  employeeIds: [Int]
  appliesToAllEmployees: Boolean
}

type ReplacementPoolConfig implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  exclude: Boolean
  maxLeadTimeMinutes: Int!
  minLeadTImeMinutes: Int!
  selectable: Boolean
  percentLeadTime: Int
}

input ReplacementPoolConfigCreateInput {
  name: String!
  orgId: Int!
  description: String
  exclude: Boolean
  maxLeadTimeMinutes: Int!
  minLeadTImeMinutes: Int!
  selectable: Boolean
  percentLeadTime: Int
}

type ReplacementPoolConfigMutations {
  create(replacementPoolConfig: ReplacementPoolConfigCreateInput!): ReplacementPoolConfig
  update(replacementPoolConfig: ReplacementPoolConfigUpdateInput!): ReplacementPoolConfig
  delete(replacementPoolConfigId: Int!): Boolean
}

type ReplacementPoolConfigQueries {
  byId(id: ID!): ReplacementPoolConfig
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ReplacementPoolConfig]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedReplacementPoolConfig
}

input ReplacementPoolConfigUpdateInput {
  id: Int!
  rowVersion: String!
  name: String!
  description: String
  exclude: Boolean
  maxLeadTimeMinutes: Int!
  minLeadTImeMinutes: Int!
  selectable: Boolean
  percentLeadTime: Int
}

input ReplacementPoolCreateInput {
  orgId: Int!
  replacementPoolConfigId: Int!
  employeeIds: [Int]
  includeAllEmployees: Boolean
  objectType: ObjectType
  objectKey: Int!
}

type ReplacementPoolMember implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  replacementPoolId: Int!
  employeeId: Int!
  employee: BasicEmployee
}

type ReplacementPoolMutations {
  create(replacementPool: ReplacementPoolCreateInput!): ReplacementPool
  update(replacementPool: ReplacementPoolUpdateInput!): ReplacementPool
  delete(replacementPoolId: Int!): Boolean
  addMembers(replacementPoolMember: ReplacementPoolAddEmployeesInput!): ReplacementPool
  removeMembers(replacementPoolMember: ReplacementPoolRemoveEmployeesInput!): ReplacementPool
}

type ReplacementPoolQueries {
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [ReplacementPoolSummary]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedReplacementPool
  byId(limit: Int, offset: Int, forUpdate: Boolean, replacementPoolId: ID!): ReplacementPool
}

input ReplacementPoolRemoveEmployeesInput {
  id: Int!
  rowVersion: String!
  employeeIds: [Int]
}

type ReplacementPoolSummary implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  replacementPoolConfigId: Int!
  includeAllEmployees: Boolean
  locationGroupId: Int
  locationId: Int
  positionTypeId: Int
  employeeId: Int
  objectType: ObjectType
  objectKey: Int!
  numReplacements: Int
  replacementPoolConfig: ReplacementPoolConfig
}

input ReplacementPoolUpdateInput {
  id: Int!
  rowVersion: String!
  replacementPoolConfigId: Int!
}

enum RequirementType {
  INVALID
  REQUIRED
  DESIRED
  DISQUALIFYING
}

input ResetUserPasswordInput {
  id: Int!
  orgId: Int
}

type ReturnMessage {
  text: String
  code: String
  severity: String
}

type ReturnMessageTestQueries {
  testInfo(includeInfo: Boolean, includeWarning: Boolean, includeError: Boolean): TestTypeDef
}

type SavedView implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  query: String!
  viewType: SavedViewType
  createdByOrgUser: OrgUser
  createdByOrgUserId: Int
  createdByUser: User
  createdByUserId: Int!
  changedByOrgUser: OrgUser
  changedByOrgUserId: Int
  changedByUser: User
  changedByUserId: Int!
  fromClause: String!
  selectClause: String!
  whereClause: String!
  orderByClause: String!
  pageSizeClause: String!
  fields: [SavedViewField]
  fieldNames: [String]
  sort: [SavedViewSort]
  pageSize: Int
  filters: [SavedViewFilter]
}

input SavedViewCreateInput {
  orgId: Int!
  name: String!
  description: String
  query: String!
}

type SavedViewField {
  _info: [ReturnMessage]
  name: String!
}

type SavedViewFilter {
  _info: [ReturnMessage]
  field: SavedViewField
  fieldName: String!
  operator: String!
  values: [String]!
}

type SavedViewMutations {
  create(savedView: SavedViewCreateInput!): SavedView
  update(savedView: SavedViewUpdateInput!): SavedView
  delete(savedViewId: Int!): Boolean
}

type SavedViewQueries {
  byId(id: ID!): SavedView
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [SavedView]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput], searchText: String): PagedSavedView
}

type SavedViewSort {
  _info: [ReturnMessage]
  direction: SavedViewSortDirection
  field: SavedViewField
  fieldName: String!
}

enum SavedViewSortDirection {
  ASC
  DESC
}

enum SavedViewType {
  ABSENCE_SUMMARY
  VACANCY_SUMMARY
  LOOSE
  INVALID
}

input SavedViewUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  query: String
}

scalar SByte

type SchoolYear implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  startDate: Date
  endDate: Date
  earliestDateForAbsenceEntry: Date
}

input SchoolYearCreateInput {
  orgId: Int!
  name: String!
  externalId: String
  startDate: Date
  endDate: Date
  earliestDateForAbsenceEntry: Date
}

type SchoolYearMutations {
  create(schoolYear: SchoolYearCreateInput!): SchoolYear
  update(schoolYear: SchoolYearUpdateInput!): SchoolYear
  delete(schoolYearId: Int!): Boolean
}

type SchoolYearQueries {
  byId(id: ID!): SchoolYear
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [SchoolYear]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedSchoolYear
  currentSchoolYear(orgId: ID!): SchoolYear
}

input SchoolYearUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  externalId: String
  startDate: Date
  endDate: Date
  earliestDateForAbsenceEntry: Date
}

type SearchQueries {
  global(orgId: ID, searchText: String, limit: Int): [SearchResult]
}

type SearchResult {
  _info: [ReturnMessage]
  id: ID
  type: ObjectType
  orgId: Int!
  fieldName: String
  value: String!
  matches: [SearchResultMatch]
}

type SearchResultMatch {
  _info: [ReturnMessage]
  fieldName: String
  value: String!
}

scalar Seconds

enum SeedOrgDataOptionEnum {
  DONT_SEED
  SEED_SYNCHRONOUSLY
  SEED_ASYNCHRONOUSLY
}

scalar Short

input SortDetailsInput {
  sortByPropertyName: String
  sortAscending: Boolean
}

enum StateCode {
  INVALID
  AL
  AK
  AZ
  AR
  CA
  CO
  CT
  DE
  FL
  GA
  HI
  ID
  IL
  IN
  IA
  KS
  KY
  LA
  ME
  MD
  MA
  MI
  MN
  MS
  MO
  MT
  NE
  NV
  NH
  NJ
  NM
  NY
  NC
  ND
  OH
  OK
  OR
  PA
  RI
  SC
  SD
  TN
  TX
  UT
  VT
  VA
  WA
  WV
  WI
  WY
  AS
  DC
  FM
  GU
  MH
  MP
  PW
  PR
  VI
  AB
  BC
  MB
  NB
  NL
  NS
  NT
  NU
  ON
  PE
  QC
  SK
  YT
}

input SwapVacancyAssignmentsInput {
  firstVacancyId: Int!
  firstVacancyRowVersion: String!
  secondVacancyId: Int!
  secondVacancyRowVersion: String!
  ignoreWarnings: Boolean
}

type TestTypeDef {
  _info: [ReturnMessage]
  test: String
}

enum TimeZone {
  INVALID
  UTC
  ATLANTIC_STANDARD_TIME_CANADA
  EASTERN_STANDARD_TIME_US_CANADA
  EASTERN_STANDARD_TIME_INDIANA_EAST
  CENTRAL_STANDARD_TIME_US_CANADA
  CENTRAL_STANDARD_TIME_SASKATCHEWAN
  MOUNTAIN_STANDARD_TIME_US_CANADA
  MOUNTAIN_STANDARD_TIME_ARIZONA
  PACIFIC_STANDARD_TIME_US_CANADA
  ALASKAN_STANDARD_TIME
  HAWAIIAN_STANDARD_TIME
}

scalar UInt

scalar ULong

enum UnitType {
  INVALID
  IMPERIAL
  METRIC
}

scalar Uri

type User implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  firstName: String!
  middleName: String
  lastName: String!
  loginEmail: String!
  recoveryEmail: String
  phone: String
  formattedPhone: String
  cultureId: Culture
  timeZoneId: TimeZone
  rowVersion: String!
  orgUsers: [OrgUser]
  preferences: UserPreferences
  isSystemAdministrator: Boolean!
  eulaAcceptedAtUtc: DateTime
  eulaAccepted: Boolean!
}

type UserAccess {
  _info: [ReturnMessage]
  user: User
  isSystemAdministrator: Boolean!
  visibleOrganizations: [Organization]
}

type UserAccessQueries {
  me: UserAccess
}

input UserCreateInput {
  firstName: String!
  middleName: String
  lastName: String!
  loginEmail: String!
  recoveryEmail: String
  phone: String
  timeZoneId: TimeZone
  cultureId: Culture
  preferences: UserPreferencesInput
}

input UserLoginEmailChangeInput {
  id: Int!
  rowVersion: String!
  loginEmail: String!
}

type UserMutations {
  create(user: UserCreateInput!): User
  update(user: UserUpdateInput!): User
  changeLoginEmail(loginEmailChange: UserLoginEmailChangeInput!): User
  delete(id: Int!): Boolean
  resetPassword(userInfo: ResetUserPasswordInput!): User
  acceptEula: User
}

type UserPreferences {
  _info: [ReturnMessage]
  receiveEmailDigest: Boolean
  emailDigestReceiveAll: Boolean
  emailDigestReceiveTime: Seconds
  notificationPreferences: [NotificationPreference]
}

input UserPreferencesInput {
  receiveEmailDigest: Boolean
  emailDigestReceiveAll: Boolean
  emailDigestReceiveTime: Int
  notificationPreferences: [NotificationPreferenceInput]
}

type UserQueries {
  byId(id: ID!): User
  paged(limit: Int, offset: Int, searchText: String): PagedUser
}

input UserUpdateInput {
  id: Int!
  rowVersion: String!
  firstName: String
  middleName: String
  lastName: String
  recoveryEmail: String
  phone: String
  timeZoneId: TimeZone
  cultureId: Culture
  preferences: UserPreferencesInput
}

scalar UShort

type Vacancy implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  positionId: Int!
  contractId: Int!
  absenceId: Int
  isLongTerm: Boolean
  notesToReplacement: String
  startDate: Date
  startTimeLocal: DateTime
  endDate: Date
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  numDays: Int
  totalDuration: Int!
  totalDayPortion: Decimal!
  fillStatus: FillStatus
  details: [VacancyDetail]
  requestedEmployees: [VacancyEmployeeRequest]
  interestedEmployees: [VacancyEmployeeInterest]
  position: Position
  absence: Absence
}

enum VacancyAvailability {
  YES
  MINOR_CONFLICT
  NO
}

type VacancyDetail implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  vacancyId: Int!
  startDate: Date
  startTimeLocal: DateTime
  endDate: Date
  endTimeLocal: DateTime
  startTimeUtc: DateTime
  endTimeUtc: DateTime
  actualDuration: Int
  dayPortion: Decimal!
  isFilled: Boolean
  verifiedAtLocal: DateTime
  verifiedAtUtc: DateTime
  verifyComments: String
  payDurationOverride: Int
  workDayScheduleId: Int
  workDayId: Int!
  workDay: WorkDay
  assignmentId: Int
  assignment: Assignment
  locationId: Int
  location: Location
  accountingCodeAllocations: [VacancyDetailAccountingCode]
  payCodeId: Int
  payCode: PayCode
  vacancy: BasicVacancy
  totalDayPortion: Decimal
}

type VacancyDetailAccountingCode implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  vacancyId: Int!
  vacancyDetailId: Int!
  accountingCodeId: Int!
  accountingCode: AccountingCode
  allocation: Decimal!
}

input VacancyDetailAccountingCodeInput {
  accountingCodeId: Int!
  allocation: Decimal!
}

type VacancyDetailCount {
  date: Date
  count: Int!
}

input VacancyDetailInput {
  date: DateTime
  startTime: Seconds
  endTime: Seconds
  locationId: Int!
}

input VacancyDetailVerifyInput {
  vacancyDetailId: ID
  doVerify: Boolean
  verifyComments: String
  payCodeId: Int
  payDurationOverride: Int
  dayPortion: Decimal
  accountingCodeAllocations: [VacancyDetailAccountingCodeInput]
}

type VacancyEmployeeInterest implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  vacancyId: Int!
  employeeId: Int!
  interestRatingId: InterestRating
  isInterested: Boolean
  vacancyRejectionReasonId: VacancyRejectionReason
  rejectedAtUtc: DateTime
  isRejected: Boolean
}

type VacancyEmployeeRequest implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  vacancyId: Int!
  employeeId: Int!
  vacancyRejectionReasonId: VacancyRejectionReason
  rejectedAtUtc: DateTime
  isRejected: Boolean
  validUntilUtc: DateTime
  isExpired: Boolean
  requestedByOrgUserId: Int
  requestedByOrgUser: OrgUser
}

type VacancyMutations {
  requestVacancy(vacancyRequest: EmployeeInterestInVacancyInput!): VacancyEmployeeInterest
  rejectVacancy(vacancyRejection: EmployeeRejectVacancyInput!): VacancyEmployeeInterest
  assignVacancy(vacancyAssignment: CreateVacancyAssignmentInput!): Assignment
  swapVacancyAssignments(swapDetails: SwapVacancyAssignmentsInput!): Boolean
  verifyVacancyDetail(vacancyDetail: VacancyDetailVerifyInput!): VacancyDetail
}

enum VacancyQualification {
  FULLY
  MINIMALLY
  NOT_QUALIFIED
}

type VacancyQueries {
  byId(id: ID!): Vacancy
  all(orgId: ID, orgIds: [ID], sortBy: [SortDetailsInput]): [Vacancy]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, sortBy: [SortDetailsInput]): PagedVacancy
  getAssignmentsForVerify(locationIds: [Int], fromDate: Date, toDate: Date, limit: Int, orgId: ID!, includeVerified: Boolean): [VacancyDetail]
  getCountOfAssignmentsForVerify(locationIds: [Int], fromDate: Date, toDate: Date, orgId: ID!, includeVerified: Boolean): [VacancyDetailCount]
  getTotalCountOfAssignmentsToVerifyForCurrentSchoolYear(orgId: ID!): Int
  wasEmployeeAssignedToJob(id: ID!, vacancyId: ID!): VacancyWasAssignedResult
  employeeSuitableForJob(id: ID!, vacancyId: ID!): Boolean
  employeeJobSearch(id: ID!, availableJobsOnly: Boolean, locationIds: [Int], positionTypeIds: [Int], limit: Int, offset: Int): PagedVacancy
  userSuitableForJob(id: ID!, vacancyId: ID!): Boolean
  userJobSearch(id: ID!, availableJobsOnly: Boolean, orgIds: [Int], locationIds: [Int], positionTypeIds: [Int], limit: Int, offset: Int): PagedVacancy
}

enum VacancyRejectionReason {
  INVALID
  NOT_SPECIFIED
  OTHER
  DISLIKE_POSITION
  DISLIKE_LOCATION
  DISLIKE_TEACHER
}

type VacancySubSearchQueryResult {
  _info: [ReturnMessage]
  isAvailableToSubWhenSearching: Boolean!
  availableToSubWhenSearchingAtLocal: DateTime
  availableToSubWhenSearchingAtUtc: DateTime
  isSelectable: Boolean!
  employeeId: Int!
  firstName: String!
  middleName: String
  lastName: String!
  phoneNumber: String
  levelQualified: VacancyQualification!
  levelAvailable: VacancyAvailability!
  vacancyId: Int
  vacancyCreatedUtc: Date!
  vacancyStartTimeUtc: Date!
  totalLeadTimeMinutes: Int!
  minutesLeadTimeLeft: Int!
  percentLeadTimeLeft: Int!
  isRejected: Boolean!
  isAvailable: Boolean!
  otherJobConflict: Boolean!
  otherOrgJobConflict: Boolean!
  unavailableToWork: Boolean!
  minutesOverlapForJobConflict: Int!
  minutesOverlapForUnavailable: Int!
  isMinorJobConflict: Boolean!
  isMajorJobConflict: Boolean!
  isQualified: Boolean!
  excludedAttribute: Boolean!
  missingAttribute: Boolean!
  qualifiedAtMinutesLeft: Int!
  qualifiedAtPercentLeft: Int!
  qualifiedAtLocal: DateTime
  qualifiedAtUtc: DateTime
  isVisible: Boolean!
  excludedSub: Boolean!
  notYetVisible: Boolean!
  notIncluded: Boolean!
  visibleAtMinutesLeft: Int!
  visibleAtPercentLeft: Int!
  visibleAtLocal: DateTime
  visibleAtUtc: DateTime
  isFavoriteEmployee: Boolean!
  isFavoritePositionType: Boolean!
}

type VacancyWasAssignedResult {
  _info: [ReturnMessage]
  vacancyId: Int!
  employeeId: Int!
  returnCode: Int!
  description: String!
  employeeWasAssigned: Boolean!
  assignmentId: Int
  assignment: Assignment
}

enum VolumeUnit {
  INVALID
  CUBIC_INCHES
  CUBIC_FEET
  CUBIC_CENTIMETERS
  CUBIC_METERS
}

enum WeightUnit {
  INVALID
  POUNDS
  KILOGRAMS
}

type WorkDay implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  workDayPatternId: Int!
  sequence: Int
  name: String!
  fullDayEquivalence: Decimal!
  dayOfWeek: DayOfWeek
}

input WorkDayCreateInput {
  name: String!
  dayOfWeek: DayOfWeek
  fullDayEquivalence: Decimal!
}

type WorkDayPattern implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  shiftContractSchedulesForNonInstructionalDays: Boolean
  validUntilUtc: DateTime
  isExpired: Boolean
  workDays: [WorkDay]
}

input WorkDayPatternCreateInput {
  orgId: Int!
  name: String!
  externalId: String
  shiftContractSchedulesForNonInstructionalDays: Boolean!
  workDays: [WorkDayCreateInput]
}

type WorkDayPatternMutations {
  create(workDayPattern: WorkDayPatternCreateInput!): WorkDayPattern
  update(workDayPattern: WorkDayPatternUpdateInput!): WorkDayPattern
  delete(workDayPatternId: Int!): Boolean
}

type WorkDayPatternQueries {
  byId(id: ID!): WorkDayPattern
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput]): [WorkDayPattern]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput]): PagedWorkDayPattern
}

input WorkDayPatternUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  externalId: String
  shiftContractSchedulesForNonInstructionalDays: Boolean
  expired: Boolean
  workDays: [WorkDayCreateInput]
}

type WorkDaySchedule implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  workDayPatternId: Int!
  validUntil: DateTime
  expired: Boolean
  periods: [WorkDaySchedulePeriod]
  variants: [WorkDayScheduleVariant]
  usages: [WorkDayScheduleUsage]
}

input WorkDayScheduleCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
  workDayPatternId: Int
  periods: [WorkDaySchedulePeriodInput]
  locationIds: [Int]
  locationGroupIds: [Int]
  standardSchedule: WorkDayScheduleVariantInput
  additionalVariants: [WorkDayScheduleVariantInput]
}

type WorkDayScheduleMutations {
  create(workDaySchedule: WorkDayScheduleCreateInput!): WorkDaySchedule
  update(workDaySchedule: WorkDayScheduleUpdateInput!): WorkDaySchedule
  delete(workDayScheduleId: Int!): Boolean
  modifyScheduleVariant(workDayScheduleVariant: WorkDayScheduleVariantModifyInput!): WorkDayScheduleVariant
  deleteScheduleVariant(workDayScheduleVariant: WorkDayScheduleVariantDeleteInput!): Boolean
}

type WorkDaySchedulePeriod implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  sequence: Int
  name: String!
  description: String
  workDayScheduleId: Int!
}

input WorkDaySchedulePeriodInput {
  id: Int
  name: String
  description: String
}

type WorkDayScheduleQueries {
  byId(id: ID!): WorkDaySchedule
  all(orgId: ID, orgIds: [ID], includeExpired: Boolean, sortBy: [SortDetailsInput], searchText: String): [WorkDaySchedule]
  paged(orgId: ID, orgIds: [ID], limit: Int, offset: Int, includeExpired: Boolean, sortBy: [SortDetailsInput], searchText: String): PagedWorkDaySchedule
}

input WorkDayScheduleUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  workDayPatternId: Int
  expired: Boolean
  periods: [WorkDaySchedulePeriodInput]
  locationIds: [Int]
  locationGroupIds: [Int]
  standardSchedule: WorkDayScheduleVariantInput
}

type WorkDayScheduleUsage implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  workDayScheduleId: Int!
  workDayId: Int
  locationId: Int
  locationGroupId: Int
  workDay: WorkDay
  location: Location
  locationGroup: LocationGroup
}

type WorkDayScheduleVariant implements ModelObjectInterface & OrgObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  workDayScheduleId: Int!
  workDayScheduleVariantTypeId: Int!
  isStandard: Boolean!
  startTime: Seconds
  endTime: Seconds
  duration: Int
  halfDayMorningEnd: Seconds
  halfDayAfternoonStart: Seconds
  halfDayMorningDuration: Int
  halfDayAfternoonDuration: Int
  quarterDayEarlyMorningEnd: Seconds
  quarterDayLateMorningStart: Seconds
  quarterDayLateMorningEnd: Seconds
  quarterDayEarlyAfternoonStart: Seconds
  quarterDayEarlyAfternoonEnd: Seconds
  quarterDayLateAfternoonStart: Seconds
  quarterDayEarlyMorningDuration: Int
  quarterDayLateMorningDuration: Int
  quarterDayEarlyAfternoonDuration: Int
  quarterDayLateAfternoonDuration: Int
  periods: [WorkDayScheduleVariantPeriod]
}

input WorkDayScheduleVariantDeleteInput {
  workDayScheduleId: Int!
  workDayScheduleVariantId: Int!
}

input WorkDayScheduleVariantInput {
  id: Int
  workDayScheduleVariantTypeId: Int
  periods: [WorkDayScheduleVariantPeriodInput]
}

input WorkDayScheduleVariantModifyInput {
  workDayScheduleId: Int
  rowVersion: String
  scheduleVariant: WorkDayScheduleVariantInput
}

type WorkDayScheduleVariantPeriod implements ModelObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  workDaySchedulePeriodId: Int!
  sequence: Int
  startTime: Seconds!
  endTime: Seconds!
  nextStartTime: Seconds!
  periodDuration: Int
  travelDuration: Int
  dayPortion: Decimal!
  isHalfDayMorningEnd: Boolean!
  isHalfDayAfternoonStart: Boolean!
  isQuarterDayEarlyMorningEnd: Boolean!
  isQuarterDayLateMorningStart: Boolean!
  isQuarterDayLateMorningEnd: Boolean!
  isQuarterDayEarlyAfternoonStart: Boolean!
  isQuarterDayEarlyAfternoonEnd: Boolean!
  isQuarterDayLateAfternoonStart: Boolean!
}

input WorkDayScheduleVariantPeriodInput {
  id: Int
  workDaySchedulePeriodName: String!
  startTime: Int
  endTime: Int
  isHalfDayMorningEnd: Boolean
  isHalfDayAfternoonStart: Boolean
  isQuarterDayEarlyMorningEnd: Boolean
  isQuarterDayLateMorningStart: Boolean
  isQuarterDayLateMorningEnd: Boolean
  isQuarterDayEarlyAfternoonStart: Boolean
  isQuarterDayEarlyAfternoonEnd: Boolean
  isQuarterDayLateAfternoonStart: Boolean
}

type WorkDayScheduleVariantType implements ModelObjectInterface & OrgObjectInterface & DomainObjectInterface {
  _info: [ReturnMessage]
  id: ID!
  createdUtc: DateTime!
  changedUtc: DateTime!
  deletedUtc: DateTime!
  isDeleted: Boolean!
  orgId: Int!
  organization: Organization!
  createdLocal: DateTime
  changedLocal: DateTime
  deletedLocal: DateTime
  externalId: String
  rowVersion: String!
  name: String!
  description: String
  validUntil: Date
  expired: Boolean!
  isStandard: Boolean!
}

input WorkDayScheduleVariantTypeCreateInput {
  orgId: Int!
  name: String!
  description: String
  externalId: String
  isStandard: Boolean!
}

input WorkDayScheduleVariantTypeUpdateInput {
  id: Int!
  rowVersion: String!
  name: String
  description: String
  externalId: String
  expired: Boolean
  isStandard: Boolean!
}
